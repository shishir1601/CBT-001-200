/********************************************************************
 * OFFLMOD: V1.0, (c) 2003 Jason Winter - but with unrestricted use *
 *                                                                  *
 *           Compile with the JCC C compiler for MVS.               *
 *                                                                  *
 *    Components of design from the public domain REVIEW command.   *
 ********************************************************************/
 
#include <stdio.h>
#include <string.h>
#include <time.h>
 
#define maxdirent 2500 /* Enlarge as required, space for member names */
 
#define endmark "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
#define SKIP_MASK ((int) 0x1F)
#define ALIAS_MASK ((int) 0x80)
#define TTRN_MASK ((int) 0x60)
 
static long pdscount;   /* How many members found */
 
static char * pdsalias; /* 1=alias, 0=member */
static char * pdsname;  /* member/alias name */
static int  * pdsttrz;  /* location of member */
static int  * pdsttrs;  /* stow ttrs data */
static char * pdsinfo;  /* stow info & ttrn */
static int  * pdsdlen;  /* raw stow data length */
static char * pdsdata;  /* raw stow data */
 
/* readdir: loads a pds directory into the buffers above */
static long readdir (char * pds) {
    long   i;
    long   j;
    FILE * fh;
    char   line [256];
    char   tstr [9];
    char * a;
    char * name;
    short  b;
    short  count;
    short  skip;
    long   quit;
    int    info_byte;
    short  l;
 
    fh = fopen (pds, "rb,klen=0,lrecl=256,blksize=256,recfm=u,force");
    if (fh == NULL) {
        printf ("Error opening directory in %s\n", pds);
        return (1);
    };
 
    fread (&l, 1, 2, fh); /* Skip U length */
 
    pdscount = 0;
 
    quit = 0;
    while (fread (line, 1, 256, fh) == 256) {
 
        a = &(line [2]);
        b = ((short *)&(line [0])) [0];
        count = 2;
        while (count < b) {
 
            if (memcmp (a, endmark, 8) == 0) {
                quit = 1;
                break;
            };
 
            name = a;
            a += 8;
 
            pdsttrz [pdscount] = (((int *)a) [0]) & 0xFFFFFF00;
            a += 3;
 
            pdsinfo [pdscount] = *a;
            info_byte = (int)(*a);
            a++;
 
            skip = (info_byte & SKIP_MASK) * 2;
 
            if ((info_byte & ALIAS_MASK) == 0) {
 
                pdsalias [pdscount] = 0;
 
                i = (info_byte & TTRN_MASK) >> 5;
                j = 0;
                while (j < i) {
                    pdsttrs [(pdscount * 3) + j] =
                        (((int *)a) [j]) & 0xFFFFFF00;
                    j++;
                };
                while (j < 3)
                    pdsttrs [(pdscount * 3) + j++] = -1;
 
            } else
                pdsalias [pdscount] = 1;
 
            if (skip)
                memcpy (&(pdsdata [pdscount * 62]), a, skip);
            pdsdlen [pdscount] = skip;
 
            strncpy (tstr, name, 8);
            j = 7;
            while (tstr [j] == ' ') j--;
            tstr [++j] = 0;
 
            strcpy (&(pdsname [pdscount * 9]), tstr);
 
            if (++pdscount == maxdirent) {
                quit = 1;
                break;
            };
 
            a += skip;
 
            count += (8 + 4 + skip);
        };
 
        if (quit) break;
 
        fread (&l, 1, 2, fh); /* Skip U length */
    };
 
    fclose (fh);
    return (0);
};
 
/* dumpstart: creates the member header */
static void dumpstart (FILE * fh, char * member) {
    long i;
    char dline [81];
 
    sprintf (dline, "./ ADD NAME=%s", member);
    i = strlen (dline);
    while (i != 80) dline [i++] = ' ';
 
    fwrite (dline, 1, 80, fh);
};
 
/* dumpalias: creates a header for an alias to a member */
static void dumpalias (FILE * fh, char * member) {
    long i;
    char dline [81];
 
    sprintf (dline, "./ ALIAS NAME=%s", member);
    i = strlen (dline);
    while (i != 80) dline [i++] = ' ';
 
    fwrite (dline, 1, 80, fh);
};
 
/* dumpnote: creates a marker for TTR directory information */
static void dumpnote (FILE * fh, char n) {
    long i;
    char dline [81];
 
    sprintf (dline, "./ NOTE%c", n);
    i = strlen (dline);
    while (i != 80) dline [i++] = ' ';
 
    fwrite (dline, 1, 80, fh);
};
 
/* dumpseq: converts U style records into FB80 records */
static void dumpseq (FILE * fh, char * data, long len) {
    long i;
    long lenleft;
    char dline [81];
 
    memset (dline, ' ', 80);
    dline [80] = 0;
 
    i = len;
    fwrite (&i, 1, 4, fh);
 
    lenleft = 76;
 
    i = 0;
    while (len != 0) {
 
        if (len >= lenleft) {
            fwrite (&(data [i]), 1, lenleft, fh);
            len -= lenleft;
            i += lenleft;
        } else {
            fwrite (&(data [i]), 1, len, fh);
            fwrite (dline, 1, lenleft - len, fh);
            len = 0;
        };
 
        lenleft = 80;
    };
};
 
/* dumpstow: creates the stow data header */
static void dumpstow (FILE * fh, long m) {
    long i;
    char dline [81];
 
    sprintf (dline, "./ STOW DATA=");
 
    i = strlen (dline);
    while (i != 80) dline [i++] = ' ';
 
    dline [13] = pdsinfo [m];
 
    if (pdsdlen [m])
        memcpy (&(dline [14]), &(pdsdata [m * 62]), pdsdlen [m]);
 
    fwrite (dline, 1, 80, fh);
};
 
/* dumpend: creates the end record */
static void dumpend (FILE * fh) {
    long   i;
    char   dline [81];
    time_t ltime;
    struct tm * today;
    char   tstr [40];
 
    time (&ltime);
    today = localtime (&ltime);
    strftime (tstr, 39, "%H:%M ON %y/%m/%d", today);
 
    sprintf (dline,
        "./ ENDUP       \"REVIEW\" PDS MEMBER OFFLOAD AT %s", tstr);
    i = strlen (dline);
    while (i != 80) dline [i++] = ' ';
 
    fwrite (dline, 1, 80, fh);
};
 
long main (int argc, char * argv [], char * argp []) {
    long   i;
    long   mptr = 0;
    int    note;
    int    h;
    FILE * fh;
    FILE * fho;
    char   member [9];
    char   file [260];
    short  l;
    long   offlded = 0;
    long   offalia = 0;
    long   argument;
    char * lmod;
 
    if (argc < 3) {
        printf ("You must supply a pds-name and seq-name:\n");
        printf ("OFFLMOD //DSN:SYS1.LOADLIB //DSN:SYS2.REVLMOD {MEMBERS}\n");
        printf ("Produces SYS2.REVLMOD containing SYS1.LOADLIB programs.\n");
        printf ("Optional MEMBER name(s) offloads the matching member(s).\n");
        printf ("Any alias's are automatically offloaded with the member.\n");
        return (1);
    };
 
    lmod = (char *)malloc (32761);
 
    pdsalias = (char *)malloc (maxdirent);
    pdsname = (char *)malloc (maxdirent * 9);
    pdsttrz = (int *)malloc (maxdirent * 4);
    pdsttrs = (int *)malloc (maxdirent * 3 * 4);
    pdsinfo = (char *)malloc (maxdirent);
    pdsdlen = (int *)malloc (maxdirent * 4);
    pdsdata = (char *)malloc (maxdirent * 62);
 
    if ((lmod == NULL) ||
        (pdsalias == NULL) ||
        (pdsname == NULL) ||
        (pdsttrz == NULL) ||
        (pdsttrs == NULL) ||
        (pdsinfo == NULL) ||
        (pdsdlen == NULL) ||
        (pdsdata == NULL)) {
 
        printf ("Unable to allocate buffers, no memory left.\n");
 
        if (lmod) free (lmod);
 
        if (pdsalias) free (pdsalias);
        if (pdsname) free (pdsname);
        if (pdsttrz) free (pdsttrz);
        if (pdsttrs) free (pdsttrs);
        if (pdsinfo) free (pdsinfo);
        if (pdsdlen) free (pdsdlen);
        if (pdsdata) free (pdsdata);
 
        return (1);
    };
 
    sprintf (file, "%s", argv [1]);
    strupr (file);
 
    if (readdir (file) != 0) {
        return (1);
    };
 
    sprintf (file, "%s", argv [2]);
    strupr (file);
 
    fho = fopen (file, "wb");
    if (fho == NULL) {
        printf ("Unable to open output sequential file: %s\n", file);
        return (1);
    };
 
    if (argc >= 4) {
        strncpy (member, argv [3], 8);
        member [8] = 0;
        strupr (member);
        argument = 4;
    } else {
        member [0] = 0;
    };
 
    while (1) {
 
        while ((mptr < pdscount) && (pdsalias [mptr]))
            mptr++; /* Skip alias entries here */
 
        if (mptr < pdscount) {
 
            if ((member [0]) && /* searching for a particular member? */
                (strcmp (member, &(pdsname [mptr * 9])) != 0)) {
 
                /* not the one */
                mptr++;
                continue; /* then go back to the top of the main loop */
            };
 
        } else {
 
            if ((member [0]) &&
                (argument < argc)) {
 
                strncpy (member, argv [argument++], 8);
                member [8] = 0;
                strupr (member);
 
                mptr = 0;
                continue;
            };
 
            break;
        };
 
        sprintf (file, "%s(%s)", argv [1], &(pdsname [mptr * 9]));
        strupr (file);
        fh = fopen (file, "rb");
        if (fh != NULL) {
 
            dumpstart (fho, &(pdsname [mptr * 9]));
 
            h = _fileno (fh); /* Get low-level io handle for JCC's __note */
 
            while (fread (&l, 1, 2, fh) == 2) {
 
                /*(For WRITING: - not done in this program, */
                /* use __note after all bytes have been written) */
 
                /* For READING: */
                /* The best place to NOTE is somewhere
                   in the middle of a U type record */
                note = (__note (h) & 0xFFFFFF00);
 
                fread (lmod, 1, l, fh); /* read the records data */
 
                dumpseq (fho, lmod, l); /* dump the record */
 
                i = 0;        /* Check if this record requires a NOTE... */
                while (i < 3) {
                    if (note == pdsttrs [(mptr * 3) + i]) break;
                    i++;
                };
                if (++i != 4) dumpnote (fho, i + '0');
            };
 
            fclose (fh);
 
            dumpstow (fho, mptr);
 
            printf ("Added member: %s\n", &(pdsname [mptr * 9]));
            offlded++;
 
            i = 0;
            while (i < pdscount) {
 
                if ((pdsalias [i]) &&
                    (pdsttrz [i] == pdsttrz [mptr])) {
 
                    dumpalias (fho, &(pdsname [i * 9]));
 
                    dumpstow (fho, i);
 
                    printf ("Added alias:  %s\n", &(pdsname [i * 9]));
                    offalia++;
                };
                i++;
            };
 
        } else {
 
            printf ("Can't open input file: %s\n", file);
        };
 
        if (member [0])
            mptr = pdscount;  /* signal to look for next member */
        else
            mptr++;           /* just keep offloading members */
    };
 
    dumpend (fho);
 
    fclose (fho);
 
    printf ("Finished processing %d file(s), %d alias(s) (of %d).\n",
            offlded, offalia, pdscount);
 
    free (lmod);
 
    free (pdsalias);
    free (pdsname);
    free (pdsttrz);
    free (pdsttrs);
    free (pdsinfo);
    free (pdsdlen);
    free (pdsdata);
 
    return (0);
};
