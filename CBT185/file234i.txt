 \INMR01      &      ADCD112S      IBMUSER      A      A      20130421170626
       : INMR02          IEBCOPY                                  &         \
                    IBMUSER  FILE234  INSTALL        $$$$READ  $$$#DATE  $$NOTE1
  $$NOTE2  $README  @FILE234  ASMACL  ASMLKED1  ASMLKED2  ASMLKED3  ASMLKED4  AS
MLKED5  ASMLKED7  DISAJCL0  DISAJC01  DISTEST  EXECJCL6  EXECJCL8  JOBCARD  LOAD
LIB  OUTPDS  READLMOD  REASMLNK  REBUILD  RESCHECK  RESOUOLD  RE -SOURCE  X  Y \
INMR02          INMCOPY                          "4                   \INMR03
                      &         {  _    \ &            "8    Vs   &       ?
      *                 i&-&5        U
 
 
                                                               @FILE234  $$$$REA
D       &           $    IBMUSER   $$$#DATE     [                  CBT-474   $$N
OTE1            ^   ^        IBMUSER   $$NOTE2            |   |   " "  IBMUSER
 $README            ^   ^        IBMUSER   @FILE234     [                    CBT
-474                 ASMLKED5  ASMACL                          IBMUSER   ASMLKED
1           ^            IBMUSER   ASMLKED2           ^            IBMUSER   ASM
LKED3           ^            IBMUSER   ASMLKED4           ^            IBMUSER
   ASMLKED5           ^            IBMUSER                 EXECJCL8  ASMLKED7
        ^            IBMUSER   DISAJCL0                        IBMUSER   DISAJC0
1                   &    IBMUSER   DISTEST            ^   ^        BC0THOR   EXE
CJCL6                          IBMUSER   EXECJCL8           ^            IBMUSER
                 REBUILD   JOBCARD                         IBMUSER   LOADLIB
                     XMIT      OUTPDS                     ' '  XMIT      READLMO
D                     '  BC0T  HOR   REASMLNK         i ^ r          -------   R
EBUILD            ^   ^   h h  BC0THOR                          \RESCHECK
    ^   ^        BC0THOR   RESOUOLD                        BC0THOR   RESOURCE
                     TRIDJK    X            a                    IBMUSER   Y
                           IBMUSER
                         \This is a new disassembler that can be used to disass
emble load modules         in PDSE's as well as those in traditional PDS's. It a
lso can disassemble        the more recent instructions that have been added to
the IBM mainframe          i  nstruction set since my earlier disassembler that
was written in 1977          and is now in file 217 of the CBT tape, I believe.
 
                             I did not incl  ude DSECT statements in this versio
n partly because I have        not found them very useful, and partly due to tim
e pressure, as I plan          to retire June 30, 2002.
 
                                 Installation and use notes:
                                 1. This PDS contains the source code and JCL ne
eded to install and test            the RESOURCE/REBUILD/READLMOD disasse  mbler
.                                  2. Details of coding for the control statemen
ts are given in comment               statements at the beginning of the RESOURC
E program.                         3. Once this PDS is in place, installation is
 as foll  ows:                          A. Create a load lobrary (PDS or PDSE) t
o contain the load modules.                Edit all the ASMLKED members and chan
ge the SYSLMOD DD state-                   ments to point to this library. Also
change the STEPLIB DD                        statements in the EXECJCL members t
o point to it.                            B. Change the JCL JOB statements for y
our installation as needed                   in all the ASMLKED and EXECJCL memb
ers.                                        C. Execute ASMLKED1 to assemble and
linkedit the READLMOD subroutine               into your load library. This subr
outine is used to access the                   load module being disassembled. I
t uses the IEWBIND and IEWBUFF                 macros  , which provide a much cl
eaner approach to load module                    handling. This load module will
 be statically linked into the                   RESOURCE program load module in
 the next step.                               D. Execute ASMLKED2 to   assemble
and linkedit the RESOURCE program                  into your load library. As wr
itten, this job expects the READLMOD               subroutine's load module to b
e in your load library. RESOURCE is                the initialization program fo
r t  he disassembler. It processes                   its EXEC statement PARM fie
ld, the control statements in the                    SYSIN file, and accesses th
e load module to be disassembled from                the SYSLIB file. When initi
alization is compl  ete, the REBUILD                   program is LOADed and cal
led dynamically to complete the                        disassembly and produce t
he output. Because of this, the load                   modules for RESOURCE and
REBUILD must both live in the sam+ e                     load library at executi
on time.                                                E. Execute ASMLKED3 to a
ssemble and linkedit the REBUILD program                   into your load librar
y. It must be in the same library with                     the RESOURCE program
at execution time, as it is dynamically                      LOADed and executed
 by RESOURCE.                                             F. Execute ASMLKED4 to
 create the load module for the RESCHECK                     program. This progr
am is used to check the result of a                            disassembly, if d
esired.                                                     G. Execute ASMLKED5
to create the DISTEST load module in your load                 library. This is
a test program that contains a variety of                      instructions,   i
ncluding floating point and privileged instructions              so that all fea
tures can be seen.                                            H. Execute EXECJCL
6 to disassemble the DISTEST load module created in              the step above.
 Check this   JCL before use to insure correct                     usage for you
r shop. The SYSPRINT from this run will show the                   control state
ments. The disassembled source code is written to                  a DSORG=PS,RE
CFM=FB,LRECL=80 dataset. E  ach statement contains                   a comment f
ield that shows the CSECT offset and original text                   at the righ
t. If disassembly was correct, when this source                      program is
assembled, the result should be identical   to the                     original.
                                                                    I. Execute A
SMLKED7 to assemble the disassembled output from the                   RESOURCE
program. Input to this program is the disassembled                       output
from RESOURCE. Note that the SYSPRINT output from the                    assembl
y step is written to a DSORG=PS,RECFM=FB,LRECL=121                       dataset
 that will be read into the RESCHECK program below.                   J  . Execu
te EXECJCL8 to test the disassembly using the RESCHECK                     progr
am. This program reads the SYSPRINT from the assembly above                and c
ompares the offsets and text given by the assembler to                     the o
ffset  and text included in the source statements by the                    REB
UILD program. This should result in a single line of                         out
put stating that the "Comparison found no differences."                 {     
                 \         TITLE '*** DISTEST: SAMPLE FOR RESOURCE DISASSEMBLY
***'               DISTEST CSECT
                   DISTEST AMODE ANY
                   D  ISTEST RMODE 24
                     ***********************************************************
**********           * THIS "PROGRAM" IS USED TO PRODUCE A LOAD MODULE HAVING A
WIDE     *           * VARIETY OF A  SSEMBLER AND MACHINE LANGUAGE CONSTRUCTS TH
AT WILL    *           * PROVIDE A GOOD TEST OF THE CAPABILITIES OF THE DISASSEM
BLER       *           * PROGRAM RESOURCE.
           *           *
             *           * AUTHOR R THORNTON FEB 2002
             *           *******************************************************
**************           *
                           *****************************************************
****************           *        SAVE REGISTERS, SET UP BASE REGS, CHAIN SAVE
 AREAS         *           *****************************************************
  ****************                    USING DISTEST,R3,R4
                                      STM   R14,R12,12(R13)         SAVE CALLER'
S REGS                                LR    R3,R15                  SET UP BASE
FIRST BASE REG                          LA    R4,4095(R3)             SET UP SEC
OND                                     LA    R4,1(R4)                    BASE R
EGISTER                                 LA    R15,MYSAVE              POINT TO M
Y REGISTER SAVE AREA                      ST    R15,8(R13)              SET LSA
IN CALLER'S SAVE                          ST    R13,4(R15)              SET HSA
IN MY SAVE AREA                           LR    R13,R15                 SET UP S
AVE AREA POINTER                          B       EINST                   BRANCH
 AROUND CONSTANTS                           DC    CL8'DISTEST'            PROGRA
M NAME IDENTIFIER                           DC    CL8'&SYSDATE'           ASSEMB
LY DATE                                     DC    CL8'&SYSTI  ME'           ASSE
MBLY TIME                            MYSAVE   DS    18F                     MY R
EGISTER SAVE AREA                    *******************************************
**************************           *     E FORMAT INSTRUCTIONS
                           *           *E:   PR    UPT   SCKPF TRAP2
                           *           *****************************************
****************************           EINST    DS    0H                      BE
GIN PROCES  SING                                  ENTRY EINST
                                                  UPT
                                         ***************************************
*************************+ *****           *   RR1 FORMAT INSTRUCTIONS
                                 *           *RR1: BALR  BCTR  BSM   BASSM BASR
 MVCL  CLCL  LPR   LNR           *           *     LTR   LCR   NR    CLR   OR
 XR    LR    CR    AR            *           *     SR    MR    DR    ALR   SLR
 LPDR  LNDR  LTDR  LCDR          *             *     HDR   LDXR  MXR   MXDR  LDR
   CDR   ADR   SDR   MDR           *           *     DDR   AWR   SWR   LPER  LNE
R  LTER  LCER  HER   LEDR          *           *     AXR   SXR   LER   CER   AER
   SER   MDER  DER   AUR           *           *       SUR
                                     *           *******************************
**************************************           RR1INST  DS    0H
        BEGIN PROCESSING                                  ENTRY RR1I  NST
                                                            BALR  R14,R15
                                                            BCTR  R1,R10
                                                            MVCL  R0,R2
                                                              CLCL  R6,R12
                                                     ***************************
******************************************           *   RR2 FORMAT INSTRUCTIONS
                                           *           *RR2: SVC
                                           *           *************************
********************************************           RR2INST  DS    0H
              BEGIN PROCESSING                                    ENTRY RR2INST
                                                                  SVC   251
                                                                  SVC   2
                                                                    SVC   25
                                                           *********************
************************************************           *   RR3 FORMAT INSTRU
CTIONS                                         *           *RR3  : SPM
                                                 *           *******************
**************************************************           RR3INST  DS    0H
                    BEGIN PROCESSING                                  ENTRY RR
3INST                                                                   SPM   R1
3                                                                       SPM   R4
                                                                           \***
******************************************************************           *
 RR4 FORMAT INSTRUCTIONS                                         *           *RR
4: BCR                                                           *           *
********************************************************************           R
R4INST  DS    0H                      BEGIN PROCESSING
        ENTRY RR4INST
        BCR     0,R15
          BCR   1,R14
          BCR   2,R13
          BCR   3,R12
            BCR   4,R11
            BCR   5,R10
            BCR   6,R9
              BCR   7,R8
              BCR   8,R7
              BCR   9,R6
                BCR   10,R5
                BCR   11,R4
                BCR   12,R3
                  BCR   13,R2
                  BCR   14,R1
                  BCR   15,R0
           *********************************************************************
           *   RRE1 FORMAT INSTRUCTIONS                                        *
           *RRE1:IPTE  IVSK  PT    ISKE  RRBE  SSKE  TB    DXR   BAKR          *
           *     CKSM    SQDR  SQER  STURA EREG  ESTA  LURA  TAR   CPYA
 *           *     SAR   EAR   MSR   MVPG  MVST  CUSE  BSG   BSA   CLST
 *           *     SRST  TRE   CUUTF CUTFU LPEBR LNEBR LTEBR LCEBR LDEBR
 *           *     LXDBR LXEBR MXDBR K  EBR  CEBR  AEBR  SEBR  MDEBR DEBR
   *           *     LPDBR LNDBR LTDBR LCDBR SQEBR SQDBR SQXBR MEEBR KDBR
   *           *     CDBR  ADBR  SDBR  MDBR  DDBR  LDER  LXDR  LXER  SQXR
   *           *     MEER  LPXBR LNXBR LTXBR LCXBR LE  DBR LDXBR LEXBR KXBR
     *           *     CXBR  AXBR  SXBR  MXBR  DXBR  THDER THDR  LPXR  LNXR
     *           *     LTXR  LCXR  LXR   LEXR  FIXR  CXR   FIER  FIDR  CEFBR
     *           *     CDFBR CXFBR CEFR  CDFR  CXFR
       *           *************************************************************
********           RRE1INST DS    0H                      BEGIN PROCESSING
                            ENTRY RRE1INST
   +                          IPTE  R1,R2
                                IVSK  R9,R10
                                PT    R11,R8
                                ISKE  R14,R15
                         *******************************************************
**************           *   RRE2 FORMAT INSTRUCTIONS
             *           *RRE2:IPM   IAC   SSAR  EPAR  ESAR  MSTA  LZER  LZDR  L
ZXR          *           *       SFPC  EFPC
               *           *****************************************************
****************           RRE2INST DS    0H                      BEGIN PROCESSI
NG                                  ENTRY RRE2  INST
                                      IPM   R1
                                      IAC   R14
                             ********************************  *****************
********************           *   RRE3 FORMAT INSTRUCTIONS
                   *           *RRE3: PALB
                   *           *********************************************  **
**********************           RRE3INST DS    0H                      BEGIN PR
OCESSING                                  ENTRY RRE3INST
                                          PALB
                                   *********************************************
************************           *   RRF1 FORMAT INSTRUCTIONS
                       *           *RRF1: MAEBR MSEBR MADBR MSDBR
                       *             *******************************************
**************************           RRF1INST DS    0H                      BEGI
N PROCESSING                                  ENTRY RRF1INST
                                                MAEBR R1,R3,R2
                                                MSEBR R10,R13,R12
                                                MADBR R4,R13,R9
                                                MSDBR R1 1,R7,R13
                                         ***************************************
******************************           *   RRF2 FORMAT INSTRUCTIONS
                             *                       \*RRF2: FIXBR TBEDR TBDR
FIEBR FIDBR CFEBR CFDBR CFXBR CFER         *           *      CFDR  CFXR
                                           *           *************************
********************************************           R  RF2INST DS    0H
                BEGIN PROCESSING                                  ENTRY RRF2INST
                                                                  FIXBR R1,1,R9
                                                                  TBEDR   R10,14
,R13                                                                TBDR  R1,4,R
12                                                                  FIEBR R14,5,
R6                                                         *********************
******  ******************************************           *   RRF3 FORMAT INS
TRUCTIONS                                        *           *RRF3:  DIEBR DIDBR
                                                 *           *******************
*********************  *****************************           RRF3INST DS    0H
                      BEGIN PROCESSING                                  ENTRY RR
F3INST                                                                  DIEBR R1
,R3,R2,0                                                                  DIDBR
R15,R14,R13,1                                                    ***************
******************************************************           *    RX1 FORMAT
 INSTRUCTIONS                                          *           *RX1: STH   L
A    STC   IC    EX    BAL   BCT   LH    CH            *           *     AH    S
H    MH    BAS   CVD   CVB   ST    LAE   N             *           *     CL    O
     X     L     C     A     S     M     D             *             *     AL
 SL    STD   MXD   LD    CD    AD    SD    MD            *           *     DD
 AW    SW    STE   MS    LE    CE    AE    SE            *           *     MDE
 DE    AU    SU    LRA                                   *           ***********
*  *********************************************************           RX1INST
DS    0H                      BEGIN PROCESSING
ENTRY RX1INST
STH   R1,HWD1
  LA    R15,HWD2
  STC   R4,HWDTBL(R7)
  IC    R13,HTBL2(R5)
    EX    R2,5(R4,R3)
    BAL   R10,250(,R9)
    BCT   R14,128(R2)                                                        ***
******************************************************************           *
  RX2 FORMAT INSTRUCTIONS                                        *           *RX
2: BC                                                        +     *           *
***********************************************************  *********
 RX2INST  DS    0H                      BEGIN PROCESSING
          ENTRY RX2INST
          BC    0,RX2001
   RX2001   BC    1,RX2002(R1)
   RX2002   BC    2,RX2003
   RX2003   BC    3,RX2004(R10)
   RX2004     BC    4,54(R7)
              BC    5,RX2006(R12)
     RX2006   BC    6,128(R4,R2)
              BC    7,RX  2008(R6)
       RX2008   BC    8,16(,R5)
                BC    9,RX2011(R3)
       RX2011   BC    11,RX2012
         RX2012   BC    12,RX2013(R4)
         RX2013   BC    13,4(R2,R4)
                  BC    14,8(,R6)
                    BC    15,0(R1)
           *********************************************************************
           *    RXE FORMAT INSTRUCTIONS
 *           *RXE: LDEB  LXDB  LXEB  MXDB  KEB   CEB   AEB   SEB   MDEB
 *           *     DEB   TCEB  TCDB  TCXB  SQEB  SQDB  MEEB  KDB   CDB
 *           *     ADB   SDB   MDB   DDB   LDE   LXD   LXE   SQE   SQD
 *             *     MEE
   *           *****************************************************************
****           RXEINST  DS    0H                      BEGIN PROCESSING
                          ENTRY RXEINST
                          LDEB  R1,122(R4,R8)
                          LXDB  R12,0(,R12)
                          LXEB  R9 ,RXESHORT
                            MXDB  R1,RXEEXTN(R8)
                            KEB   R12,9(R5)
                               \***********************************************
**********************           *    RXF FORMAT INSTRUCTIONS
                     *           *RXF: MAEB  MSEB MADB   MSDB
                     *           *
                       *           *********************************************
************************           RXFINST  DS    0H                      BEGIN
PROCESSING                                  ENTRY   RXFINST
                                              MAEB  R1,R3,100(R4,R7)
                                              MSEB  R12,R13,RXFSHORT
                                              MADB  R7,R12,RXFIN  ST(R11)
                                                MSDB  R1,R6,33(,R12)
                                       *****************************************
****************************           *    RS1 FORMAT INSTRUCTIONS
                             *           *RS1: BXH   BXLE  STM   LM    TRACE LAM
   STAM  MVCLE CLCLE         *           *     SIGP  STCTL LCTL  CS    CDS
                             *           ***************************************
**************  ****************           RS1INST  DS    0H
  BEGIN PROCESSING                                  ENTRY RS1INST
                                                    BXH   R1,R3,20(R6)
                                                      BXLE  R10,R14,RS1STM
                                             RS1STM   STM   R0,R15,RS1FWDS
                                                      LM    R15,R6,RS1FWD8
                                               *********************************
************************************           *    RS2 FORMAT INSTRUCTIONS
                                   *           *RS2: SRL   SLL   SRA   SLA   SRD
L  SLDL  SRDA  SLDA  CLM           *           *     STCM
                                     *           *******************************
**************************************           RS2INST  DS    0H
        BEGIN PROCESSING                                  ENTRY RS2INST
                                                            SRL   R1,250(R6)
                                                            SLL   R10,12
                                                            SRA   R13,7
                                                              SLA   R9,44(R14)
                                                     ***************************
******************************************           *    RS3 FORMAT INSTRUCTION
S                                          *           *RS3: ICM
                                           *           *************************
********************************************           RS3INST  DS    0H
              BEGIN PROCESSING         +                          ENTRY RS3INST
                                                                    ICM   R1,1,R
S3CHR1                                                              ICM   R2,15,
45(R2)                                                              ICM   R7,13,
40(R13)                                                               ICM   R5,8
,RS3CHR2                                                              ICM   R13,
7,56                                                         *******************
**************************************************           *    R  SI FORMAT I
NSTRUCTIONS                                        *           *RSI: BRXH  BRXLE
                                                   *           *****************
****************************************************           RSIINST  DS    0H
                        BEGIN PROCESSING                                  ENTRY
RSIINST                                                                   BRXH
R1,R3,*+16                                                                BRXLE
R10,R11,RIINST                                                              BRXH
  R1,R3,RSIINST                                                             BRXL
E R10,R11,*-16                                                     *************
********************************  ************************           *     RI FO
RMAT INSTRUCTIONS                                        *           *RI:  TMH
 TML   BRC   BRAS  BRCT  LHI   AHI   MHI   CHI           *           ***********
***********************************************  ***********           RIINST
DS    0H                      BEGIN PROCESSING
ENTRY RIINST
TMH   R1,700
  TML   R10,3
  BRC   R1,*-64
  BRAS  R9,SIINST                                                        ****  *
****************************************************************           *
 SI FORMAT INSTRUCTIONS                                        *           *SI:
 TM    MVI   NI    CLI   OI    XI    STNSM STOSM MC            *           *****
************ ****************************************************           SII
NST   DS    0H                      BEGIN PROCESSING
      ENTRY SIINST
         \         TM    SIBYT,X'50'
                    MVI   0(R8),2
                    NI    SIINST,C'A'
                      CLI   SIBYT2,1
             *******************************************************************
**           *     S1 FORMAT INSTRUCTIONS
 *           *S1:  SSM   LP  SW  TS    STIDP SCK   STCK  SCKC  STCKC SPT
   *           *     STPT  SPKA  SPX   STPX  STAP  PC    SAC   CFC   MSCH
   *           *     SSCH  STSCH TSCH  TPI   STCRW STCPS RP    STCKE SACF
   *           *     STSI  SRNM  STFPC LFP  C  TRAP4
     *           ***************************************************************
******           S1INST   DS    0H                      BEGIN PROCESSING
                          ENTRY S1INST
                            SSM   S1MASK
                            LPSW  S1PSW
                            TS    5(R7)
                              STIDP 256(R12)
                              SCK   240(R4)
                              STCK  40(R9)
                       *********************************************************
************           *     S2 FORMAT INSTRUCTIONS
           *           *S2:  IPK   PTLB  CSCH  HSCH  SAL   RSCH  RCHP  SCHM
           *             *******************************************************
**************           S2INST   DS    0H                      BEGIN PROCESSING
                                  ENTRY S2INST
                                  IPK
                                    PTLB
                                    CSCH
                                    HSCH
                                      SAL
                                      RSCH
                                      RCHP
                                        SCHM
                               *************************************************
********************           *    SS1 FORMAT INSTRUCTIONS
                     *           *SS1: MVN   MVC   MVZ   NC    CLC   OC    XC
 TR    TRT           *           *     ED    EDMK  MVCIN
                     *           ***********************************************
*****************+ *****           SS1INST  DS    0H                      BEGIN
PROCESSING                                    ENTRY SS1INST
                                              MVN   SS1NTGT,SS1NSRC
                                              MVC   2(12,R4),9(R8)
                                                MVZ   SS1ZTGT(12),7(R9)
                                                NC    2031(245,R5),SS1AND
                                       *****************************************
****************************           *    S  S2 FORMAT INSTRUCTIONS
                             *           *SS2: MVO   PACK  UNPK  ZAP   CP    AP
   SP    MP    DP            *           ***************************************
******************************           SS2INST  DS    0H
  BEGIN PROCESSING                                  ENTRY SS2INST
                                                    MVO   SS2PTGT(5),SS2PSRC(4)
                                                    PACK  4(3,R5),2(7,R12)
                                                      UNPK  SS2ZTGT(4),0(6,R9)
                                                      ZAP   12(5,R8),SS2PKSRC(4)
                                             ***********************************
**********  ************************           *    SS3 FORMAT INSTRUCTIONS
                                   *           *SS3: PLO
                                   *           *********************************
*************************  ***********           SS3INST  DS    0H
        BEGIN PROCESSING                                  ENTRY SS3INST
                                                          PLO   R1,SS3OP1,R7,SS3
OP2                                                         PLO   R12,34(R6),R9,
SS3OP3                                                      PLO   R8,12(R9),R13,
63(R2)                                                      PLO   R4,SS3OP4,R1,1
2(R12)                                             ****  ***********************
******************************************           *    SS4 FORMAT INSTRUCTION
S                                        *           *SS4: MVCK  MVCP  MVCS
                                         *           ***************** ********
********************************************           SS4INST  DS    0H
              BEGIN PROCESSING                                  ENTRY SS4INST
                                                                   \         MV
CK  SS4OP01(R8),SS4OP02,R9                                                    MV
CP  12(R1,R2),34(R7),R4                                                       MV
CS  SS4OP03,128(R8),R15                                              *  ********
************************************************************           *    SS5
FORMAT INSTRUCTIONS                                        *           *SS5: SRP
                                                           *           *********
*****  *******************************************************           SS5INST
  DS    0H                      BEGIN PROCESSING
  ENTRY SS5INST
  SRP   SS5TGT1(5),6  4-32,5 RIGHT SHIFT 32 DIGITS, ROUND 5
    SRP   SS5TG2(3),31,5     LEFT SHIFT 31 DIGITS, ROUND 5
    SRP   73(7,R4),64-1,5    RIGHT SHIFT 1 DIGIT, ROUND 5
    SRP   4(5,R6),1,5        LEFT S  HIFT 1 DIGIT, ROUND 5
      SRP   3(5,R9),0,5        NO SHIFT, ROUND 5
      SRP   SS5TGT1(5),64-32,6 NOT INSTRUCTION (ROUND=6)
      SRP   SS5TGT1(5),64-32,4 NOT INSTRUCTION (RO  UND=4)
        DC    X'F025351D009F'    NOT AN INSTRUCTION BITS 40-41 NOT 0           *
********************************************************************           *
    SSE FORMAT INSTRUCTIONS                                          *
 *SSE: LASP  TPROT MVCSK MVCDK                                       *
 *********************************************************************
 SSEINST  DS    0H                      BEGIN PROCESSING
            ENTRY SSEINST
            LASP  SSETRGT,SSESRCE
            TPROT SSETGT,6(R7)
            MVC  SK 32(R15),SSESRC2
              MVCDK 12(R7),15(R2)
              LTORG
     DISTEST CSECT
       *********************************************************************
       *    DATA AREAS                                                     *
       **************************************  *******************************
         HWD1     DC    H'1'
         HWD2     DC    H'2'
         HWDTBL   DC    36H'12'
           HTBL2    DC    H'1,2,3,4,5,6,7'
           RXESHORT DC    E'500'                  SHORT FLOAT
           RXEEXTN  DC    L'1234567'              EXTENDED FLOAT           +
             RXFSHORT DC    E'12'                   SHORT FLOAT
               RXFLONG  DC    D'645.2312'             LONG FLOAT
               RS1FWDS  DC    A(RS1FWD8)              FULLWORDS
                        DC    V(SUBRTN)
                          DC    X'80',AL3(SS2PKSRC)
                          DC    13F'0'
                 RS1FWD8  DC    8F'100'                 FULLWORDS
                 RS3CHR  1  DC    CL1'X'                  CHARACTER
                   RS3CHR2  DC    CL1'Z'                  CHARACTER
                   SIBYT    DC    X'D2'                   HEX LITERAL
                   SIBYT2   DC    X'00  '                   HEX LITERAL
                     S1MASK   DC    X'80'                   HEX VALUE
                     S1PSW    DS    D
                     SS1NTGT  DC    CL18'A Z B Y L M   Q'     CHARACTER FIELD
                       SS1NSRC  DC    CL33'S T U V'           CHARACTER FIELD
                       SS1ZTGT  DC    CL20'A B C D'           CHARACTER FIELD
                       SS1AND   DC    245X'80'                AND MA  SK FIELD
                         SS2PTGT  DC    PL5'17'                 PACKED DECIMAL
                         SS2PSRC  DC    PL6'1032.17'            PACKED DECIMAL
                         SS2ZTGT  DC    ZL7'0'                  ZONED DECIMAL
                           SS2PKSRC DC    PL4'112233'             PACKED DECIMAL
                           SS3OP1   DC    CL5'ABCDE'              CHARACTERS
                           SS3OP2   DC    CL5'WXYZ'               CHARACTERS
                             SS3OP3   DC    CL5'FGH'                CHARACTERS
                             SS3OP4   DC    CL5'ST'                 CHARACTERS
                             SS4OP01  DC    D'123'                  DOUBLEWORD
                             SS4O  P02  DC    D'456'                  DOUBLEWORD
                               SS4OP03  DC    D'789'                  DOUBLEWORD
                               SS5TGT1  DC    PL5'0'                  PACKED DEC
IMAL                           SS5TG2   DC    PL 3'0'                  PACKED D
ECIMAL                           SSETRGT  DC    CL20'SSE TARGET FIELD'
                                 SSESRCE  DC    CL16'SSE SOURCE FIELD'
                                             \SSESRC2  DC    CL28'ANOTHER SSE S
OURCE'                                         SSETGT   DC    CL32'ANOTHER SSE T
ARGET'                                         *********************************
************************************           *               REGISTER EQUATES
                                     *           *******************************
**************************************           R0       EQU   0
                                                 R1       EQU     1
                                                   R2       EQU   2
                                                   R3       EQU   3
                                                   R4       EQU   4
                                                     R5       EQU   5
                                                     R6       EQU   6
                                                     R7       EQU   7
                                                       R8       EQU   8
                                                       R9       EQU   9
                                                       R10      EQU   10
                                                         R11      EQU   11
                                                         R12      EQU   12
                                                         R13      EQU   13
                                                           R14      EQU   14
                                                           R15      EQU   15
                                                                    END
                                                                  
     \   TITLE  '*** READLMOD: IEWBIND SUBROUTINE ***'
       READLMOD CSECT
       READLMOD AMODE 31
       R  EADLMOD RMODE 24
         ***********************************************************************
         *  SUBROUTINE USED TO RETURN LOAD MODULE INFORMATION TO THE CALLER.   *
         *  THE IEWBUFF   AND IEWBIND MACROS ARE USED TO OBTAIN THE DATA. ON
 *         *  RETURN, A POINTER TO THE DATA BUFFER FROM IEWBIND IS PASSED TO THE
 *         *  CALLER.
 *         *
   *         *  CALLER PASSES A PARAMETER AREA THAT CONTAINS INFORMATION ABOUT T
HE *         *  REQUESTED DATA, AND SEVERAL DATA FIELDS THAT WILL RECEIVE DATA
   *         *  FROM THIS SUBROUTINE ON RETURN. FOR D  ETAILED INFORMATION ON TH
E    *         *  IEWBIND AND IEWBUFF MACROS SEE THE IBM MANUAL PROGRAM MANAGEME
NT   *         *  SECTION ON THE API INTERFACE.
     *         *
       *         *  CALLER PASSED PARAMETER AREA FORMAT:
       *         *       PARMAREA DS    0F      READLMOD PARMS
       *         *       PRMDDNAM DS    CL8     DDNAME FOR LOADLIB CONTAINING ME
MBE  R   *         *       PRMEMBER DS    CL8     MEMBER NAME
         *         *       PRMCSECT DS    CL8     CSECT NAME
         *         *       PRMREQST DS    CL8     NAME OF DATA TO BE RETRIEVED:
ESD, RLD,*           *       *                         TEXT, SYM, IDRU, IDRL, ID
RZ, IDRB,  *         *       *                         NAME, OR MAP
           *         *       PRMCURSR DS    F       CURSOR VALUE. CALLER SETS TH
IS TO ZERO *         *       *                        BEFORE A FIRST CALL FOR A
SET OF DATA, *         *       *                      THEN LEAVES IT AS-IS WHEN
RETURNING FOR*         *       *                      ADDITIONAL DATA UNTIL IT H
AS ALL BEEN  *         *       *                        RETURNED. CURRENT VALUE
IS RETURNED BY *         *       *                      THIS SUBROUTINE AFTER EA
CH CALL.       *         *       PRMRETCD DS    F       RETURN CODE FROM IEWBIND
 (S/B ZERO)    *         *       PRMRSNCD DS    F       REASON   CODE FROM IEWBI
ND (ZERO MEANS   *         *       *                      MORE DATA OF THIS TYPE
 IS AVAILABLE AND*         *       *                      WILL BE RETURNED IN SU
BSEQUENT CALLS.  *         *       *                      4 MEANS THE DATA IN
THE BUFFER IS ALL  *         *       *                      THAT IS AVAILABLE OF
 THE REQUESTED TYPE*         *       PRMCOUNT DS    F       NUMBER ELEMENTS AVAI
LABLE IN THE BUFFER*         *       PRMBUFAD DS    A       ADDRESS OF THE DATA
BUFFER HEADER+ . THE *         *       *                      HEADER IS 32 BYTES
 LONG, FOLL  OWED BY   *         *       *                      THE DATA ELEMENT
S.                     *         *       PRMERROR DS    CL1     ERROR INDICATOR
ON RETURN:             *         *       PRMOK    EQU   C' '        SUCCESSFUL R
EADLMOD CALL           *           *       PRMPRMER EQU   C'P'        PARAMETER
ERROR                    *         *       PRMACERR EQU   C'E'        IEWBIND MA
CRO ERROR OCCURRED       *         *
                         *         * AUTH  OR R THORNTON FEB 2002
                           *         *******************************************
****************************         *******************************************
****************************         *        INIT1:
                             *         *   SET UP BASE REGISTERS, CHAIN SAVE ARE
AS.                          *         *****************************************
******************************                  USING READLMOD,R3
                                         INIT1    STM   R14,R12,12(R13)    SAVE
CALLER'S REGS                                     LR    R3,R15             SET U
P BASE FIRST BASE REG                             LA    R15,MYSAVE         POINT
 TO MY   REGISTER SAVE AREA                         ST    R15,8(R13)         SET
 LSA IN CALLER'S SAVE                               ST    R13,4(R15)         SET
 HSA IN MY SAVE AREA                                LR    R13,R15            SET
 UP SAVE AREA POINTER                                 B     INIT2              B
RANCH AROUND CONSTANTS                                DC    CL8'READLMOD'      P
ROGRAM NAME IDENTIFIER                                DC    CL8'&SYSDATE'      A
SSEMBLY DATE                                            DC    CL8'&SYSTIME'
 ASSEMBLY TIME                                 MYSAVE   DS    18F
 MY REGISTER SAVE AREA                         *********************************
************************************           *          INIT2:ON: VALIDATE CAL
LER'S PARAMETERS. OBTAIN BUFFER      *           *  VALIDATE CALLER'S PARAMETERS
. IF FIRST TIME HERE, INITIALIZE THE *           *  IEWBIND API INTERFACE ENVIRO
NMENT.                               *           ***************** ************
****************************************           INIT2    LR    R6,R1
     COPY PARMLIST POINTER                                  L     R6,0(R6)
     POINT TO PARMLIST                                         \         USING
PARMAREA,R6                                                               MVI
PRMERROR,C' '      RESET PARAMETER ERROR BYTE                             LA
R1,VALREQ          POINT TO VALID REQUEST TABLE                  I  2CKEND  CLI
  0(R1),X'FF'        END OF TABLE?                                          BNE
  I2CKFND            NO                                                     MVI
  PRMERROR,C'P'      YES, INDICATE PARAMETER ERROR                          B
    RETURN             AND EXIT TO CALLER                            I2CKFND  CL
C   PRMREQST,4(R1)     FOUND THE ENTRY?                                       BE
    I2FOUND            YES                                                    LA
    R1,16(R1)            NO, ADVANCE TO NEXT TABLE ENTRY
B     I2CKEND            CONTINUE SEARCH                               I2FOUND
MVC   HOLDREQ,0(R1)      SAVE THE REQUEST ENTRY                        *********
*******************************  *****************************           *
  INIT3:                                                     *           *  IF F
IRST TIME, INITIALIZE THE IEWBIND API INTERFACE ENVIRONMENT  *           *******
**********************************************  ****************           INIT3
    CLI   FIRSTIME,1         FIRST TIME HERE?
    BNE   INIT4              NO
    MVI   FIRSTIME,0         RESET FIRST TIME SWITCH
      STORAGE OBTAIN,LENGTH=32768,ADDR=(R11),SP=0 GET BUFFER STORAGE
      ST    R11,BUFFERAD       SAVE ADDRESS OF BUFFER STORAGE
      XC    DTOKEN,DTOKEN      CLEAR DIALOG TOKEN
        IEWBIND FUNC=STARTD,     INITIATE THE BINDER DIALOG           C    C
              RETCODE=RETCODE,       RETURN CODE                      C    C
              RSNCODE=RSNCODE,       REASON CODE                      C    C
                DIALOG=DTOKEN,         DIALOG TOKEN                     C    C
                VERSION=3              USE VERSION 3 BUFFERS
          CLC   RETCODE,ZERO       CHECK THE RETURN CODE
          BE    I3CRWKMD             CONTINUE IF SUCCESSFUL
            WTO   'UNABLE TO START IEWBIND DIALOG, ABENDING',ROUTCDE=11
   ABEND111 ABEND 111,DUMP           TERMINATE IN ERROR
   I3CRWKMD XC    WKTOKEN,WKTOKEN    CLEA  R WORKMOD TOKEN
              IEWBIND FUNC=CREATEW,    CREATE THE WORKMOD                   C
 C                  RETCODE=RETCODE,      RETURN CODE                       C
 C                  RSNCODE=RSNCODE,      REASON CODE                         C
   C                  WORKMOD=WKTOKEN,      WORKMOD TOKEN                     C
   C                  DIALOG=DTOKEN,        DIALOG TOKEN                      C
   C                  INTENT=ACCESS,        WHAT WE NEED IT FOR        +
C    C                  VERSION=3             USE VERSION 3 BUFFERS
                    CLC   RETCODE,ZERO       CHECK THE RETURN CODE
                    BE    INIT4              CONTINUE IF SUCCESSFUL
                    WTO   'UNABLE TO CREATE A WORKMOD, ABENDING',ROUTCDE=11
             ABEND222 ABEND 222,DUMP           TERMINATE IN ERROR
             *******************************************************************
****         *        INIT4:
   *         *    D  ETERMINE WHETHER AN INCLUDE IS NEEDED, OR IF IT HAS ALREADY
     *         *    BEEN DONE. IF MEMBER NAME IS UNCHANGED, NO INCLUDE IS NEEDED
,    *         *    OTHERWISE, EXTRACT THE MEMBER NAME AND ISSUE AN INCLUDE.
     *         *******************  ********************************************
********         INIT4    MVI   DDNMEMCH,0         CLEAR SWITCH
                          CLC   PRMEMBER,MEMBER    SAME MEMBER NAME BEING PROCES
SED?                      BE    INIT4A               YES, CONTINUE
                            MVI   DDNMEMCH,1         INDICATE MEMBER NAME CHANGE
D                           MVC   MEMBER,PRMEMBER    SAVE MEMBER NAME
                            LA    R1,8               MAX LENGTH
                              LA    R2,MEMBER+7        POINT TO RIGHT-HAND END
                     I4CKTRL  CLI   0(R2),C' '         TRAILING BLANK?
                              BNE   I4ATRHE            NO
                                BCTR  R2,0               BACK UP 1 BYTE IN MEMBE
R NAME                          BCT   R1,I4CKTRL         LOOP
                                MVI   PRMERROR,C'P'      NO MEMBER NAME, PARMAME
TER ERROR                         B     RETURN             AND EXIT TO CALLER
                         I4ATRHE  STH   R1,MEMLENG         SAVE MEMBER NAME LENG
TH                       INIT4A   CLC   PRMDDNAM,DDNAMEC   SAME DDNAME BEING PRO
CESSED?                             BE    I4INCLUD           YES, CONTINUE
                                    MVI   DDNMEMCH,1         INDICATE DDNAME CHA
NGED                                MVC   DDNAMEC,PRMDDNAM   SAVE DDNAME
                                    LA    R1 ,8               MAX LENGTH
                                      LA    R2,DDNAMEC+7       POINT TO RIGHT-HA
ND END                       I4ACKTRL CLI   0(R2),C' '         TRAILING BLANK?
                                         \         BNE   I4AATRHE           NO
                                                    BCTR  R2,0               BAC
K UP 1 BYTE IN DDNAME                               BCT   R1,I4ACKTRL        LOO
P                                                     MVI   PRMERROR,C'P'      N
O DDNAME, PARMAMETER ERROR                            B     RETURN             A
ND EXIT TO CALLER                            I4AATRHE STH   R1,DDNLENG         S
AVE DDNAME LENGTH                            I4INCLUD CLI     DDNMEMCH,0
 DDNAME OR MEMBER NAME CHANGED?                         BE    INIT5
 NO                                                     MVI   LASTERR,C'P'
 INSURE CURSOR RESET                                    IEWBIND FUNC=INCLU  DE,
   INCLUDE THE MEMBER TO PROCESS        C    C                  RETCODE=RETCODE,
      RETURN CODE                       C    C                  RSNCODE=RSNCODE,
      REASON CODE                       C    C                  WORKMOD=WKTOKEN,
      WOR  KMOD TOKEN                     C    C                  INTYPE=NAME,
        WE'RE SUPPLYING MEMBER NAME       C    C                  DDNAME=DDNAME,
        USE DDNAME TO FIND MEMBER         C    C                  MEMBER=MEMNAME
,       MEMBER NAME WITH   LENGTH           C    C                  VERSION=3 US
E VERSION 3 BUFFERS                                           CLC   RETCODE,ZERO
       CHECK THE RETURN CODE                                  BE    INIT5
       CONTINUE IF SUCCESSFUL                                   WTO   'ERROR INC
LUDING REQUESTED MEMBER, ABENDING',ROUTCDE=11          ABEND333 ABEND 333,DUMP
         TERMINATE IN ERROR                            *************************
**********************************************           *        INIT5:
                                               *         *    DETERMINE WHETHER
BUFFER SHOULD BE INITIALIZED. IF SO, ISSUE     *         *    AN INITBUFF TO INI
TIALIZE IT.                                    *         ************  *********
**************************************************         INIT5    CLI   LASTER
R,C' '       LAST CALL IN ERROR?                                    BNE   INITBU
FF           YES                                                    CLC   LASTRE
T,ZE  RO       LAST CALL LEFT MORE DATA?                              BNE   INIT
BUFF           NO                                                     CLC   LAST
REQ,PRMREQST   LAST CALL FOR SAME DATA?                               BE    INIT
6              YES                                             INITBUFF XC    CU
RSOR,CURSOR      RESET CURSOR FOR THIS CALL                             L     R1
1,BUFFERAD       POINT TO THE BUFFER                                    L     R1
5,HOLDINIT       POINT TO INITBUFF   FOR REQUESTED CLASS                  BR
R15                GO TO APPROPRIATE BUFFER INIT.                INITESD  IEWBUF
F FUNC=INITBUF,TYPE=ESD INITIALIZE ESD BUFFER                             B
INIT6              GO READ REQUESTED DATA        +                 INITRLD  IEWB
UFF FUNC=INITBUF,TYPE=RLD INITIALIZE RLD BUFFER                               B
    INIT6              GO READ REQUESTED DATA                        INITTEXT IE
WBUFF FUNC=INITBUF,TYPE=TEXT INITIALIZE TEXT BUFFER                           B
    INIT6              GO READ REQUESTED DATA                          INITSYM
IEWBUFF FUNC=INITBUF,TYPE=SYM  INITIALIZE SYM  BUFFER
B     INIT6              GO READ REQUESTED DATA                        INITIDRU
IEWBUFF FUNC=INITBUF,TYPE=IDRU INITIALIZE IDRU BUFFER
  B     INIT6              GO READ REQUESTED DATA                        INITIDR
L IEWBUFF FUNC=INITBUF,TYPE=IDRL INITIALIZE IDRL BUFFER
  B     INIT6              GO READ REQUESTED DATA                        INITIDR
Z IEWBUFF FU  NC=INITBUF,TYPE=IDRZ INITIALIZE IDRZ BUFFER
    B     INIT6              GO READ REQUESTED DATA                        INITI
DRB IEWBUFF FUNC=INITBUF,TYPE=IDRB INITIALIZE IDRB BUFFER
    B     INIT6                GO READ REQUESTED DATA                        INI
TNAME IEWBUFF FUNC=INITBUF,TYPE=NAME INITIALIZE NAME BUFFER
      B     INIT6              GO READ REQUESTED DATA                        INI
TMAP  IEWBUFF FUNC=INITBUF,TYPE=MAP  INITI  ALIZE MAP  BUFFER                  *
**********************************************************************         *
        INIT6:                                                       *         *
    IF CSECT NAME HAS CHANGED, EXTRACT IT FROM CALLER'S P  ARAMETERS.  *
 ***********************************************************************
 INIT6    CLC   PRMCSECT,CSECT     SAME CSECT NAME BEING PROCESSED?
          BE    MAINLINE           YES, CONTINUE
            MVC   CSECT,PRMCSECT     SAVE CSECT NAME
            LA    R1,8               MAX LENGTH
            LA    R2,CSECT+7         POINT TO RIGHT-HAND END
   I6CK  TRL  CLI   0(R2),C' '         TRAILING BLANK?
              BNE   I6ATRHE            NO
              BCTR  R2,0               BACK UP 1 BYTE IN CSECT NAME
              BCT   R1 ,I6CKTRL         LOOP
                MVI   PRMERROR,C'P'      NO CSECT NAME, PARMAMETER ERROR
                B     RETURN             AND EXIT TO CALLER
                   \I6ATRHE  STH   R1,CSLENG          SAVE CSECT NAME LENGTH
                     ***********************************************************
**********           *        MAINLINE:
         *           *    ISSUE THE IEWBIND FUNC=GETD MACRO TO READ REQUESTED DA
TA         *           *********************************************************
************           MAINLINE MVI   PRMERROR,C' '      CLEAR ERROR INDICATOR
                                L       R11,BUFFERAD       POINT TO BUFFER HEADE
R                                 LA    R12,32(R11)        POINT TO FIRST OCCURR
ING ELEMENT                       CLC   PRMREQST,=CL8'NAME' IS THIS A NAME REQUE
ST?                               BE    DOGETN               YES
                           *        CLC   PRMREQST,=CL8'ESD'  IS THIS AN ESD REQ
UEST?                      *        BE    DOGETE             YES
                           DOGETD   IEWBIND FUNC=GETD,       READ S  PECIFIED DA
TA FOR CSECT NAME   C    C                  RETCODE=RETCODE,       RETURN CODE
                    C    C                  RSNCODE=RSNCODE,       REASON CODE
                    C    C                  WORKMOD=WKTOKEN,       WORKMOD TOKEN
                      C    C                  CLASS=HOLDREQ,         IDENTIFY DA
TA TO BE READ         C    C                  SECTION=CSNAME,        CSECT NAME
WITH LENGTH           C    C                  AREA=0(R11),           READ DATA I
NTO BUFFER              C    C                  CURSOR=CURSOR,         CURSOR (0
=FIRST CALL)            C    C                  COUNT=COUNT,           NUMBER ES
D ITEMS READ INTO BUFFERC    C                  VERSION=3              BUFFER VE
RSION USED                                  B     RETURN             GO BACK TO
CALLER                             DOGETN   IEWBIND FUNC=GETN,       READ CSECT
(SECTION) NAMES IN MEMBER C    C                  RETCODE=RETCODE,       RETURN
CODE                      C    C                    RSNCODE=RSNCODE,       REASO
N CODE                      C    C                  WORKMOD=WKTOKEN,       WORKM
OD TOKEN                    C    C                  AREA=0(R11),           READ
DATA INTO BUFFER            C    C                  CURSOR=CUR  SOR,         CUR
SOR (0=FIRST CALL)            C    C                  COUNT=COUNT,           NUM
BER NAMES GOTTEN IN BUFFER    C    C                  TCOUNT=TCOUNT,         TOT
AL NBR NAMES IN MEMBER        C    C                  NTYPE=SECTION,           R
ETURN SECTION (NOT CLASS) NAMES C    C                  VERSION=3              U
SE VERSION 3 BUFFERS                              B     RETURN             GO BA
CK TO CALLER                             DOGETE   IEWBIND FUNC=GETE,       READ
ESD DATA FOR   CSECT NAME         C    C                  RETCODE=RETCODE,
 RETURN CODE                      C    C                  RSNCODE=RSNCODE,
 REASON CODE                      C    C                  WORKMOD=WKTOKEN,
 WORKMOD TOKEN             +        C    C                  SECTION=CSNAME,
   CSECT NAME WITH LENGTH             C    C                  CLASS=HOLDREQ,
     IDENTIFY DATA TO BE READ         C    C                  AREA=0(R11),
     READ DATA INTO BUFFER            C    C                  CURSOR=CURSOR,
     CURSOR (0=FIRST CALL)            C      C                  COUNT=COUNT,
       NUMBER ESD ITEMS READ INTO BUFFERC    C                  VERSION=3
       BUFFER VERSION USED                                B     RETURN
   GO BACK TO CALLER                             ******  ***********************
******************************************         *        RETURN:
                                         *         *  RETURN PROCESSING. RESTORE
 CALLER'S REGS, AND RETURN TO CALLER.    *         *******************  ********
********************************************         RETURN   CLI   PRMERROR,C'
'      ANY ERROR FOUND?                                       BNE   RETSAVE
       YES                                                    MVC   PRMCURSR,CUR
SOR      SEND BACK IEWBIND CURSOR VALUE                         MVC   PRMRETCD,R
ETCODE   SEND BACK IEWBIND RETURN CODE                          MVC   PRMRSNCD,R
SNCODE   SEND BACK IEWBIND REASON CODE                          MVC   PRMCOUNT,C
OUNT     SEND BACK I  EWBIND COUNT VALUE                          MVC   PRMBUFAD
,BUFFERAD  SEND BACK BUFFER ADDRESS                               CLC   PRMRETCD
,FOUR      ANY IEWBIND ERROR?                                     BNH   RETSAVE
           NO                                                       MVI   PRMERR
OR,C'E'      INDICATE IEWBIND ERROR                        RETSAVE  MVC   LASTER
R,PRMERROR   SAVE ERROR INDICATOR                                   MVC   LASTRE
T,RETCODE    SAVE RETURN CODE                                         MVC   LAST
REQ,PRMREQST   SAVE LAST REQUEST CODE                        GOBACK   L     R13,
4(R13)         POINT TO CALLER'S SAVE AREA                            L     R14,
12(R13)        GET RETURN ADDRESS                                       L     R1
5,R15RC          GET PROGRAM RETURN CODE                                LM    R0
,R12,20(R13)     RESTORE CALLER'S REGS 0-12                             BR    R1
4                RETURN TO CALLER                              *****************
 ******************************************************         *        WORKIN
G STORAGE AREAS                                        *         ***************
********************************************************                     \D
TOKEN   DC    D'0'               DIALOG TOKEN                                  W
KTOKEN  DC    D'0'               WORKMOD TOKEN                                 R
ETCODE  DC    F'0'               IEWBIND RETURN CODE                           R
  SNCODE  DC    F'0'               IEWBIND REASON CODE
 CURSOR   DC    F'0'               CURSOR VALUE FROM IEWBIND
 COUNT    DC    F'0'               COUNT FROM IEWBIND CALLS
 TCOUNT   DC      F'0'               TOTAL COUNT FROM GETN
   R15RC    DC    F'0'               END OF JOB RETURN CODE
   ZERO     DC    F'0'               CONSTANT ZERO
   FOUR     DC    F'4'                 CONSTANT ZERO
     BUFFERAD DC    A(0)               ADDRESS OF BUFFER FOR IEWBUFF
     DDNMEMCH DC    X'00'              CHANGED SWITCH
     FIRSTIME DC    X'01'              FIRST   TIME SWITCH
       BLANKS   DC    CL133' '           CONSTANT BLANKS
       *
       LASTERR  DC    C'P'               ERROR INDICATOR FRO  M LAST CALL
         LASTRET  DC    XL4'FF'            RETURN CODE FROM LAST CALL
         LASTREQ  DC    CL8'NONE'          DATA REQUEST FROM LAST CALL
         *
                    DS    0F
           HOLDREQ  DS    0CL16              SAVE AREA FOR VALREQ ENTRY
           HOLDLENG DC    H'0'                  LENGTH OF CLASS NAME
             HOLDCLAS DC    CL10' '               REQUESTED CLASS NAME
             HOLDINIT DC    A(0)                  INITBUFF ADDRESS
             *
             DDNAME   DS      0H                 INCLUDE LIBRARY DDNAME AREA
               DDNLENG  DC    H'0'                  INCLUDE LIBRARY NAME LENGTH
               DDNAMEC  DC    CL8' '                INCLUDE LIBRARY DDNAME
               *
                 MEMNAME  DS    0H                 MODULE (MEMBER) NAME
                 MEMLENG  DC    H'0'                 MEMBER NAME LENGTH
                 MEMBER   DC    CL8' '               ME  MBER NAME TEXT
                   *
                   CSNAME   DS    0H                 CSECT NAME
                   CSLENG   DC    H'0'                 CSECT NAME LENG  TH
                     CSECT    DC    CL8' '               CSECT NAME TEXT
                     *
                     VALREQ   DS    0F                 TABLE OF VALID REQUESTS
     +                          DC    H'5',CL10'B_ESD     ',A(INITESD)
                                  DC    H'5',CL10'B_RLD     ',A(INITRLD)
                                  DC    H'6',CL10'B_TEXT    ',A(INITTEXT)
                                  DC    H'5',CL10'B_SYM     ',A(INITSYM)
                                    DC    H'6',CL10'B_IDRU    ',A(INITIDRU)
                                    DC    H'6',CL10'B_IDRL    ',A(INITIDRL)
                                    DC    H'6',CL10'B_IDRZ    ',A(INITIDRZ)
                                      DC    H'6',CL10'B_IDRB    ',A(INITIDRB)
                                      DC    H'6',CL10'B_NAME    ',A(INITNAME)
                                      DC    H'5',CL10'B_MAP     ',A(INITMAP)
                                      DC    X'FF  FF'
                               *
                               *************************************************
**********************         * NAMES AND ESD BUFFER MAPPINGS.   NOTE THAT THE
BUFFER VERSION MUST    *         * MATCH THE VERSION OF THE GETN AND THE GETD BI
NDER API'S. THE MAPBUF *         * FUNCTION OF THE IEWBUFF MACRO PROVIDES DSECT
MAPS FOR BOTH THE ESD  *         * AND THE NAMES BUFFERS. REGISTERS 6 AND 7 AR
E DEDICATED AS BASE REG- *         * ISTERS FOR THE ESD BUFFER HEADER AND ENTRIE
S, RESPECTIVELY. SIMIL-  *         * ARLY, REGISTERS 8 AND 9 ARE DEDICATED TO TH
E NAMES BUFFER.          *         * NOTE THAT YOU MUST CODE THE IEWBUFF MACRO W
ITHIN A CSECT  . ALSO NOTE *         * THAT THE VERSION PARAMETER IN IEWBUFF MUS
T MATCH THE VALUE OF THE   *         * VERSION PARAMETER IN THE GETN AND GETD BI
NDER API'S.                *         *******************************************
****************************                    IEWBUFF FUNC=MAPBUF,TYPE=ESD,BYT
ES=32768,VERSION=3,           C    C                  HEADREG=R11,ENTRYREG=R12
                                                IEWBUFF FUNC=MAPBUF,TYPE=RLD,BYT
ES=32768,VERSION=3,           C    C                    HEADREG=R11,ENTRYREG=R12
                                                  IEWBUFF FUNC=MAPBUF,TYPE=IDRU,
BYTES=32768,VERSION=3,          C    C                  HEADREG=R11,ENTRYREG=R12
                                                  IEWBUFF  FUNC=MAPBUF,TYPE=IDR
L,BYTES=32768,VERSION=3,          C    C                  HEADREG=R11,ENTRYREG=R
12                                                  IEWBUFF FUNC=MAPBUF,TYPE=IDR
Z,BYTES=32768,VERSION=3,          C    C                               HEADREG=
R11,ENTRYREG=R12                                                  IEWBUFF FUNC=M
APBUF,TYPE=IDRB,BYTES=32768,VERSION=3,          C    C                  HEADREG=
R11,ENTRYREG=R12                                                    IEWBUFF FUNC
=MAPBUF,TYPE=SYM,BYTES=32768,VERSION=3,           C    C                  HEADRE
G=R11,ENTRYREG=R12                                                  IEWBUFF FUNC
=MAPBUF,TYPE=TEXT,BYTES=32768,VERSION=3,          C    C                    HEAD
REG=R11,ENTRYREG=R12                                                  IEWBUFF FU
NC=MAPBUF,TYPE=NAME,BYTES=32768,VERSION=3,          C    C                  HEAD
REG=R11,ENTRYREG=R12                                                  IEWBUFF FU
NC=MAPBU  F,TYPE=MAP,BYTES=32768,VERSION=3,           C    C                  HE
ADREG=R11,ENTRYREG=R12                                                  LTORG
                                                               *****************
***********************  *******************************         *  PARAMETER AR
EA PASSED BY CALLER                                    *         ***************
********************************************************         PARMAREA DSECT
,       READLMOD PARMAREA SENT BY CALL  ER                         PRMDDNAM DS
  CL8     DDNAME FOR LOADLIB CONTAINING MEMBER                     PRMEMBER DS
  CL8     MEMBER NAME                                              PRMCSECT DS
  CL8     CSECT NAME                                                 PRMREQST DS
    CL8     NAME OF DATA TO BE RETRIEVED: ESD, RLD,                  *
                 TEXT, SYM, IDRU, IDRL, IDRZ, IDRB,                  *
                 NAME, OR MAP                                          PRMCURSR
DS    F       CURSOR VALUE. CALLER SETS THIS TO ZERO                   *
                BEFORE A FIRST CALL FOR A SET OF DATA,                 *
                THEN LEAVES IT AS-IS WHEN RETURNING FOR                *
                  ADDITIONAL DATA UNTIL IT HAS ALL BEEN                  *
                  RETURNED. CURRENT VALUE IS RETURNED BY                 *
                  THIS SUBROUTINE AFTER EACH CALL.                       PRMRETC
D DS    F       RE  TURN CODE FROM IEWBIND (S/B ZERO)                      PRMRS
NCD DS    F       REASON CODE FROM IEWBIND (ZERO MEANS                     *
                    MORE DATA OF THIS TYPE IS AVAILABLE AND                *
                    WILL BE RETUR  NED IN SUBSEQUENT CALLS.                  *
                      4 MEANS THE DATA IN THE BUFFER IS ALL                  *
                      THAT IS AVAILABLE OF THE REQUESTED TYPE                PRM
COUNT DS    F       NUMBER ELEMENTS AVAILABLE IN   THE BUFFER                  P
RMBUFAD DS    A       ADDRESS OF THE DATA BUFFER HEADER. THE                   *
                        HEADER IS 32 BYTES LONG, FOLLOWED BY                   *
                        THE DATA ELEMENTS.                     +
 PRMERROR DS    CL1     ERROR INDICATOR ON RETURN:
   PRMOK    EQU   C' '      SUCCESSFUL READLMOD CALL
   PRMPRMER EQU   C'P'      PARAMETER ERROR
   PRMACERR EQU   C'E'      IEWBIND MACRO ERROR OCCURRED
     READLMOD CSECT
     ***********************************************************************
     * REGISTER EQUATES                                                    *
     ******  *****************************************************************
       R0       EQU   0
       R1       EQU   1
       R2       EQU   2
         R3       EQU   3
         R4       EQU   4
         R5       EQU   5
           R6       EQU   6
           R7       EQU   7
           R8       EQU   8
             R9       EQU   9
             R10      EQU   10
             R11      EQU   11
               R12      EQU   12
               R13      EQU   13
               R14      EQU   14
                 R15      EQU   15
                          END
                  {                        Subject: new disassembler
                                             Date: Wed, 3 Apr 2002 10:14:15 -050
0                                            From: "Thornton, Dick" <rthornton@t
rigon.com>                                   T  o:  IBMUSER@attglobal.net
                                       '"
                                               Hi Sam,
                                               I have written   a new disassembl
er to bring it into the new                      millennium, and thought you mig
ht like it for the CBT tape. My                  earlier disassembler is in file
 217, I believe.
                                                   This newer version includes a
ll the instructions that have been                 added to the instruction set
since the earlier version was                      written back in the 70's.  Al
so, it uses   the IEWBUFF and IEWBIND                macros to access the load m
odule so that it works properly with                 either PDS or PDSE load mod
ules. The code is simpler and should                 be easier to maintain now t
hat the complexities of re  ading and                  processing RECFM=U load m
odules is gone.
                                                       If you would like to have
 this new version, I can sent it in TSO                  XMIT format.
 
                                                         I will be retiring June
 30th, so won't be around for maintenance                  or questions, though
I hope to take a copy of the source with me                when I leave, and wou
ld be happy to talk or email with anyone who               wishes to discuss the
 disassembler.
                                                             Thanks,
                                                             Dick Thornton
                                                             rthornton@trigon.co
m                                                                   
       \         TITLE '*** RESCHECK: CHECK RESOURCE/REBUILD OUTPUT ***'
         RESCHECK CSECT
         *********************************************************************
         *   CHECKS THE ASSEMBLED OUTPUT FROM A RESOURCE/REBUILD DISASSEMBLY   *
           * TO SEE WHETHER THE DISASSEMBLY OUT REASSEMBLES AS THE ORIGINAL    *
           * INPUT DID.                                                        *
           *
 *           * FIRST, THE SOURCE PROGRAM CREATED BY THE RESOURCE/REBUILD PROGRAM
 *           * SET IS ASSEMBLED. NEXT, THE SYSPRINT OUTPUT FROM THE ASSEMBLY IS
 *           * WRITTEN TO A DSORG=PS,REC  FM=FB,LRECL=121 DATASET THAT IS INPUT
TO *           * THIS PROGRAM.
   *           *
   *           * THIS PROGRAM READS UNTIL THE FIRST ASS  EMBLED STATEMENT IS FOU
ND:  *           * LOCATION 000000 IN POSITIONS 2-7 WITH NON-BLANK DATA IN 9-12.
     *           *
     *           * FROM THE FIRST STATEMENT FOUND UNTIL THE END STATEM  ENT IS F
OUND   *           * WHERE " END " IS FOUND IN POSITIONS 50-54 FOR EACH LINE REA
D:     *           *  1. CHECKS FOR A VALID STATEMENT, WHERE A VALID 6-DIGIT HEX
       *           *     LOCATION IS FOUND IN 1-6 WITH NON-BLANK DATA IN 9-12.
         *           *  2. FOR EACH VALID STATEMENT FOUND, COMPARE 2-7 TO 94-99
(LOC)    *           *     9-12 TO 101-104 (DATA BYTES 1-2), 14-17 TO 105-108 (D
ATA BYTES*           *     3-4), AND 19-22 TO 109-112 (DATA BYTES 5-6).
         *             *  3. IF ANY FIELD DIFFERS, THE LINE IS PRINTED.
           *           *
           *           * AUTHOR R THORNTON MAR 2002
           *           ************  *******************************************
**************           *
                         *******************************************************
**************           *        SAVE REGISTERS,   SET UP BASE REGS, CHAIN SAVE
 AREAS         *           *****************************************************
****************                    USING RESCHECK,R3,R4
                                    STM   R14,R12,12(R13)           SAVE CALLER'
S REGS                                LR    R3,R15                  SET UP BASE
FIRST BASE REG                        LA    R4,4095(R3)             SET UP SECON
D                                     LA    R4,1(R4)                    BASE REG
  ISTER                                 LA    R15,MYSAVE              POINT TO M
Y REGISTER SAVE AREA                    ST    R15,8(R13)              SET LSA IN
 CALLER'S SAVE                          ST    R13,4(R15)              SET HSA IN
 MY SAVE AREA  +                          LR    R13,R15                 SET UP S
AVE AREA POIN  TER                          B     START                   BRANCH
 AROUND CONSTANTS                           DC    CL8'RESCHECK'           PROGRA
M NAME IDENTIFIER                           DC    CL8'&SYSDATE'           ASSEMB
LY DATE                                       DC    CL8'&SYSTIME'           ASSE
MBLY TIME                            MYSAVE   DS    18F                     MY R
EGISTER SAVE AREA                    *******************************************
**************************           *          OPEN FILES, LOCATE FIRST STATEME
NT                         *           *****************************************
****************************           START    OPEN  (SYSPRINT,OUTPUT,SYSIN) OP
EN FILES                               FIND1ST  BAS   R9,G  ETIN
READ INPUT RECORD                                 CLC   INASMLOC,=CL6'000000'
FOUND LOCATION ZERO?                              BNE   FIND1ST
NO, CONTINUE SEARCH                               MVI   GOTSTRT,1
  SHOW START RECORD FOUND                  *************************************
********************************           *             MAINLINE ROUTINE
                               *           *************************************
********  ************************           MAINLINE BAS   R9,GETIN
    READ INPUT RECORD                                 TRT   INASMLOC,HEXDIG
    LOCATION IS ALL HEX DIGITS?                       BNZ   MAINLINE
    NO, NOT VALID STATE  MENT                           CLC   INASMLOC,INRESLOC
      ASM LOC = RESOURCE LOC?                           MVC   PASMLOC,INASMLOC
      MOVE LOCATION                                     MVC   PASM12,INASM12
      MOVE ASM BYTES 1-2                                  MVC   PASM34,INASM34
        MOVE ASM BYTES 3-4                                MVC   PASM56,INASM56
        MOVE ASM BYTES 5-6                                MVC   PRESLOC,INRESLOC
        MOVE LOCATION                                       MVC   PRESDATA,INRES
12        MOVE DATA BYTES                                   CLC   PRESDATA,PASM1
2         DATA BYTES IDENTICAL?                             BE    MAINLINE
          YES                                               MVC   PS TMNBR,INAS
MLIN        ASM'S LINE NUMBER                                 MVC   PLABEL,INLAB
EL          STATEMENT LABEL                                   MVC   PMNEM,INMNEM
            STATEMENT MNEMONIC, OPERANDS                         \         BAS
  R9,PRINT                PRINT DIFFERENCE LINE                             MVI
  RETCODE+3,4             INDICATE ERROR PRINTED                            B
  MAINLINE                LOOP THROUGH INPUT FILE                  *  **********
**********************************************************           *
   READ INPUT FILE SUBROUTINE                            *           ***********
**********************************************************           GETIN    GE
T     SYSIN,INREC             READ NEXT RECORD
CLI   INASMBK1,C' '           1ST BLANK FIELD IS BLANK?
BNE   GETIN                   NO
CLI   INASMBK2,C'   '           2ND BLANK FIELD IS BLANK?
  BNE   GETIN                   NO
  CLI   INASMBK3,C' '           3RD BLANK FIELD IS BLANK?
  BNE   GETIN                   N  O
    CLI   INASMBK4,C' '           4TH BLANK FIELD IS BLANK?
    BNE   GETIN                   NO
    CLI   INASMBK5,C' '           5TH BLANK FIEL  D IS BLANK?
      BNE   GETIN                   NO
      CLI   INASMBK6,C' '           6TH BLANK FIELD IS BLANK?
      BNE   GETIN                   NO
        CLC   INMNEM,=CL5'END '       THIS THE END STATEMENT?
        BE    EOJ                     YES, ALL THROUGH
        BR    R9                      RETURN TO CALLER
 *********************************************************************
 *             PRINT SUBROUTINE                                      *
 *********************************************************************
 PRINT    PUT     SYSPRINT,PRTLINE        WRITE PRINT LINE
            MVC   PRTLINE,BLANKS          CLEAR PRINT LINE
            BR    R9                      NO, RETURN
   *************************  ********************************************
     *             ERROR END OF SYSIN                                    *
     *********************************************************************
     ERROREND CLI   GOTSTRT,1                 GOT THE START RECORD?
                BE    BADEND                  YES
                WTO   'MISSING START, ABENDING',ROUTCDE=11
                ABEND  777,DUMP               TERMINATE IN   ERROR
         BADEND   WTO   'MISSING END, ABENDING',ROUTCDE=11
                  ABEND  888,DUMP               TERMINATE IN ERROR
                  BR    R9                      NO, RETURN               +
           ************************************************************  *******
**           *             END OF JOB
 *           *******************************************************************
**           EOJ      CLC   RETCODE,XZROS           RETURN CODE IS ZERO?
                        BNE   CLOSES                  NO, BRANCH
                        MVC   PRT(38),=CL38'***COMPARISON FOUND NO DIFFERENCES *
**'                     BAS   R9,PRINT                GO PRINT
               CLOSES     CLOSE (SYSPRINT,,SYSIN) CLOSE FILES
                          L     R13,4(R13)              POINT TO CALLER'S SAVE A
REA                       L     R14,12(R13)             RESTORE RETURN REG: R14
                          L     R15,  RETCODE             SET RETURN CODE
                            LM    R0,R12,20(R13)          RESTORE CALLER'S REGS
0-12                        BR    R14                     RETURN
                   ********************************  ***************************
**********           *        STORAGE AND FILE AREAS
         *           ***********************************************************
**********           *
                       DBLWD    DS    D                       DOUBLEWORD WORK AR
EA                     XZROS    DC    F'0'                    CONSTANT ZEROS
                       RETCODE  DC    F'0'                    RETURN CODE
                         BLANKS   DC    CL133' '                BLANKS
                         GOTSTRT  DC    X'00'                   1=GOT START LOCA
TION                     HEXDIG   DC    256X'FF'                TABLE TO TEST FO
R HEX DIGITS                        ORG   HEXDIG+C'0'
                                    DC    16X'00'
                                    ORG
                           *
                             PRTLINE  DS    0CL133                  PRINT LINE
                             PCC      DS    CL1                     CARRIAGE CON
TROL                         PRT      DS    0C L132                  PRINT DATA
                               PASMLOC  DC    CL6' '                  ASM'S LOCA
TION                                    DC    CL1' '
                                           0PASM12   DC    CL4' '
    ASM'S DATA BYTES 1-2                     PASM34   DC    CL4' '
    ASM'S DATA BYTES 3-4                     PASM56   DC    CL4' '
    ASM'S DATA BYTES 5-6                                DC    CL3' '
                                               PRESLOC  DC    CL6' '
      RESOURCE'S LOCATION                               DC    CL1' '
                                               PRESDATA DC      CL12' '
        RESOURCE'S DATA BYTES 1-6                         DC    CL3' '
                                                 PSTMNBR  DC    CL5' '
        STATEMENT NUMBER                                  DC    CL1' '
                                                   PLABEL   DC    CL8' '
          LABEL                                             DC    CL1' '
                                                   PMNEM    DC    CL43' '
          M  NEMONIC, OPERANDS                                DC    CL30' '
                                                     *
                                                     INREC    DS    0CL156
             INPUT RECORD                              INCC     DS    CL1
    1            CARRIAGE CONTROL                      INASMLOC DS    CL6
    2            ASM'S LOCATION                        INASMBK1 DS    CL1
    8            BLANK                                   INASM12  DS    CL4
      9            ASM'S DATA BYTES 1-2                  INASMBK2 DS    CL1
     13            BLANK                                 INASM34  DS    CL4
     14            ASM'S DATA BYTES 3-4                    INASMBK3 DS    CL1
       18            BLANK                                 INASM56  DS    CL4
       19            ASM'S DATA BYTES 5-6                  INASMBK4 DS    CL1
       23            BLANK                                          DS      CL12
         24                                                  INASMLIN DS    CL5
         36            ASM'S LINE NUMBER                     INASMBK5 DS    CL1
         41            BLANK                                 INLABEL  DS    CL8
           42            STATEMENT LABEL                       INASMBK6 DS    CL
1          50            BLANK                                 INMNEM   DS    CL
5          51            STATEMENT MNEMONIC                             DS    CL
38         56              OPERANDS, COMMENTS                    INRESLOC DS
CL6          94            RESOURCE'S LOCATION                   INRESBK1 DS
CL1         100            BLANK                                 INRES12  DS
CL4         101            RESOURCE'  S BYTES 1-2                  INRES34  DS
  CL4         105            RESOURCE'S BYTES 3-4                  INRES56  DS
  CL4         109            RESOURCE'S BYTES 5-6                           DS
  CL43        113                                  +                 ***********
*************************************************  *********           *
     DCB'S                                                 *           *********
************************************************************           SYSPRINT
DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,                      X
        RECFM=FBA,LRECL=133                                              SYSIN
  DCB   DSORG=PS,MACRF=GM,DDNAME=SYSIN,EODAD=ERROREND,          X
        RECFM=FB
    LTORG                                                                  RESCH
ECK CSECT                                                                  *****
****************************************************************           *
         REGIS  TER EQUATES                                      *           ***
******************************************************************           R0
      EQU   0                                                                R1
      EQU   1                                                                  R
2       EQU   2                                                                R
3       EQU   3                                                                R
4       EQU   4
 R5       EQU   5
 R6       EQU   6
 R7       EQU   7
   R8       EQU   8
   R9       EQU   9
   R10      EQU   10
     R11      EQU   11
     R12      EQU   12
     R13      EQU   13
     R14        EQU   14
       R15      EQU   15
                END
        {                       \         TITLE '*** BUILD ASSEMBLER SOURCE FR
OM A LOAD MODULE ***'              REBUILD CSECT
                                   REBUILD AMODE 31
                                   R  EBUILD RMODE 24
                                     *******************************************
**************************           * THIS SUBROUTINE IS CALLED BY THE RESOURCE
 PROGRAM, WHICH PERFORMS *           * INITIALIZATI  ON FOR THE DISASSEMBLY. ONC
E INITIALIZATION IS        *           * COMPLETE, THIS ROUTINE IS ENTERED WITH
POINTERS TO THE LOAD MODULE*           * TEXT AND THE TABLES BUILT BY THE RESOUR
CE PROGRAM.                *           *
                             *           * REBUILD IS CALLED TWICE BY RESOURCE:
                             *           *   1ST CALL: THE STAGE BYTE = X'01'. D
URING THIS PASS, THE TEXT IS *           *             ANALYZED TO FIND LOCATION
S   WHERE LABELS WILL BE NEEDED*           *             ON SOURCE CODE OUTPUT S
TATEMENTS. THESE LABELS ARE    *           *             ADDED TO THE LABEL TABL
E.                             *           *   2ND CALL: THE STAGE BYTE = X'02'.
 DURING THIS PAS  S THE SOURCE   *           *             CODE IS DEVELOPED AND
 WRITTEN TO THE SYSOUT FILE.     *           *
                                 *           *   DURING PROCESSING, THE OFFSET W
ITHIN THE TEXT OF THE CSECT BEI  NG*           *   DISASSEMBLED IS MAINTAINED IN
 THE LOCATION FIELD. THE TEXT IS   *           *   SCANNED ONE BYTE AT A TIME. W
HEN THE LOCATION FIELD IS AN EVEN  *           *   NUMBER, THE BYTE MAY BE AN IN
STRUCTION OP-CODE, AND IT IS SENT  *             *   TO THE SRCHOC ROUTINE TO DE
TERMINE WHETHER OR NOT IT MAY BE AN  *           *   INSTRUCTION OP-CODE. IF SO,
 THE ISINST FLAG IS SET, AND THE     *           *   INSTRUCS ROUTINE INITIALIZE
S FOR AN INSTRUCTION AND THEN GOES   *           *   TO THE A  PPROPRIATE FORMAT
TING ROUTINE. WITHIN THE FORMATTING    *           *   ROUTINE ADDITIONAL SPECIA
LIZED CHECKS ARE MADE TO DETERMINE     *           *   WHETHER THIS REALLY IS AN
 INSTRUCTION. IF NOT, THE ISINST FLAG  *           *   IS RESET, AND ON RETU  RN
, THE BLDCONST ROUTINE WILL BE CALLED TO *           *   PROCESS THE TEXT AS A C
ONSTANT. BLDCONST IS ALSO CALLED IF THE  *           *   SRCHOC ROUTINE FINDS TH
AT THE TEXT IS NOT A VALID INSTRUCTION   *           *   OP-CODE.
                                           *           *
                                           *           *   DURING STAGE 1 PROCES
SING, INSTRUCTION STORAGE OPERANDS ARE USED*           *   TO CREATE LABELS IF T
HERE IS A USING IN EFFECT   FOR THE BASE     *           *   REGISTER IN THE ADD
RESS. DURING STAGE 2 PROCESSING, THE LABEL   *           *   TABLE IS ACCESSED F
OR EACH INSTRUCTION STORAGE ADDRESS TO SEE   *           *   IS A LABEL IS AVAIL
ABLE FOR USE IN THE OPERAND FIELD, OR IF + AN  *           *   EXPLICIT OPERAND
MUST BE FORMATTED. FOR EACH OUTPUT STAT  EMENT   *           *   IN STAGE 2, THE
 LABEL TABLE IS ALSO ACCESSED TO SEE IF THERE IS *           *   A LABEL THAT SH
OULD BE INCLUDED IN THE LABEL FIELD OF THE OUTPUT*           *   STATEMENT.
                                                 *             *
                                                   *           * AUTHOR R THORNT
ON FEB 2002                                        *           *****************
****************************************************           *
                                                                 ***************
******************************************************           *        SAVE R
EGISTERS, SET UP BASE REGS, CHAIN SAVE AREAS         *           ***************
****  **************************************************                    USIN
G REBUILD,R3,R4,R5                                                          STM
  R14,R12,12(R13)         SAVE CALLER'S REGS                                LR
  R3,R15                    SET UP BASE FIRST BASE REG                        LA
    R4,4095(R3)             SET UP SECOND                                     LA
    R4,1(R4)                    BASE REGISTER                                 LA
    R5,4095(R4)             SET UP   THIRD
LA    R5,1(R5)                    BASE REGISTER
LA    R15,MYSAVE              POINT TO MY REGISTER SAVE AREA
ST    R15,8(R13)              SET LSA IN CALLER'S   SAVE
  ST    R13,4(R15)              SET HSA IN MY SAVE AREA
  LR    R13,R15                 SET UP SAVE AREA POINTER
  B     PARMS                   BRANCH AROUND CONSTANTS
    DC    CL8'REBUILD'            PROGRAM NAME IDENTIFIER
    DC    CL8'&SYSDATE'           ASSEMBLY DATE
    DC    CL8'&SYSTIME'           ASSEMBLY TIME                            MYSA
 VE   DS    18F                     MY REGISTER SAVE AREA                    ***
******************************************************************           * I
NITIALIZE FOR PROCESSING                                         *           ***
************** ****************************************************           P
ARMS    MVC   PARMAREA(ENDPARMS-PARMAREA),0(R1) SAVE PARMS
        L     R1,STAGEA               POINT TO STAGE INDICATOR
           \         MVC   STAGE,0(R1)             GET STAGE INDICATOR
                      XC    LOCATION,LOCATION       START AT LOCATION ZERO
                      MVI   INDATA,0                RESET IN DATA INDICATOR
                        L     R12,TEXTADDR            POINT TO START OF TEXT
                        ST    R12,CURRTXTA            SAVE CURRENT TEXT ADDRESS
                        L     R1,LBLTBADR             POINT TO 1ST LABEL TABLE E
NTRY                    MVC     CURLBNT,0(R1)           SAVE THE LABEL ENTRY
                          ST    R1,CURRLBLA             SAVE CURRENT LABEL ADDRE
SS                        L     R12,CSECTA              POINT TO CSECT ADDRESS
                          MVC   CSECT,0(R12)              SAVE CSECT NAME
                            MVI   CONPROG,0               CLEAR INDICATOR
                            CLI   STAGE,1                 NOW IN STAGE 1?
                            BE    MAINLINE                Y  ES
                              MVC   OUTREC,BLANKS           CLEAR THE OUTPUT REC
ORD AREA                      MVC   OUTMNEM,=CL5'CSECT'     BUILD THE
                              MVC   OUTLABEL,CSECT             CSECT STATE  MENT
                                BAS   R9,OUTPUT               AND WRITE TO OUTPU
T                      *********************************************************
************           * MAINLINE CONTROL
             *           *******************************************************
**************           MAINLINE CLC   CURRTXTA,TEXTENDA       PAST END OF TEXT
?                                 BH    RETURN                  YES
                                    CLC   CURLBOFS,LOCATION       TIME TO HANDLE
 A LABEL ENTRY?                     BH    MLTSTDTA                NO
                                    BAS   R9,LABELS               YES, GO HANDLE
 LABEL ENTRY                        B       MAINLINE                CONTINUE
                             MLTSTDTA CLI   INDATA,1                IN A DATA-ON
LY AREA NOW?                          BE    MLINDATA                YES, GO HAND
LE CONSTANTS                          TM    LOCATION+3  ,X'01'        AT AN ODD-
ADDRESS?                                BO    MLINDATA                YES, NOT A
N OP-CODE                               BAS   R9,SRCHOC               GO TEST FO
R INSTRUCTION OP                        CLI   ISINST,1                  IS THIS
AN OP-CODE?                               BNE   MLINDATA                NO, GO H
ANDLE CONSTANTS                           BAS   R9,INSTRUCS             ELSE PRO
CESS THE INSTRUCTION                      CLI   ISINST,1                STILL LO
OK L  IKE AN OP-CODE?                       BE    MAINLINE                YES, C
ONTINUE                            MLINDATA BAS   R9,BLDCONST             GO PRO
CESS AS A CONSTANT                          B     MAINLINE                CONTIN
UE                 +                 *******************************************
*****************  *********           * PROCESS NEXT LABEL ENTRY
                           *           *****************************************
****************************           LABELS   ST    R9,LS9                  SA
VE RETURN ADDRESS                                 LA    R9,LSNEXT
GET DESIRED RETURN ADDRESS                        CLI   CURLBTYP,CURLDROP
DROP USING REGISTER?                              BE    ADDDROP
YES                                                 CLI   CURLBTYP,CURLUSNG
  SPECIFY USING REGISTER?                           BE    ADDDROP
  YES                                               CLI   CURLBTYP,CURLDTST
  DATA-ONLY START?                                  BE    STDR  OP
    YES                                               CLI   CURLBTYP,CURLDTND
    DATA-ONLY END?                                    BE    STDROP
    YES                                               CLI   CURLBTYP,CURLABEL
      SIMPLE LABEL ENTRY?                               BE    SMPLABEL
      YES                                               CLI   CURLBTYP,CURLADCN
      ADCON LOCATION?                                   BE    ADCONLOC
      YES                                                 CLI   CURLBTYP,CURLVCO
N       V-CON LOCATION?                                   BE    VCONLOC
        YES                                      LSNEXT   L     R1,CURRLBLA
        POINT TO CURRENT LA  BEL ENTRY                      LA    R1,L'CURLBNT(R
1)        POINT TO NEXT LABEL ENTRY                         C     R1,LBLTBEND
          PAST END OF LABEL TABLE?                          BNH   LSMVENTY
          NO                                                  MVC   CURLBOFS,HEX
FFS         YES, SET LABEL OFFSET HIGH                        B     LSXIT
            AND EXIT                                 LSMVENTY MVC   CURLBNT,0(R1
)           SAVE THE LABEL ENTRY                                ST    R1,CURRLBL
A             SAVE CURRENT LABEL ADDRESS               LSXIT    L     R9,LS9
              GET RETURN ADDRESS                                BR    R9
              EXIT                                     LS9      DC    A( 0)
                RETURN ADDRESS                           ***********************
**********************************************           * ADD OR DROP USING REG
ISTERS                                       *                       \*********
************************************************************           ADDDROP
ST    R9,AD9                  SAVE RETURN ADDRESS
SR    R1,R1                   CLEAR FOR INSERT
  IC    R1,CURLBURG             INSERT THE USING REGISTER NBR
  SLL   R1,2                    MULTIPLY BY ENTRY LENGTH = 4
  LA    R1,USENTRY(R1)          POINT TO ENTRY IN USING TABLE
  XC      0(L'USENTRY,R1),0(R1)   CLEAR THE ENTRY
    CLI   CURLBTYP,CURLUSNG       SPECIFY USING REGISTER?
    BE    ADUSING                 YES
    CLI   STAGE,1                   IN STAGE 1?
      BE    ADXIT                   YES, EXIT
      MVC   HOLDOUT,OUTREC          SAVE OUTPUT RECORD
      MVC   OUTREC,BLANKS           C  LEAR FOR USING OR DROP
        MVC   OUTMNEM,=CL5'DROP'      SET MNEMONIC
        LA    R8,OUTOPND              POINT TO OUTPUT OPERAND FIELD
        IC    R1,CURLBURG             PICK UP REGIST  ER TO DROP
          BAS   R9,REGOPNDS             GO FORMAT THE REGISTER OPND
          BAS   R9,OUTPUT               WRITE THE DROP STATEMENT
          MVC   OUTREC,HOLDOUT          RESTORE OUTPUT RECORD
            B     ADXIT                   AND EXIT
   ADUSING  MVC   0(L'USENTRY,R1),CURLBINU SET UP USING REGISTER ENTRY
            OI    0(R1),X'80'             SET IN-USE BIT
              CLI   STAGE,1                 IN STAGE 1?
              BE    ADXIT                   YES, EXIT
              MVC   HOLDOUT,OUTREC          SAVE OUTPUT RECORD
              MVC     OUTREC,BLANKS           CLEAR FOR USING OR DROP
                MVC   OUTMNEM,=CL5'USING'     SET MNEMONIC
                CLC   CURLBINU,XZROS          IS USING VALUE ZERO?
                BNE   ADUSLBL                   NO, GO BUILD LABEL
                  MVC   OUTOPND(8),CSECT        YES, USE CSECT NAME
                  LA    R8,OUTOPND+7            POINT TO LAST POSSIBLE BYTE
         ADUSLUP  CLI   0(R8),C' '                AT RIGHT END OF CSECT NAME?
                    BNE   ADUSRHE                 YES
                    BCT   R8,ADUSLUP              NO, BACK UP AND CHECK AGAIN
           ADUSRHE  MVI   1(R8),C','              MOVE OPERAND   SEPARATOR
                      LA    R8,2(R8)                STEP PAST THE COMMA
                      B     ADUSREG                 GO FORMAT THE REGISTER OPND
             ADUSLBL  MVI   OUTOPND,C'A'            FORMAT                   +
                        UNPK  OUTOPND+1(7),CURLBINU+1(4)   USING
                          TR    OUTOPND+1(6),TRCHAR-C'0'      LABEL
                          MVI   OUTOPND+7,C','          SEPARATE OPERANDS
                          LA    R8,OUTOPND+8            POINT TO REG OPERAND FIE
LD                 ADUSREG  IC    R1,CURLBURG             PICK UP USING REGISTER
                            BAS   R9,REGOPNDS             GO FORMAT THE REGISTER
 OPND                       BAS   R9,OUTPUT               WRITE THE DROP STATEME
NT                            MVC   OUTREC,HOLDOUT          RESTORE OUTPUT RECOR
D                    ADXIT    L     R9,AD9                  GET RETURN ADDRESS
                              BR    R9                      EXIT
                     AD9      DC    A(0)                      RETURN ADDRESS
                       *********************************************************
************           * START OR STOP DATA-ONLY AREAS
           *           ********************************  ***********************
**************           STDROP   ST    R9,SD9                  ASSUME DATA-ONLY
 END                              MVI   INDATA,0                ASSUME DATA-ONLY
 END                              CLI   CURLBTYP,CURLDTND       DATA-O  NLY END?
                                    BE    SDXIT                   YES, EXIT
                                    MVI   INDATA,1                NO, INDICATE N
OW IN DATA-ONLY            SDXIT    L     R9,SD9                  GET RETURN ADD
RESS                                  BR    R9                      EXIT
                             SD9      DC    A(0)                    RETURN ADDRE
SS                           ***************************************************
******************             * PROCESS SIMPLE LABEL ENTRY
                   *           *************************************************
********************           SMPLABEL ST    R9,SL9                  ASSUME DAT
A-ONLY END                                CLI   STAGE,1                 NOW IN S
TAGE 1?                                   BE    SLXIT                   YES, NOT
HING TO DO NOW                            CLI   CONPROG,0               IS A CON
STANT IN PROGRESS?                        BE    SL CKLBL                 NO
                                   SLFORCE  BAS   R9,FORCECON             YES, G
O FORCE CONSTANT OUT               SLCKLBL  CLI   CURLBLBL,C'A'           VALID
LABEL ON LABEL ENTRY?                          \         BNL   SLCKLBL2
        YES                                               MVI   CURLBLBL,C'A'
        NO, MOVE LABEL NAME 1ST CHAR                      UNPK  CURLBLBL+1(7),CU
RLBOFS+1(4) UNPACK TO MAKE PRINTABLE                        MVI   CURLBLBL+7,C'
'         CLEAR TRASH                                       TR    CURLBLBL+1(6),
TRCHAR-C'0' MAKE IT PRINTABLE                      SLCKLBL2 CLI   OUTLABEL,C' '
          LABEL ALREADY ON OUTPUT?                          BE      SLMOVE
            NO                                                MVC   HOLDOUT,OUTR
EC          SAVE OUTPUT RECORD                                MVC   OUTMNEM(3),=
CL3'EQU'    SET MNEMONIC TO EQU                               MVI   OUTOPND,C'*'
              SHOW LABEL FOR HERE                               CLC   LBLLENG,H0
              LENGTH ASSOCIATED WITH LABEL?                     BE    SLOUTPT
              NO                                                MVI   OUTOPND+1,
C','          M  OVE SEPARATOR                                    LA    R8,OUTOP
ND+2            POINT PAST THE COMMA                              LH    R9,LBLLE
NG              PICK UP LABEL LENGTH                              BAS   R9,DECMO
PND             FORMAT THE LEN  GTH                        SLOUTPT  BAS   R9,OUT
PUT               YES, GO WRITE CURRENT OUTPUT                      MVC   OUTREC
,HOLDOUT          RESTORE OUTPUT RECORD                    SLMOVE   MVC   OUTLAB
EL,CURLBLBL       MOVE THE LABEL TO OUTPUT                   SLMVLENG MVC   LBLL
ENG,CURLBRLD        SAVE ASSOCIATED LENGTH                   SLCKOFST CLC   CURL
BOFS,LOCATION       LABEL IS FOR THIS LOCATION?                       BNL   SLCK
PROG                YES                                                 MVC   HO
LDOUT,OUTREC          SAVE OUTPUT RECORD                                MVC   OU
TMNEM(3),=CL3'EQU'    SET MNEMONIC TO EQU                               MVI   OU
TOPND,C'*'            SHOW LABEL FOR HERE                               MVI
OUTOPND+1,C'-'          MINUS SIGN                                        L
R1,LOCATION             COMPUTE                                           S
R1,CURLBOFS                NEGATIVE ORIGIN                                LA
R8,OUTOPND  +2            POINT TO OPERAND LOCATION                         BAS
  R9,DECMOPND             GO FORMAT THE NEGATIVE ORIGIN                     CLC
  LBLLENG,H0              LENGTH ASSOCIATED WITH LABEL?                     BE
  SLOUTPT2                  NO                                                MV
I   0(R8),C','              SEPARATE OPERANDS                                 LA
    R8,1(R8)                STEP PAST THE COMMA                               LH
    R1,LBLLENG              PICK UP LABE  L LENGTH
BAS   R9,DECMOPND             GO FORMAT THE LENGTH                     SLOUTPT2
BAS   R9,OUTPUT               YES, GO WRITE CURRENT OUTPUT
MVC   CURLBLBL,BLANKS         CLEAR THE LABEL          +
  MVC   LBLLENG,XZROS           AND LENGTH
    MVC   OUTREC,HOLDOUT          RESTORE OUTPUT RECORD
    MVC   OUTLABEL,BLANKS         CLEAR ANY LABEL THERE                    SLCKP
ROG CLI   OUTMNEM,C' '            ANY STATEMENT IN PROGRESS?
      BNE   SLXIT                   YES
      CLC   CURLBLBL,CSECT          LABEL IS CSECT NAME?
      BNE   SLXIT                   NO
        MVC   OUTLABEL,BLANKS         YES, ERASE IT
        CLC   OUTREC,BLANKS           ANYTHING LEFT TO WRITE?
        BE    SLXIT                   NO
        BAS   R9,O  UTPUT               WRITE CSECT STATEMENT
 SLXIT    L     R9,SL9                  GET RETURN ADDRESS
          BR    R9                      EXIT
 SL9      DC    A(0)                      RETURN ADDRESS
   *********************************************************************
   * PROCESS ADDRESS CONSTANTS (ADCON)                                 *
   *********************************************  ************************
     ADCONLOC ST    R9,AC9                  ASSUME DATA-ONLY END
              CLI   STAGE,1                 NOW IN STAGE 1?
              BE    ACADVNC                 YES
                CLI   CONPROG,0               IS A CONSTANT IN PROGRESS?
                BE    ACCHKLB                 NO
                BAS   R9,FORCECON             YES, GO FORCE CONSTANT OUT
         ACCHKLB  CLI   OUTLABEL,C' '           LABEL ALREADY ON OUTPUT?
                  BE    ACMOVE                  NO
                  CLI   CURLBLBL,C' '           CONSTANT HAS A LABEL?
                    BE    ACMVMNE                 NO, USE EXISTING LABEL
                    MVC   HOLDOUT,OUTREC          SAVE OUTPUT RECORD
                    MVC   OUTMNEM(3),=CL3'EQU'    SET MNEMONIC TO EQU
                    MVI   OU TOPND,C'*'            SHOW LABEL FOR HERE
                      CLC   LBLLENG,H0              LENGTH ASSOCIATED WITH LABEL
?                     BE    ACOUTLB                 NO
                         \         MVI   OUTOPND+1,C','          MOVE SEPARATOR
                                    LH    R9,LBLLENG              PICK UP LABEL
LENGTH                              CVD   R9,DBLWD                CONVERT IT TO
PACKED DECIMAL                        UNPK  OUTOPND+2(3),DBLWD UNPACK LABEL LENG
TH                                    OI    OUTOPND+4,X'F0'         CLEAR SIGN
                             ACOUTLB  BAS   R9,OUTPUT               YES, GO WRIT
E CURRENT OUTPUT                      MVC     OUTREC,HOLDOUT          RESTORE OU
TPUT RECORD                    ACMOVE   MVC   OUTLABEL,CURLBLBL       LABEL TO O
UTPUT RECORD                   ACMVMNE  MVC   OUTMNEM(2),=CL2'DC'     MNEMONIC
                                        MVC   OUTOPND(2),=  CL2'AL'     START TH
E OPERAND                                 MVC   OUTOPND+2(1),CURLBRLD+1 MOVE LEN
GTH                                       OI    OUTOPND+2,X'F0'             OF C
ONSTANT                                   MVI   OUTOPND+3,C'('          M  OVE T
HE OPEN PAREN                               L     R12,CURRTXTA            POINT
TO CURRENT TEXT                             ICM   R2,15,0(R12)            PICK U
P 4 BYTES                                   CLC   CURLBRLD,H4             4-BYTE
 ADCON?                                       BNL   ACSTRR2                 YES
                                              SRL   R2,8                    NO,
SHIFT OUT LOW ORDER BYTE                      CLC   CURLBRLD,H3             3-BY
TE ADCON?                                       BE    ACSTRR2                 YE
S                                               SRL   R2,8                    NO
, SHIFT OUT LOW ORDER BYTE                      CLC   CURLBRLD,H2             2-
BYTE ADCON?                                       BE    ACSTRR2
YES                                               SRL   R2,8
NO, SHIFT OUT LOW ORDER BYTE             ACSTRR2  ST    R2,ADCNVALU
SAVE ADCON TEXT VALUE                             L       R1,LBLTBADR
  POINT TO THE LABEL TABLE                          USING LBLDSECT,R1
                                           ACCHKND  C     R1,LBLTBEND
  PAST END OF TABLE?                                BH    ACNOLBL
    YES                                               C     R2,LBLOFSET
    FOUND THE LABEL ENTRY?                            BH    ACLBLSTP
    NO, NOT THERE YET                                 BL    ACNOLBL
      NO, PAST THE OFFSET                               CLI   LBLLABEL,C'A'
      ENTRY HAS A LABEL?                                BNL   ACUSELBL
      YES                                      ACLBLSTP LA    R1,L'LBLENTRY(R1)
      STEP TO NEXT   ENTRY                                B     ACCHKND
        LOOP TO FIND THE LABEL ENTRY             ACUSELBL MVC   OUTOPND+4(8),LBL
LABEL   MOVE LABEL TO OPERAND                             DROP  R1
                                 +                          LA    R1,OUTOPND+11
          PT TO LAST POSSIBLE L  ABEL BYTE           ACCKTRL  CLI   0(R1),C' '
            AT A TRAILING BLANK?                              BNE   ACMVRPN1
            NO, GO MOVE ENDING PAREN                          BCT   R1,ACCKTRL
            CONTINUE                                   ACMVRPN1 MVI   1(R1),C')'
              MOVE ENDING PAREN                                 B     ACFINI
              CONTINUE                                 ACNOLBL  MVC   OUTOPND+4(
8),CSECT      MOVE IN CSECT NAME                                  LA    R1,OUTOP
ND+11           PT TO LAST POSSIBLE BYTE                 ACCKRHE2 CLI   0(R1),C'
 '              AT RIGHT END OF NAME?                             BNE   ACMVPLUS
                YES                                               BCT   R1,A  CC
KRHE2             LOOP TO FIND RHE                         ACMVPLUS MVI   1(R1),
C'+'              MOVE PLUS SIGN                                    L     R2,ADC
NVALU             GET ADCON TEXT VALUE                              CVD   R2,DBL
WD                  CONVERT IT TO DECIMAL                             UNPK  UNPK
WORK,DBLWD          UNPACK ADCON VALUE                                OI    UNPK
WORK+7,X'F0'        CLEAR SIGN                                        LA    R2,U
NPKWORK             POINT   TO 1ST BYTE                                 LA    R1
5,8                   MAX LENGTH                               ACCKLDG0 CLI   0(
R2),C'0'              AT A LEADING ZERO?                                BNE   AC
ATLHE                 NO                                                  LA
R2,1(R2)                YES, STEP TO NEXT DIGIT                           BCT
R15,ACCKLDG0            AND LOOP                                          MVI
1(R1),C')'              NO OFFSET, JUST RT PAREN                            B
  ACFINI                  CONTINUE                                 ACATLHE  BCTR
  R15,0                   MAKE LENGTH CODE FOR MOVE                         EX
  R15,ACMVOFST            MOVE IN THE OFFSET                                  AR
    R1,R15                  POINT TO END                                      MV
I   3(R1),C')'              AND ADD FINAL PAREN                      ACFINI   UN
PK  OUTOFFST(7),LOCATION+1(4) UNPACK OFFSET                                   MV
I   OU TOFFST+6,C' '         CLEAR TRASH
TR    OUTOFFST,TRCHAR-C'0'    MAKE PRINTABLE
L     R12,CURRTXTA            POINT TO CURRENT TEXT                           
    \         UNPK  OUTTEXT(9),0(5,R12)     UNPACK TEXT
              MVI   OUTTEXT+8,C' '          CLEAR TRASH
              TR    OUTTEXT(8),TRCHAR-C'0'  MAKE PRINTABLE
                CLI   CURLBRLD+1,4            4-BYTE ADCON?
                BNL   ACOUTPT                 YES
                MVC   OUTTEXT+6(2),=CL2'  '   LESS, CLEAR LAST TWO
                CLI     CURLBRLD+1,3            3-BYTE ADCON?
                  BNL   ACOUTPT                 YES
                  MVC   OUTTEXT+4(2),=CL2'  '   LESS, CLEAR LAST TWO
                  CLI   CURLBRLD+1,2              2-BYTE ADCON?
                    BNL   ACOUTPT                 YES
                    MVC   OUTTEXT+2(2),=CL2'  '   LESS, CLEAR LAST TWO
           ACOUTPT  BAS   R9,OUTPUT               W  RITE TO OUTPUT
             ACADVNC  LH    R1,CURLBRLD             GET ADCON LENGTH
                      A     R1,CURRTXTA             UPDATE CURRENT
                      ST    R1,CURRTXTA                TEXT ADDRES  S
                        LH    R1,CURLBRLD             GET ADCON LENGTH
                        A     R1,LOCATION             UPDATE CURRENT
                        ST    R1,LOCATION                LOCATION OFFSET
                 ACXIT    L     R9,AC9                  GET RETURN ADDRESS
                          BR    R9                      EXIT
                 AC9      DC    A(0)                    RETURN ADDRESS
                   ACMVOFST MVC   2(1,R1),0(R2)           EXECUTED MOVE
                   *************************************************************
********           * PROCESS V-CON ENTRIES
       *           ************  ***********************************************
**********           VCONLOC  ST    R9,VC9                  ASSUME DATA-ONLY END
                              CLI   STAGE,1                 NOW IN STAGE 1?
                              BE    VCADVNC                   YES
                                CLI   CONPROG,0               IS A CONSTANT IN P
ROGRESS?                        BE    VCCHKLB                 NO
                                BAS   R9,FORCECON               YES, GO FORCE CO
NSTANT OUT               VCCHKLB  CLI   OUTLABEL,C' '           LABEL ALREADY ON
 OUTPUT?                          BE    VCMOVE                  NO
                                  CLI   CURLBLBL,C' '           CONSTANT HAS   A
 LABEL?                             BE    VCMOVE                  NO, USE EXISTI
NG LABEL                            MVC   HOLDOUT,OUTREC          SAVE OUTPUT RE
CORD                                MVC   OUTMNEM(3),=CL3'EQU'    SET MNEMONIC T
O EQU      +                          MVI   OUTOPND,C'*'            SHOW LABEL F
OR HERE                                 CLC   LBLLENG,H0              LENGTH ASS
OCIATED WITH LABEL?                     BE    VCOUTLB                 NO
                                        MVI   OUTOPND+1,C','          MOVE SEPAR
ATOR                                      LH    R9,LBLLENG              PICK UP
LABEL LENGTH                              CVD   R9,DBLWD                CONVERT
IT TO PACKED DECIMAL                      UNPK  OUTOPND+2(3),DBLWD UNPACK LABEL
LENGTH                                      OI    OUTOPND+4,X'F0'         CLEAR
SIGN                               VCOUTLB  BAS   R9,OUTPUT               YES, G
O WRITE CURRENT OUTPUT                      MVC   OUTREC+8(72),HOLDOUT+8  RESTOR
E OUTPUT RECORD - LABEL            VCMOVE   MVC   OUTM  NEM(2),=CL2'DC'     SET
UP MNEMONIC                                   MVC   OUTOPND(2),=CL2'VL'     BEGI
N OPERAND                                     MVC   OUTOPND+2(1),CURLBRLD+1 MOVE
 VCON LENGTH                                  OI    OUTOPND+2,X'F0'
 AND MAKE IT PRINTABLE                          MVI   OUTOPND+3,C'('          OP
ENING PAREN                                     MVC   OUTOPND+4(8),CURLBLBL   MO
VE IN EXTERNAL NAME                             LA    R2,OUTOPND+11           PO
INT   TO LAST POSSIBLE BYTE              VCCHKRHE CLI   0(R2),C' '
AT RIGHT END?                                     BNE   VCATRHE
YES                                               BCT   R2,VCCHKRHE
LOOP TO FIND RHE                           VCATRHE  MVI   1(R2),C')'
  MOVE CLOSING PAREN                                UNPK  OUTOFFST(7),LOCATION+1
(4) UNPACK OFFSET                                   MVI   OUTOFFST+6,C' '
  CLEAR TRASH                                         TR    OUTOFFST,TRCHAR-C'0'
    MAKE PRINTABLE                                    L     R12,CURRTXTA
    POINT TO CURRENT TEXT                             UNPK  OUTTEXT(9),0(5,R12)
    UNPACK TEXT                                         MVI   OUTTEXT+8,C' '
      CLEAR TRASH                                       TR    OUTTEXT(8),TRCHAR-
C'0'  MAKE PRINTABLE                                    CLI   CURLBRLD+1,4
      4-BYTE V-CON?                                     BNL   VC OUTPT
        YES                                               MVC   OUTTEXT+6(2),=CL
2'  '   LESS, CLEAR LAST TWO                              CLI   CURLBRLD+1,3
        3-BYTE V-CON?                                        \         BNL   VC
OUTPT                 YES                                               MVC   OU
TTEXT+4(2),=CL2'  '   LESS, CLEAR LAST TWO                              CLI   CU
RLBRLD+1,2            2-BYTE V-CON?                                       BNL
VCOUTPT                 YES                                               MVC
OUTTEXT+2(2),=CL2'  '   LESS, CLEAR LAST TWO                     VCOUTPT  BAS
R9,OUTPUT               YES, GO WRITE CURRENT OUTPUT             VCADVNC  LH
  R1,CURLBRLD             GET ADCON LENGTH                                  A
  R1,CURRTXTA             UPDATE CURRENT                                    ST
  R1,CURRTXTA                TEXT ADDRESS                                   LH
  R1,CURLBRLD               GET ADCON LENGTH                                  A
    R1,LOCATION             UPDATE CURRENT                                    ST
    R1,LOCATION                LOCATION OFFSET                       VCXIT    L
    R9,VC9                  G  ET RETURN ADDRESS
BR    R9                      EXIT                                     VC9
DC    A(0)                    RETURN ADDRESS                           *********
********************************************  ****************           * PROCE
SS MACHINE INSTRUCTIONS. GENERAL OUTPUT FORMATTING IS DONE   *           * AND A
 SPECIALIZED ROUTINE IS CALLED TO FORMAT THE OPERANDS. IF    *           * ANY T
ESTS DETERMINE THIS MAY NOT BE AN INSTRUCTION, THE ISINST      *           * FLA
G IS TURNED OFF, AND INSTRUCTION PROCESSING IS ABANDONED.      *           *****
****************************************************************           INSTR
UCS ST    R9,IS9                  SAVE RETURN ADDRESS
      CLI   CONPROG,0               IS A CONSTANT IN PROGRESS?
      BE    ISMVMN                  NO
      BAS   R9,FORCECON             YES, GO WRITE CONSTANT                   ISM
VMN   MVC     OUTMNEM,INSTMNEM        MNEMONIC TO OUTPUT
        UNPK  OUTOFFST(7),LOCATION+1(4) UNPACK LOCATION
        MVI   OUTOFFST+6,C' '         CLEAR TRASH
        TR    OUTOFFST,T  RCHAR-C'0'    MAKE PRINTABLE
          UNPK  OUTTEXT(13),INSTTEXT(7) UNPACK INSTRUCTION TEXT
          MVI   OUTTEXT+12,C' '         CLEAR TRASH
          TR    OUTTEXT,TRCHAR-C'0'       MAKE PRINTABLE
            CLI   INSTLENG,6              6-BYTE INSTRUCTION?
            BE    ISOPNDS                 YES
            MVC   OUTTEXT+8(4),=CL4' '    NO, CLEAR LA  ST TWO BYTES
              CLI   INSTLENG,4              4-BYTE INSTRUCTION?
              BE    ISOPNDS                 YES
              MVC   OUTTEXT+4(4),=CL4' '    NO, CLEAR LAST TWO BYTES +
       ISOPNDS  LA    R9,ISRETRN              LOAD DESIRED RETURN A  DDRESS
                  LA    R8,OUTOPND              POINT TO OPERAND FIELD
                  SR    R2,R2                   CLEAR FOR INSERT
                  IC    R2,INSTFMT              PICK UP INSTRUCTION FORMAT CODE
                    SLL   R2,2                    MULTIPLY BY 4
                    B     *(R2)                   GO PROCESS OPERANDS
                    B     EOPND                   FMT=01: E FORMAT
                      B     RIOPND                  FMT=02: RI FORMAT
                      B     RR1OPND                 FMT=03: RR FORMAT TYPE 1
                      B     RR2OPND                 FMT=04: RR FORMAT TYPE 2
                      B     RR3O  PND                 FMT=05: RR FORMAT TYPE 3
                        B     RRE1OPND                FMT=06: RRE FORMAT TYPE 1
                        B     RRE2OPND                FMT=07: RRE FORMAT TYPE 2
                        B     RRE3OPND                  FMT=08: RRE FORMAT TYPE
3                         B     RRF1OPND                FMT=09: RRF FORMAT TYPE
1                         B     RRF2OPND                FMT=0A: RRF FORMAT TYPE
2                         B     RRF3OPND                FMT=0B  : RRF FORMAT TYP
E 3                         B     RS1OPND                 FMT=0C: RS FORMAT TYPE
 1                          B     RS2OPND                 FMT=0D: RS FORMAT TYPE
 2                          B     RS3OPND                 FMT=0E: RS FORMAT T  Y
PE 3                          B     RSIOPND                 FMT=0F: RSI FORMAT
                              B     RX1OPND                 FMT=10: RX FORMAT TY
PE 1                          B     RX2OPND                 FMT=11: RX FORMAT TY
PE 2                            B     RXEOPND                 FMT=12: RXE FORMAT
                                B     RXFOPND                 FMT=13: RXF FORMAT
                                B     S1OPND                  FMT=14: S FORMAT T
YPE 1                             B     S2OPND                  FMT=15: S FORMAT
 TYPE 2                           B     SIOPND                  FMT=16: SI FORMA
T                                 B     SS1OPND                 FMT=17: SS FORMA
T TYPE 1                          B     SS 2OPND                 FMT=18: SS FOR
MAT TYPE 2                          B     SS3OPND                 FMT=19: SS FOR
MAT TYPE 3                          B     SS4OPND                 FMT=1A: SS FOR
MAT TYPE 4                             \         B     SS5OPND
FMT=1B: SS FORMAT TYPE 5                          B     SSEOPND
FMT=1C: SSE FORMAT                                B     RR4OPND
FMT=1D: RR FORMAT TYPE 4                            B     S3OPND
  FMT=14: S FORMAT TYPE 3                  ISRETRN  CLI   ISINST,1
  STILL LOOKS LIKE AN INSTRUCTION?                  BE    ISOUTPT
  YES, GO WRITE TO OUTPUT                           MVC     OUTREC,BLANKS
    NO, CLEAR OUTPUT RECORD                           B     ISXIT
    AND EXIT                                 ISOUTPT  CLI   STAGE,1
    NOW IN STAGE 1?                                   BE    ISADVNC
      YES                                               BAS   R9,OUTPUT
      GO WRITE TO OUTPUT                       ISADVNC  L     R1,CURRTXTA
      POINT TO CURRENT TEXT ADDRESS                     SR    R2,R2
      C  LEAR FOR INSERT                                  IC    R2,INSTLENG
        PICK UP INSTRUCTION LENGTH                        AR    R1,R2
        POINT TO NEXT INSTRUCTION                         ST    R1,CURRTXTA
        UPDATE TEXT AD  DRESS                               A     R2,LOCATION
          UPDATE LOCATION                                   ST    R2,LOCATION
             COUNTER OFFSET                                 MVI   LAST,C'I'
          SHOW LAST WAS INSTRUCTION                           CLI   INSTCCNT,0
            THIS INST SETS COND CODE?                         BE    ISXIT
            NO                                                SR    R1,R1
            YES, CLEAR FOR INSERT                               IC    R1,INSTCCN
T             PICK UP TABLE ENTRY NBR                           BCTR  R1,0
              MAKE ZERO-RELATIVE                                MHI   R1,L'CCTBL
NT            MULTIPLY BY TABLE ENTRY LENGTH                    LA      R1,CCTBL
NT(R1)          POINT TO ENTRY                                    MVC   LASTCCNT
,0(R1)          AND SAVE THE ENTRY                       ISXIT    L     R9,IS9
                GET RETURN ADDRESS                                BR    R9
                  EXIT                                     IS9      DC    A(0)
                  RETURN ADDRESS                           *********************
**************************************************         *              E-FORM
AT INSTRUCTION OP  ERANDS                          *         *
                                                   *         * THESE 2 BYTE INST
RUCTIONS HAVE TWO-BYTE OP-CODES, WHERE THE FIRST   *         * BYTE IS X'01'
                                                     *         *
                                                     *         * FMT  NBR  MEMOR
Y CONTENT                       OPERAND CODING       *         * E1   01   .OC.O
C.OC.OC.                        (NONE)         +       *         *
                                                         *         * SINCE THESE
 INSTRUCTIONS HAVE NO OPERANDS, NO ACTION IS REQUIRED.   *         *
                                                         *         * E-FORMAT IN
STRUCTIONS INCLUDE:                                      *           *       PR
   UPT   SCKPF TRAP2                                       *         *
                                                           *         * SPECIAL O
PCFLAG1 FLAGS INCLUDE: NONE                                *         * SPEC  IAL
 OPCFLAG2 FLAGS INCLUDE: NONE                                *         *********
**************************************************************         EOPND
ST    R9,EO9                  SAVE RETURN ADDRESS                      EOXIT
L     R9,E  O9                  GET RETURN ADDRESS
  BR    R9                      EXIT                                     EO9
  DC    A(0)                    RETURN ADDRESS                           *******
*************************  ***************************************         *
          RI-FORMAT INSTRUCTION OPERANDS                         *         *
                                                                 *         * THE
SE 4-BYTE INSTRUCTIONS HAVE 1.5-BYTE OP-  CODES, THE FIRST OP-CODE *         * B
YTE IS X'A7' AND THE THIRD NYBBLE IS LOCATED IN THE 4TH NYBBLE     *         * O
F THE INSTRUCTION.                                                 *         *
                                                                     *         *
 FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *         *
 RI1   02  .OC.OC.R1.OC.I2.I2.I2.I2.             R1,I2               *         *
                                                                     *
 * RI-FORMAT INSTRUCTIONS INCLUDE:                                     *
 *       TMH   TML   BRC   BRAS  BRCT  LHI   AHI   MHI   CHI           *
 *                                                                     *
 * SP  ECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *
   * SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *
   *                                                                     *
   * THE RELATIVE BR ANCH INSTRUCTIONS (BRC, BRAS, AND BRCT) TREAT THE I2 *
     * OPERAND AS A NUMBER OF HALFWORDS TO THE BRANCH TARGET BEFORE OR     *
     * AFTER THE CURRENT LOCATION (*- OR *+).                              *
                 \*************************************************************
**********         RIOPND   ST    R9,RI9                  SAVE RETURN ADDRESS
                            CLI   STAGE,1                 THIS STAGE 1?
                              BE    RIXIT                   YES, NOTHING TO DO H
ERE                           IC    R1,INSTTEXT+1           GET R1 OPERAND
                              SRL   R1,4                      TO LOW NYBBLE
                              BAS     R9,REGOPNDS             GO FORMAT THE R1 R
EGISTER                         CLI   OUTMNEM,C'B'            THIS A RELATIVE BR
ANCH?                           BNE   RIHEXI2                 NO
                                MVC   0(3,R8),CMAS  TRP         MOVE ",*+"
                                  SR    R1,R1                   CLEAR FOR INSERT
                                  ICM   R1,3,INSTTEXT+2         PICK UP .I2.I2.I
2.I2.                             BNM   RIRELOP                 B  RANCH IF NOT
MINUS                               MVI   2(R8),C'-'              CHANGE THE SIG
N                                   LCR   R1,R1                   MAKE VALUE POS
ITIVE                      RIRELOP  SLL   R1,1                    DOUBLE FOR HAL
  FWORDS                              LA    R8,3(R8)                STEP PAST TH
E DELIMITER                           BAS   R9,DECMOPND             GO FORMAT TH
E NBR HALFWORDS                       B     RIXIT                   GO TO EXIT
                               RIHEXI2  MVC   0(3,R8),CMAXQT          MOVE ",X'"
                                        UNPK  3(5,R8),INSTTEXT+2(3)   UNPACK IMM
EDIATE OPERAND                          TR    3(4,R8),TRCHAR-C'0'     MAKE IT PR
INTABLE                                   MVI   7(R8),C''''             MOVE END
ING QUOTE                        RIXIT    L     R9,RI9                  GET RETU
RN ADDRESS                                BR    R9                      EXIT
                                 RI9      DC      A(0)                    RETURN
 ADDRESS                           *********************************************
**************************         *              RR-FORMAT INSTRUCTIONS, TYPE 1
 OPERANDS                *         * THESE 2-BYTE INSTRUCTIO  NS HAVE SINGLE-BYT
E OP-CODES.                *         *
                           *         * FMT  NBR  MEMORY CONTENT
      OPERAND CODING       *         * RR1   03  .OC.OC.R1.R2.
        R1,R2                *         *
                             *         * RR-FORMAT TYPE 1 INSTRUCTIONS INCLUDE:
                             *         *       BALR  BCTR  BSM   BASSM BASR  MVC
L  CLCL  L  PR   LNR           *         *       LTR   LCR   NR    CLR   OR    X
R    LR    CR    AR            *         *       SR    MR    DR    ALR   SLR   L
PDR  LNDR  LTDR  LCDR          *         *       HDR   LDXR  MXR   MXDR  LDR   C
DR   ADR   SDR   MDR     +       *         *       DDR   AWR   SWR   LPER  LNER
 LTER  LCER  HER   LEDR            *         *       AXR   SXR   LER   CER   AER
   SER   MDER  DER   AUR           *         *       SUR
                                   *         *
                                   *           * SPECIAL OPCFLAG1 FLAGS INCLUDE:
 X'01'                               *         * SPECIAL OPCFLAG2 FLAGS INCLUDE:
 X'80', X'10', X'04', X'02', X'01'   *         *********************************
**************************************         RR1OPN  D  ST    R9,RR19
        SAVE RETURN ADDRESS                               CLC   INSTFLG1(2),XZRO
S       ANY FLAGS?                                        BE    RR1CKSTG
        NO                                       RR1F101  TM    INST  FLG1,X'01'
          R2 MUST BE FP PAIR START?                         BZ    RR1F280
          NO                                                MVC   DBLWD(1),INSTT
EXT+1     MOVE .R1.R2.                                      NI    DBLWD,X'0F'
            CLEAR ALL BUT R2                                  TRT   DBLWD(1),FLT
PTPR        VALID FLOATING POINT PAIR?                        BZ    RR1F280
            YES                                      RR1NOTI  MVI   ISINST,0
            SHOW N  OT AN INSTRUCTION                           B     RR1XIT
              AND EXIT                                 RR1F280  TM    INSTFLG2,X
'80'          R1 MUST BE FP PAIR START?                         BZ    RR1F210
              NO                                                  PACK  DBLWD(1)
,INSTTEXT+1(1)  PACK .R1.R2. INTO DBLWD                           NI    DBLWD,X'
0F'             CLEAR ALL BUT R1                                  TRT   DBLWD(1)
,FLTPTPR        VALID FLOATING POINT PAIR?                          BNZ   RR1NOT
I                 NO                                       RR1F210  TM    INSTFL
G2,X'10'          R1 & R2 MUST DIFFER?                              BZ    RR1F20
4                 NO                                                  PACK  DBLW
D(1),INSTTEXT+1(1)  INVERT .R1.R2.                                    CLC   INST
TEXT+1(1),DBLWD     .R1.R2. = .R2.R1.?                                BE    RR1N
OTI                 YES, NOT AN INSTRUCTION                  RR1F204  TM    IN
STFLG2,X'04'          R2 MUST BE EVEN?                                  BZ    RR
1F202                 NO                                                TM    IN
STTEXT+1,X'01'        IS R2 EVEN?                                          \
      BO    RR1NOTI                 NO, NOT AN INSTRUCTION                   RR1
F202  TM    INSTFLG2,X'02'          R1 MUST BE EVEN?
      BZ    RR1CKSTG                NO
        TM    INSTTEXT+1,X'10'        IS R2 EVEN?
        BO    RR1NOTI                 NO, NOT AN INSTRUCTION                   R
R1CKSTG CLI   STAGE,1                 THIS STAGE 1?
        BE      RR1XIT                  YES, NOTHING TO DO HERE
          IC    R1,INSTTEXT+1           PICK UP REGISTER OPERANDS
          SRL   R1,4                    PUT R1 IN LOW NYBBLE
          BAS   R9,REGOPNDS               GO FORMAT THE R1 OPERAND
            MVI   0(R8),C','              MOVE OPERAND SEPARATOR
            LA    R8,1(R8)                STEP PAST COMMA
   RR1F201  TM    INSTFLG2,X'01'          R  2 PRINTS 0 WHEN 0?
              BZ    RR1FMTR2                NO, GO FORMAT AS A REGISTER
              TM    INSTTEXT+1,X'0F'        IS R2 ZERO?
              BNZ   RR1FMTR2                NO
                MVI   0(R8),C'0'              YES, MOVE A ZERO TO OPERAND
                B     RR1XIT                  AND EXIT
       RR1FMTR2 IC    R1,INSTTEXT+1           PICK UP THE R2 OPERAND
                  BAS   R9,REGOPNDS             GO FORMAT THE R2 OPERAND
         RR1XIT   L     R9,RR19                 GET RETURN ADDRESS
                  BR    R9                      EXIT
           RR19     DC    A(0)                    RETURN ADDRESS
           *********************************************************************
**         *              RR-FORMAT INSTRUCTIONS, TYPE 2 OPERANDS
 *         * THESE 2-BY  TE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES. THE SVCOP TA
BLE*         * IS USED TO FIND THE SVC NAME, WHICH IS MOVED TO THE SOURCE LINE.
   *         *
   *         * FMT  NBR  MEMORY CONTEN  T                       OPERAND CODING
     *         * RR2   04  .OC.OC.I1.I1.                        I1
     *         *
     *         * RR-FORMAT TYPE 2 INSTRUCTIONS INCLUD  E: SVC
       *         *
       *         * SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE
       *         * SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE
         *         *************************************************************
**********         RR2OPND  ST    R9,RR29                 SAVE RETURN ADDRESS
                            CLI   STAGE,1                 THIS STAGE 1?
   +                          BE    RR2XIT                  YES, NOTHING TO DO H
E  RE                           SR    R1,R1                   CLEAR FOR INSERT
                                ICM   R1,1,INSTTEXT+1         PICK UP IMMEDIATE
OPERAND VALUE                   CVD   R1,DBLWD                CONVERT TO PACKED
                                  CP    DBLWD,PK99              OVER 100?
                                  BH    RR2THREE                YES
                                  CP    DBLWD,PK9               OVER 10?
                                    BH    RR2TWO                  YES
                                    UNPK  OUTOPND(1),DBLWD        SINGLE DIGIT V
ALUE                                OI    OUTOPND,X'F0'           CLEAR THE SIGN
                                    B     RR2N  AME                 AND GO LOCAT
E THE SVC NAME               RR2TWO   UNPK  OUTOPND(2),DBLWD        SINGLE DIGIT
 VALUE                                OI    OUTOPND+1,X'F0'         CLEAR THE SI
GN                                    B     RR2NAME                   AND GO LOC
ATE THE NAME                   RR2THREE UNPK  OUTOPND(3),DBLWD        SINGLE DIG
IT VALUE                                OI    OUTOPND+2,X'F0'         CLEAR THE
SIGN                           RR2NAME  LA    R1,SVCOP                POINT   TO
 THE SVC NAME TABLE              RR2CKND  CLI   0(R1),X'FF'             AT END O
F TABLE?                                  BNE   RR2CKNBR                NO
                                          MVC   OUTOPND+14(11),=CL11'UNKNOWN SVC
' SHOW UNKN  OWN SVC                        B     RR2XIT                  AND EX
IT                                 RR2CKNBR CLC   0(1,R1),INSTTEXT+1      FOUND
THE SVC NAME ENTRY?                         BE    RR2GOTIT                YES
                                              LA    R1,L'SVCOP(R1)          NO,
STEP TO NEXT                                  B     RR2CKND                 CONT
INUE SEARCH                          RR2GOTIT MVC   OUTOPND+14(9),1(R1)     MOVE
 SVC NAME                            RR2X  IT   L     R9,RR29                 GE
T RETURN ADDRESS                                BR    R9                      EX
IT                                     RR29     DC    A(0)                    RE
TURN ADDRESS                           ***************** **********************
********************************         *              RR-FORMAT INSTRUCTIONS,
TYPE 3 OPERANDS                *         * THESE 2-BYTE INSTRUCTIONS HAVE SINGLE
-BYTE OP-CODES.                *                     \*
                                             *         * FMT  NBR  MEMORY CONTEN
T                       OPERAND CODING       *         * RR3   05  .OC.OC.R1.--.
                        R1                   *         *
                                               *         * RR-FORMAT TYPE 3 INST
RUCTIONS INCLUDE: SPM                          *         *
                                               *         * SPECIAL OPCF  LAG1 FL
AGS INCLUDE: NONE                                *         * SPECIAL OPCFLAG2 FL
AGS INCLUDE: NONE                                *         *********************
**************************************************         RR3OPND  ST    R9,RR3
9                   SAVE RETURN ADDRESS                               TM    INST
TEXT+1,X'0F'        LAST NYBBLE OF INSTRUCTION = 0?                   BZ    RR3C
KSTG                YES                                               MVI   ISIN
ST,0                N  O, RESET THE INSTRUCTION SWITCH                  B     RR
3XIT                  AND EXIT                                 RR3CKSTG CLI   ST
AGE,1                 THIS STAGE 1?                                     BE    RR
3XIT                  YES, NOTHING T  O DO HERE                           IC
R1,INSTTEXT+1           GET REGISTER OPERAND                              SRL
R1,4                    AND SHIFT TO LOW NYBBLE                           BAS
R9,REGOPNDS             GO FORMAT THE REGISTER OPER  AND           RR3XIT   L
  R9,RR39                 GET RETURN ADDRESS                                BR
  R9                      EXIT                                     RR39     DC
  A(0)                    RETURN ADDRESS                             ***********
************************************************************         *
    RR-FORMAT INSTRUCTIONS, TYPE 4 OPERANDS                *         * THESE 2-B
YTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES. ONLY THE RR    *         * FORMAT CO
N  DITIONAL BRANCH INSTRUCTION HAS THIS FORMAT.              *         *
                                                             *         * FMT  NB
R  MEMORY CONTENT                       OPERAND CODING       *         * RR4   0
5  .OC.OC.M1.R2.                          M1,R2                *         *
                                                               *         * RR-FO
RMAT TYPE 4 INSTRUCTIONS INCLUDE: BCR                          *         *
                                                                 *         * SPE
CIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *         * SPE
CIAL OPCFLAG2 FLAGS INCLUDE: X'01'                               *         *****
**********************************************  ********************         RR4
OPND  ST    R9,RR49                 SAVE RETURN ADDRESS
      CLI   STAGE,1                 THIS STAGE 1?
      BE    RR4XIT                  YES, NOTHING TO DO HERE  +
        IC    R1,INSTTEXT+1           PICK UP THE MASK VALU  E
          SRL   R1,4                    SHIFT TO LOW NYBBLE
          BAS   R9,CONDOPND             GO PROCESS CONDITIONAL BRANCH
          TM    INSTFLG2,X'01'          R2 PRINTS AS 0 WHEN 0?
            BZ    RR4FMTR2                NO
            TM    INSTTEXT+1,X'0F'        IS R2=0?
            BNZ   RR4FMTR2                NO
              MVI   0(R8),C'0'              YES, MOVE A ZERO TO PRINT
              B     RR4XIT                  AND EXIT
     RR4FMTR2 IC    R1,INSTTEXT+1           PICK UP REGISTER OPERAND VALUE
              BAS   R9,R  EGOPNDS             GO FORMAT THE REGISTER OPERAND
       RR4XIT   L     R9,RR49                 GET RETURN ADDRESS
                BR    R9                      EXIT
       RR49     DC    A(0)                      RETURN ADDRESS
         ***********************************************************************
         *              RRE-FORMAT INSTRUCTION, TYPE 1 OPERANDS                *
         * THESE 4-BYTE INSTRUCTIONS HAVE 2-BYTE OP-CO  DES WHOSE FIRST BYTE IS
 *         * X'B2' OR X'B3'
 *         *
 *         * FMT  NBR  MEMORY CONTENT                        OPERAND   CODING
   *         * RRE1  06  .OC.OC.OC.OC.--.--.R1.R2.             R1,R2
   *         *
   *         * RRE-FORMAT TYPE 1 INSTRUCTIONS INCLUDE:
   *           *       IPTE  IVSK  PT    ISKE  RRBE  SSKE  TB    DXR   BAKR
     *         *       CKSM  SQDR  SQER  STURA EREG  ESTA  LURA  TAR   CPYA
     *         *       SAR   EAR   MSR   MVPG  MVST  CUSE  BSG   BSA   CLST
     *         *         SRST  TRE   CUUTF CUTFU LPEBR LNEBR LTEBR LCEBR LDEBR
       *         *       LXDBR LXEBR MXDBR KEBR  CEBR  AEBR  SEBR  MDEBR DEBR
       *         *       LPDBR LNDBR LTDBR LCDBR SQEBR SQDBR SQXBR MEEBR KDBR
       *         *       CDBR  ADB R  SDBR  MDBR  DDBR  LDER  LXDR  LXER  SQXR
         *         *       MEER  LPXBR LNXBR LTXBR LCXBR LEDBR LDXBR LEXBR KXBR
         *         *       CXBR  AXBR  SXBR  MXBR  DXBR  THDER THDR  LPXR  LNXR
         *                     \*       LTXR  LCXR  LXR   LEXR  FIXR  CXR   FIE
R  FIDR  CEFBR         *         *       CDFBR CXFBR CEFR  CDFR  CXFR
                       *         *
                       *         *   SPECIAL OPCFLAG1 FLAGS INCLUDE: X'80' (TRE,
 CKSM), X'01'            *         * SPECIAL OPCFLAG2 FLAGS INCLUDE: X'80', X'10
', X'04', X'02'          *         *********************************************
**************************         RRE1OPND ST      R9,RRE19                SAVE
 RETURN ADDRESS                               CLI   INSTTEXT+2,0            3RD
BYTE IS ALL ZEROS?                            BZ    RRE1CKFG                YES
                                     RRE1NOTI MVI   ISINST,0                  NO
, NOT AN INSTRUCTION                            B     RRE1XIT                 EX
IT                                     RRE1CKFG CLC   INSTFLG1(2),XZROS       AN
Y FLAGS?                                        BE    RRE1CKST                N
 O                                       RRE1F180 TM    INSTFLG1,X'80'
UNUSUAL INSTRUCTION TESTS?                        BZ    RRE1F101
NO                                                CLC   INSTMNEM(3),=CL3'TRE'
THIS IS TRE?                                        BNE   RRE1CKSM
  NO                                                TM    INSTTEXT+3,X'F0'
  R1 IS ZERO?                                       BZ    RRE1NOTI
  YES, NOT INSTRUCTION                                TM    INSTTEXT+3,X'0F'
    R2 IS ZERO?                                       BZ    RRE1NOTI
    YES, NOT INSTRUCTION                              B     RRE1F101
    NO, CONTINUE                               RRE1CKSM IC    R1,INSTTEXT+3
      CKSM: PICK UP .R1.R2.                             LA    R1,1(R1)
      COMPUTE .R2.+1                                    STC   R1,DBLWD
      SAVE .R1.R2+1.                                    NI      DBLWD,X'0F'
        CLEAR ALL BUT R2+1                                PACK  DBLWD+1(1),INSTT
EXT+3(1) INVERT .R1.R2.                                   NI    DBLWD+1,X'0F'
        CLEAR ALL BUT R1                                  CLC   DBLWD(1),D  BLWD
+1        R1 = R2+1?                                        BE    RRE1NOTI
          YES, NOT AN INSTRUCTION                  RRE1F101 TM    INSTFLG1,X'01'
          R2 MUST BE FP PAIR START?                         BZ    RRE1F280
            NO                                                MVC   DBLWD(1),INS
TTEXT+3     MOVE .R1.R2.                                      NI    DBLWD,X'0F'
            CLEAR ALL BUT R2                                  TRT   DBLWD(1),FLT
PTPR        VALID FLOATI  NG POINT PAIR?                        BNZ   RRE1NOTI
              NO, NOT AN INSTRUCTION                   RRE1F280 TM    INSTFLG2,X
'80'          R1 MUST BE FP PAIR START?                         BZ    RRE1F210
              NO                       +                          PACK  DBLWD(1)
,INSTTEXT+3(1)  PACK .R1.R2. INTO DBL  WD                           NI    DBLWD,
X'0F'             CLEAR ALL BUT R1                                  TRT   DBLWD(
1),FLTPTPR        VALID FLOATING POINT PAIR?                        BNZ   RRE1NO
TI                NO                                         RRE1F210 TM    INST
FLG2,X'10'          R1 & R2 MUST DIFFER?                              BZ    RRE1
F204                NO                                                PACK  DBLW
D(1),INSTTEXT+3(1)  INVERT .R1.R2.                                      CLC   IN
STTEXT+3(1),DBLWD     .R1.R2. = .R2.R1.?                                BE    RR
E1NOTI                YES, NOT AN INSTRUCTION                  RRE1F204 TM    IN
STFLG2,X'04'          R2 MUST BE EVEN?                                  BZ    RR
E1  F202                NO                                                TM
INSTTEXT+3,X'01'        IS R2 EVEN?                                       BO
RRE1NOTI                NO, NOT AN INSTRUCTION                   RRE1F202 TM
INSTFLG2,X'02'            R1 MUST BE EVEN?                                  BZ
  RRE1CKST                NO                                                TM
  INSTTEXT+3,X'10'        IS R2 EVEN?                                       BO
  RRE1NOTI                NO, NO  T AN INSTRUCTION                   RRE1CKST CL
I   STAGE,1                 THIS STAGE 1?                                     BE
    RRE1XIT                 YES, NOTHING TO DO HERE                           IC
    R1,INSTTEXT+3           PICK UP R1 OPERAND
SRL   R1,4                    AND MOVE TO LOW NYBBLE
BAS   R9,REGOPNDS             GO FORMAT THE R1 REGISTER
MVI   0(R8),C','              SEPARATE OPERANDS
  LA    R8,1(R8)                STEP PAST THE COMMA
  IC    R1,INSTTEXT+3           PICK UP R2 OPERAND
  BAS   R9,REGOPNDS             GO FORMAT THE R2 REGISTER                RRE1  X
IT  L     R9,RRE19                GET RETURN ADDRESS
    BR    R9                      EXIT                                     RRE19
    DC    A(0)                    RETURN ADDRESS                           *****
************ ******************************************************         *
            RRE-FORMAT INSTRUCTION, TYPE 2 OPERANDS                *         * T
HESE 4-BYTE INSTRUCTIONS HAVE 2-BYTE OP-CODES WHOSE FIRST BYTE IS  *
         \* X'B2' OR X'B3'
 *         *
 *         * FMT  NBR  MEMORY CONTENT                        OPERAND CODING
 *         *   RRE2  07  .OC.OC.OC.OC.--.--.R1.--.             R1
   *         *
   *         * RRE-FORMAT TYPE 2 INSTRUCTIONS INCLUDE:
   *         *       IPM     IAC   SSAR  EPAR  ESAR  MSTA  LZER  LZDR  LZXR
     *         *       SFPC  EFPC
     *         *
     *         * SPECIAL OPCFLAG1 FLAGS IN  CLUDE: NONE
       *         * SPECIAL OPCFLAG2 FLAGS INCLUDE: X'80', X'02'
       *         ***************************************************************
********         RRE2OPND ST    R9,RRE29                S  AVE RETURN ADDRESS
                            CLI   INSTTEXT+2,0            BYTE 3 IS ALL ZEROS?
                            BNZ   RRE2NOTI                NO, NOT AN INSTRUCTION
                            TM    INSTTEXT+3,X'0F'        LAST NYBBLE IS   ALL Z
EROS?                         BZ    RRE2CKFG                YES, CONTINUE
                     RRE2NOTI MVI   ISINST,0                SHOW NOT AN INSTRUCT
ION                           B     RRE2XIT                 AND EXIT
                       RRE2CKFG CLI   INSTFLG2,0              ANY FLAGS?
                                BE    RRE2CKST                NO
                       RRE2F280 TM    INSTFLG2,X'80'          R1 MUST BE FP PAIR
 START?                           BZ    RRE2F202                NO
                                  PACK  DBLWD(1),INSTTEXT+3(1)  PACK .R1.R2. INT
O DBLWD                           NI    DBLWD,X'0F'             CLEAR ALL BUT R1
                                  TRT     DBLWD(1),FLTPTPR        VALID FLOATING
 POINT PAIR?                        BNZ   RRE2NOTI                NO
                           RRE2F202 TM    INSTFLG2,X'02'          R1 MUST BE EVE
N?                                  BZ    RRE2CKST                  NO
                                      TM    INSTTEXT+3,X'10'        IS R2 EVEN?
                                      BO    RRE2NOTI                NO, NOT AN I
NSTRUCTION                   RRE2CKST CLI   STAGE,1                   THIS STAGE
 1?                                     BE    RRE2XIT                 YES, NOTHI
NG TO DO HERE                  RRE2R1   IC    R1,INSTTEXT+3           PICK UP TH
E R1 OPERAND                            SRL   R1,4                    AND SHIFT
TO   LOW NYBBLE                           BAS   R9,REGOPNDS             GO FORMA
T THE R1 OPERAND                 RRE2XIT  L     R9,RRE29                GET RETU
RN ADDRESS                                BR    R9                      EXIT
                 +                 RRE29    DC    A(0)                    RETURN
 ADDRESS                             *******************************************
****************************         *              RRE-FORMAT INSTRUCTION, TYPE
 3 OPERANDS                *         * THESE 4-BYTE INSTRUCTIONS HAVE 2-BYTE OP-
CODES WHOSE FIRST BYTE IS  *           * X'B2' OR X'B3'
                             *         *
                             *         * FMT  NBR  MEMORY CONTENT
         OPERAND CODING      *         * RRE3    08  .OC.OC.OC.OC.--.--.--.--.
           (NONE)              *         *
                               *         * RRE-FORMAT TYPE 3 INSTRUCTIONS INCLUD
E: PALB                        *         *
                                 *         * SPECIAL OPCFLAG1 FLAGS INCLUDE: NON
E                                *         * SPECIAL OPCFLAG2 FLAGS INCLUDE: NON
E                                *         ********************************  ***
************************************         RRE3OPND ST    R9,RRE39
    SAVE RETURN ADDRESS                               CLC   INSTTEXT+2(2),XZROS
    BYTES 2-3 ARE ALL ZEROS?                          BZ    RR3XIT
    YES                                                 MVI   ISINST,0
      NO, SHOW NOT AN INSTRUCTION              RRE3XIT  L     R9,RRE39
      GET RETURN ADDRESS                                BR    R9
      EXIT                                       RRE39    DC    A(0)
        RETURN ADDRESS                           *******************************
****************************************         *              RRF-FORMAT INSTR
UCTION, TYPE 1 OPERANDS                *           * THESE 4-BYTE INSTRUCTIONS H
AVE 2-BYTE OP-CODES WHOSE FIRST BYTE IS  *         * X'B3'.
                                         *         *
                                         *         * FM  T  NBR  MEMORY CONTENT
                       OPERAND CODING      *         * RRF1  09  .OC.OC.OC.OC.R1
.--.R3.R2.             R1,R3,R2            *         *
                                           *         * RRF-FORMAT TYPE  1 INSTR
UCTIONS INCLUDE:                             *         *        MAEBR MSEBR MADB
R MSDBR                                      *         *
                                             *                     \* SPECIAL O
PCFLAG1 FLAGS INCLUDE: NONE                                *         * SPECIAL O
PCFLAG2 FLAGS INCLUDE: NONE                                *         ***********
************************************************************         R  RF1OPND
ST    R9,RRF19                SAVE RETURN ADDRESS
TM    INSTTEXT+2,X'0F'        6TH NYBBLE IS ALL ZEROS?
BZ    RRF1CKST                YES, CONTINUE
MVI     ISINST,0                NO, SHOW NOT AN INSTRUCTION
  B     RRF1XIT                 AND EXIT                                 RRF1CKS
T CLI   STAGE,1                 THIS STAGE 1?
  BE    RRF1XIT                   YES, NOTHING TO DO HERE
    IC    R1,INSTTEXT+2           PICK UP THE R1 OPERAND
    SRL   R1,4                    SHIFT IT TO THE LOW NYBBLE
    BAS   R9,REGOPNDS             G  O FORMAT THE R1 OPERAND
      MVI   0(R8),C','              SEPARATE OPERANDS
      LA    R8,1(R8)                STEP PAST THE COMMA
      IC    R1,INSTTEXT+3           PICK UP THE R3   OPERAND
        SRL   R1,4                    SHIFT IT TO THE LOW NYBBLE
        BAS   R9,REGOPNDS             GO FORMAT THE R3 OPERAND
        MVI   0(R8),C','              SEPARATE OPERANDS
          LA    R8,1(R8)                STEP PAST THE COMMA
          IC    R1,INSTTEXT+2           PICK UP THE R2 OPERAND
          BAS   R9,REGOPNDS             GO FORMAT THE R2 OPERAND
   RRF1XIT  L     R9,RRF19                GET RETURN ADDRESS
            BR    R9                      EXIT
   RRF19    DC    A(0)                    RETURN ADDRESS
   ************  ***********************************************************
     *              RRF-FORMAT INSTRUCTION, TYPE 2 OPERANDS                *
     * THESE 4-BYTE INSTRUCTIONS HAVE 2-BYTE OP-CODES WHOSE FIRST BYTE IS  *
     * X'B3'.                                                                *
       *                                                                     *
       * FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *
       * RRF2  0A  .OC.OC.OC.OC.M3.--.R1.R2.               R1,M3,R2            *
         *                                                                     *
         * RRF-FORMAT TYPE 2 INSTRUCTIONS INCLUDE:                             *
         *        FIXBR TBEDR TBDR  FIEBR FIDBR CFEBR CFDBR   CFXBR CFER
 *         *        CFDR  CFXR
 *         *
 *         * SPECIAL OPCFLAG1 FLAGS INCLUDE: X'01'                         +
   *         * SPECIAL OPCFLAG2 FLAGS INCLUDE: X'80', X'40'
     *         *****************************************************************
******         RRF2OPND ST    R9,RRF29                SAVE RETURN ADDRESS
                        TM    INSTTEXT+2,X'0F'        6TH NYBBLE IS ALL ZEROS?
                          BNZ   RRF2NOTI                NO, NOT AN INSTRUCTION
                          CLC   INSTFLG1(2),XZROS       ANY FLAGS?
                          BE    RRF2CKST                NO
                 RRF2F1  01 TM    INSTFLG1,X'01'          R2 MUST BE FP PAIR STA
RT?                         BZ    RRF2F280                NO
                            MVC   DBLWD(1),INSTTEXT+3     MOVE .R1.R2.
                            NI    DBLW  D,X'0F'             CLEAR ALL BUT R2
                              TRT   DBLWD(1),FLTPTPR        VALID FLOATING POINT
 PAIR?                        BNZ   RRF2NOTI                NO, NOT AN INSTRUCTI
ON                   RRF2F280 TM    INSTFLG2,X'80'            R1 MUST BE FP PAIR
 START?                         BZ    RRF2F240                NO
                                PACK  DBLWD(1),INSTTEXT+3(1)  PACK .R1.R2. INTO
DBLWD                           NI    DBLWD,X'0F'             CLEAR   ALL BUT R1
                                  TRT   DBLWD(1),FLTPTPR        VALID FLOATING P
OINT PAIR?                        BNZ   RRF2NOTI                NO
                         RRF2F240 TM    INSTFLG2,X'40'          M3 MUST BE 0,1,4
,5,  6,7?                           BZ    RRF2CKST                NO
                                    PACK  DBLWD(1),INSTTEXT+2(1)  PACK .M3.--. I
NTO DBLWD                           NI    DBLWD,X'0F'             CLEAR ALL BUT
M3                                    TRT   DBLWD(1),VALIDM3        VALID M3 MAS
K VALUE?                              BZ    RRF2CKST                YES
                             RRF2NOTI MVI   ISINST,0                NO, SHOW NOT
 AN INSTRUCTION                         B     RRF2XIT                 AND EXIT
                               RRF2CKST CLI   STAGE,1                 THIS STAGE
 1?                                     BE    RRF2XIT                 YES, NOTHI
NG TO DO HERE                           IC    R1 ,INSTTEXT+3           PICK UP
R1R2                                      SRL   R1,4                    SHIFT OU
T R2                                      BAS   R9,REGOPNDS             GO FORMA
T R1 OPERAND                                 \         MVI   0(R8),C','
      SEPARATE OPERANDS                                 LA    R8,1(R8)
      STEP PAST COMMA                                   SR    R1,R1
      CLEAR FOR INSERT                                    IC    R1,INSTTEXT+2
        PICK UP M3--                                      SRL   R1,4
        SHIFT OUT --                                      BAS   R9,DECMOPND
        GO FORMAT M3 OPERAND                              MVI     0(R8),C','
          SEPARATE OPERANDS                                 LA    R8,1(R8)
          STEP PAST COMMA                                   IC    R1,INSTTEXT+3
          PICK UP R1R2                                      BAS   R9,REGOPNDS
            GO FORMAT R2 OPERAND                     RRF2XIT  L     R9,RRF29
            GET RETURN ADDRESS                                BR    R9
            EXIT                                     RRF29    DC    A(0)
            R  ETURN ADDRESS                           *************************
**********************************************         *              RRF-FORMAT
 INSTRUCTION, TYPE 3 OPERANDS                *         * THESE 4-BYTE INSTRUCTIO
NS HAVE 2-BYTE OP-CODES WHOS  E FIRST BYTE IS  *         * X'B3'.
                                               *         *
                                               *         * FMT  NBR  MEMORY CONT
ENT                        OPERAND CODING        *         * RRF3  0B  .OC.OC.OC
.OC.R3.M4.R1.R2.             R1,R3,R2,M4         *         *
                                                 *         * RRF-FORMAT TYPE 3 I
NSTRUCTIONS INCLUDE:  DIEBR DIDBR                *           *
                                                   *         * SPECIAL OPCFLAG1
FLAGS INCLUDE: X'80' (DIEBR, DIDBR)                *         * SPECIAL OPCFLAG2
FLAGS INCLUDE: X'40'                               *         ************  *****
****************************************************           RRF3OPND ST    R9
,RRF39                SAVE RETURN ADDRESS                               CLC   IN
STFLG1(2),XZROS       ANY FLAGS SET?                                    BE    RR
F3CKST                  NO                                                TM
INSTFLG1,X'80'          DIEBR OR DIDBR INSTRUCTION?                       BZ
RRF3F240                NO                                                PACK
DBLWD(1),INSTTEXT+2(1)    INVERT .R3.M4.                                    NI
  DBLWD,X'0F'             CLEAR ALL BUT R3                                  PACK
  DBLWD+1(1),INSTTEXT+3(1) INVERT .R1.R2.                                   NI
  DBLWD+1,X'0F'           CLEAR ALL BU  T R1                                  MV
C   DBLWD+2(1),INSTTEXT+3   MOVE .R1.R2.                                      NI
    DBLWD+2,X'0F'           CLEAR ALL BUT R2                                  CL
C   DBLWD(1),DBLWD+1        R3=R1?                   +
BE    RRF3NOTI                YES, NOT AN INSTRUCTI  ON
  CLC   DBLWD(1),DBLWD+2        R3=R2?
  BE    RRF3NOTI                YES, NOT AN INSTRUCTION
  CLC   DBLWD+1(1),DBLWD+2      R1=R2?
    BE    RRF3NOTI                YES, NOT AN INSTRUCTION                  RRF3F
240 TM    INSTFLG2,X'40'          M3 MUST BE 0,1,4,5,6,7?
    BZ    RRF3CKST                NO
      MVC   DBLWD(1),INSTTEXT+2     MOVE .R3.M4. INTO DBLWD
      NI    DBLWD,X'0F'             CLEAR ALL BUT M4
      TRT   DBLWD(1),VALIDM3        VALID M3 MASK VALUE?
      BZ    RRF3  CKST                YES                                      R
RF3NOTI MVI   ISINST,0                SHOW NOT AN INSTRUCTION
        B     RRF3XIT                 AND EXIT                                 R
RF3CKST CLI   STAGE,1                   THIS STAGE 1?
          BE    RRF3XIT                 YES, NOTHING TO DO HERE
          IC    R1,INSTTEXT+3           PICK UP R1R2
          SRL   R1,4                    SHIFT   OUT R2
            BAS   R9,REGOPNDS             GO FORMAT R1 OPERAND
            MVI   0(R8),C','              SEPARATE OPERANDS
            LA    R8,1(R8)                STEP PAST THE COMMA
              IC    R1,INSTTEXT+2           PICK UP R3M4
              SRL   R1,4                    SHIFT OUT M4
              BAS   R9,REGOPNDS             GO FORMAT R3 OPERAND
                MVI   0(R8),C','              SEPARATE OPERANDS
                LA    R8,1(R8)                STEP PAST THE COMMA
                IC    R1,INSTTEXT+3           PICK UP R1R2
                  BAS   R9,REGOPNDS             GO FORMAT R2 OPERAND
                  MVI   0(R8),C','              SEPARATE OPERANDS
                  LA    R8,1(R8)                STEP PAST THE COMMA
                  IC    R1 ,INSTTEXT+2           PICK UP R3M4
                    N     R1,ZEROF                ERASE ALL BUT M4
                    BAS   R9,DECMOPND             GO FORMAT M4 OPERAND
                       \RRF3XIT  L     R9,RRF39                GET RETURN ADDRE
SS                                BR    R9                      EXIT
                         RRF39    DC    A(0)                    RETURN ADDRESS
                         *  ****************************************************
******************         *                RS-FORMAT INSTRUCTION, TYPE 1 OPERAN
DS               *         * THESE 4-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES
.                *         *
                   *         * FMT  NBR  MEMORY CONTENT                        O
PERAND CODING      *         * RS1   0C  .OC.OC.R1.R3.B2.D2.D2.D2.             R
1,R3,D2(B2)        *         *
                     *         *  RS-FORMAT TYPE 1 INSTRUCTIONS INCLUDE:
                     *         *       BXH   BXLE  STM   LM    TRACE LAM   STAM
 MVCLE CLCLE         *         *       SIGP  STCTL LCTL  CS    CDS
                       *         *
                       *         * SPECIAL OPCFLAG1 FLAGS INCLUDE: X'80' (MVCLE,
 CLCLE)                *         * SPECIAL OPCFLAG2 FLAGS INCLUDE: X'08', X'02'
                         *         *********************************************
**************************         RS1OPND  ST    R9,RS19                 SAVE R
ETURN ADDRESS                      RS1F180  TM    INSTFLG1,X'80'          SPECIA
L TEST REQUIRED?                              BZ    RS1F208                 NO
                                              PACK  DBLWD(1),INSTTEXT+2(1)  INVE
RT .B2.D2.                                    NI    DBLWD,X'0F'             CLEA
R ALL BUT B2                                    IC    R1,INSTTEXT+1           PI
CK UP .R1.R3.                                   STC   R1,DBLWD+1              SA
VE R1R3                                         NI    DBLWD+1,X'0F'           CL
EAR ALL BUT R3                                  LA      R1,1(R1)
COMPUTE R3+1                                      STC   R1,DBLWD+2
SAVE .R1.R3+1.                                    NI    DBLWD+2,X'0F'
CLEAR ALL BUT R3+1                                CLC   DBLWD(1),D  BLWD+1
  B2 = R3?                                          BE    RS1NOTI
  YES, NOT AN INSTRUCTION                           CLC   DBLWD(1),DBLWD+2
  B2 = R3+1?                                        BE    RS1NOTI
    YES, NOT AN INSTRUCTION                           PACK  DBLWD+1(1),INSTTEXT+
1(1) INVERT .R1.R3.                                   NI    DBLWD+1,X'0F'
    CLEAR ALL BUT R1                                  IC    R1,DBLWD+1
    PICK UP R1                                          LA    R1,1(R1)
      COMPUTE R1+1                                      STC   R1,DBLWD+2
      SAVE R1+1                                         CLC   DBLWD(1),DBLWD+1
      B2 = R1?                 +                          BE    RS1NOTI
        YES, NOT AN INSTRUCTI  ON                           CLC   DBLWD(1),DBLWD
+2        B2 = R1+1?                                        BE    RS1NOTI
          YES, NOT AN INSTRUCTION                  RS1F208  TM    INSTFLG2,X'08'
          R3 MUST BE EVEN NUMBERED?                           BZ    RS1F202
            NO                                                TM    INSTTEXT+1,X
'01'        IS R3 EVEN?                                       BO    RS1NOTI
            NO, NOT AN INSTRUCTION                   RS1F20  2  TM    INSTFLG2,X
'02'          R1 MUST BE EVEN NUMBERED?                         BZ    RS1CKSTG
              NO                                                TM    INSTTEXT+1
,X'10'        IS R1 EVEN?                                       BZ    RS1C  KSTG
                YES                                      RS1NOTI  MVI   ISINST,0
                SHOW NOT AN INSTRUCTION                           B     RS1XIT
                AND EXIT                                 RS1CKSTG CLI   STAGE,1
                  THIS STAGE 1?                                     BE    RS1BDO
P                 YES, SKIP REGISTER OPERANDS                       IC    R1,INS
TTEXT+1           PICK UP R1R3                                      SRL   R1,4
                  SHIFT   OUT R3                                      BAS   R9,R
EGOPNDS             GO FORMAT THE R1 OPERAND                          MVI   0(R8
),C','              SEPARATE OPERANDS                                 LA    R8,1
(R8)                STEP PAST THE COMMA                                 IC    R1
,INSTTEXT+1           PICK UP R1R3                                      BAS   R9
,REGOPNDS             GO FORMAT THE R3 OPERAND                          MVI   0(
R8),C','              SEPARATE OPERANDS                                   LA
R8,1(R8)                STEP PAST THE COMMA                      RS1BDOP  ICM
R1,3,INSTTEXT+2         PICK UP THE BASE-DISPL ADDR                       MVI
LENGTH,0                SET LENGTH TO ZERO (N/A)                            BAS
  R9,BDOPND               GO FORMAT THE BASE-DISPL ADDR            RS1XIT   L
  R9,RS19                 GET RETURN ADDRESS                                BR
  R9                      EXIT                                     RS19     DC
  A( 0)                    RETURN ADDRESS                           ***********
************************************************************         *
      RS-FORMAT INSTRUCTION, TYPE 2 OPERANDS               *                
  \* THESE 4-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *
   *                                                                     *
   * FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *
   *   RS2   0D  .OC.OC.R1.--.B2.D2.D2.D2.             R1,D2(B2)           *
     *                                                                     *
     *  RS-FORMAT TYPE 2 INSTRUCTIONS INCLUDE:                             *
     *       SRL     SLL   SRA   SLA   SRDL  SLDL  SRDA  SLDA  CLM           *
       *                                                                     *
       * SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *
       * SPECIAL OPCFLAG2 FLAGS IN  CLUDE: X'20', X'02'                        *
         ***********************************************************************
         RS2OPND  ST    R9,RS29                 SAVE RETURN ADDRESS
                  TM    INSTTEXT+1,X'0F'        B  ITS 13-16 ARE ZEROS?
                    BNZ   RS2NOTI                 NO, NOT AN INSTRUCTION
                    CLI   INSTFLG2,X'00'          ANY FLAGS?
                    BE    RS2CKSTG                NO
             RS2F220  TM    INSTFLG2,X'20'          INSTR BITS 16-25 MUST BE ZER
O?                    BZ    RS2F202                 NO
                      CLI   INSTTEXT+2,X'00'        YES, BITS 16-23 ARE ZERO?
                        BNE   RS2NOTI                 NO, NOT AN INSTRUCTION
                        TM    INSTTEXT+3,X'C0'        YES, BITS 24-25 ARE ZERO?
                        BZ    RS2CKSTG                YES
                 RS2F202  TM    INSTFLG2,X'02'          R1 MUST BE EVEN?
                          BZ    RS2CKSTG                NO
                          TM    INSTTEXT+1,X'10'        IS R2 EVEN?
                          BZ      RS2CKSTG                YES
                   RS2NOTI  MVI   ISINST,0                NO, NOT AN INSTRUCTION
                            B     RS2XIT                  EXIT
                   RS2CKSTG CLI   STAGE,1                   THIS STAGE 1?
                              BE    RS2BDOP                 YES, SKIP REGISTER O
PERAND                        IC    R1,INSTTEXT+1           PICK UP R1--
                              SRL   R1,4                      SHIFT OUT THE --
                                BAS   R9,REGOPNDS             GO FORMAT THE R1 R
EGISTER                         MVI   0(R8),C','              SET COMMA DELIMITE
R                               LA    R8,1(R8)                STEP PAST TH  E CO
MMA                      RS2BDOP  ICM   R1,3,INSTTEXT+2         PICK UP THE BASE
-DISPL ADDR                       MVI   LENGTH,0                SET LENGTH TO ZE
RO (N/A)                          BAS   R9,BDOPND               GO FORMAT THE BA
SE-DISPL + ADDR            RS2XIT   L     R9,RS29                 GET RETURN ADD
RESS                                  BR    R9                      EXIT
                             RS29     DC    A(0)                    RETURN ADDRE
SS                           ***************************************************
********************           *                RS-FORMAT INSTRUCTION, TYPE 3 OP
ERANDS               *         * THESE 4-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-C
ODES.                *         *
                     *         * FMT    NBR  MEMORY CONTENT
   OPERAND CODING      *         * RS3   0E  .OC.OC.R1.M3.B2.D2.D2.D2.
   R1,M3,D2(B2)        *         *
                       *         *  RS-FORMAT TYPE 3   INSTRUCTIONS INCLUDE: ICM
, STCM                   *         *
                         *         * SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE
                         *         * SPECIAL OPCFLAG2 FLAGS INCLUDE  : NONE
                           *         *******************************************
****************************         RS3OPND  ST    R9,RS39                 SAVE
 RETURN ADDRESS                               TM    INSTTEXT+1,X'0F'        IS T
HE   M3 MASK = 0?                               BNZ   RS3CKSTG                NO
                                       RS3NOTI  MVI   ISINST,0                YE
S, SHOW NOT AN INSTRUCTION                      B     RS3XIT                  AN
D EXIT                                   RS3CKSTG CLI   STAGE,1
THIS STAGE 1?                                     BE    RS3BDOP
YES, SKIP REG, MASK OPERANDS                      IC    R1,INSTTEXT+1
GET R1 OPERAND                                      SRL   R1,4
    TO LOW NYBBLE                                   BAS   R9,REGOPNDS
  GO FORMAT THE R1 REGISTER                         MVI   0(R8),C','
  SET COMMA DELIMITER                                 LA    R8,1(R8)
    STEP PAST THE COMMA                               IC    R1,INSTTEXT+1
    GET M1 OPERAND                                    N     R1,ZEROF
       IN THE LOW ORDER NYBBLE                        BAS   R9 ,DECMOPND
      GO FORMAT THE M1 FIELD                            MVI   0(R8),C','
      SET COMMA DELIMITER                               LA    R8,1(R8)
      STEP PAST THE COMMA                                  \RS3BDOP  ICM   R1,3
,INSTTEXT+2         PICK UP THE BASE-DISPL ADDR                       MVI   LENG
TH,0                SET LENGTH TO ZERO (N/A)                          BAS   R9,B
DOPND               GO FORMAT THE BASE-DISPL ADDR            R  S3XIT   L     R9
,RS39                 GET RETURN ADDRESS                                BR    R9
                      EXIT                                     RS39     DC    A(
0)                    RETURN ADDRESS                           **************  *
********************************************************         *
  RSI-FORMAT INSTRUCTION OPERANDS                      *         * THESE 4-BYTE
INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *         *
                                                         *         * FMT  NBR  M
EMORY CONTENT                        OPERAND CODING      *         * RSI1  0F  .
OC.OC.R1.R3.I2.I2.I2.I2.             R1,R3,I2            *         *
                                                           *         * RSI-FORMA
T INSTRUCTIONS INCLUDE: BRXH  BRXLE                        *         *
                                                           *         * NOTE: THE
 I2 OPERAND IS THE NUMBER OF HALFWORDS FRO  M THE CURRENT    *         *       L
OCATION TO THE BRANCH TARGET, AND MAY BE POSITIVE OR NEGATIVE*         *
                                                             *         * SPECIAL
 OPCFLAG1 FLAGS INCLUDE: NONE                                  *         * SPECI
AL OPCFLAG2 FLAGS INCLUDE: NONE                                *         *******
****************************************************************         RSIOPND
  ST    R9,RSI9                 SAVE RETURN ADDRESS
    CLI   STAGE,1                 THIS STAGE 1?
    BE    RSIXIT                  YES, NOTHING TO DO HERE
    IC    R1,INSTTEXT+1           GET R1 OPERAND
    SRL     R1,4                      TO LOW NYBBLE
      BAS   R9,REGOPNDS             GO FORMAT THE R1 REGISTER
      MVI   0(R8),C','              SET COMMA DELIMITER
      LA    R8,1(R8)                  STEP PAST THE COMMA
        IC    R1,INSTTEXT+1           GET R3 OPERAND
        BAS   R9,REGOPNDS             GO FORMAT THE R3 FIELD
        MVC   0(3,R8),CMASTRP           MOVE ",*+"
          SR    R1,R1                   CLEAR FOR INSERT
          ICM   R1,3,INSTTEXT+2         PICK UP .I2.I2.I2.I2.
          BNM   RSIRELOP                BRANCH IF NO  T MINUS
            MVI   2(R8),C'-'              CHANGE THE SIGN
            LCR   R1,R1                   MAKE VALUE POSITIVE
   RSIRELOP SLL   R1,1                    DOUBLE FOR HALFWORDS     +
              LA    R8,3(R8)                STEP PAST THE DELIMIT  ER
                BAS   R9,DECMOPND             GO FORMAT THE NBR HALFWORDS
       RSIXIT   L     R9,RSI9                 GET RETURN ADDRESS
                BR    R9                      EXIT
         RSI9     DC    A(0)                    RETURN ADDRESS
         ***********************************************************************
         *                RX-FORMAT INSTRUCTION, TYPE 1 OPERANDS               *
         * THES  E 4-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.
 *         *
 *         * FMT  NBR  MEMORY CONTENT                        OPERAND CODING
 *         * RX1   10  .OC.OC.  R1.X2.B2.D2.D2.D2.             R1,D2(X2,B2)
   *         *
   *         *  RX-FORMAT TYPE 1 INSTRUCTIONS INCLUDE:
   *         *       STH   LA    STC   IC      EX    BAL   BCT   LH    CH
     *         *       AH    SH    MH    BAS   CVD   CVB   ST    LAE   N
     *         *       CL    O     X     L     C     A     S     M     D
     *         *       AL    SL    STD   MXD   LD    CD    A  D    SD    MD
       *         *       DD    AW    SW    STE   MS    LE    CE    AE    SE
       *         *       MDE   DE    AU    SU    LRA
       *         *
         *         * SPECIAL OPCFLAG1 FLAGS INCLUDE: X'80' (EX)
         *         * SPECIAL OPCFLAG2 FLAGS INCLUDE: X'80', X'02'
         *         *************************************************************
**********           RX1OPND  ST    R9,RX19                 SAVE RETURN ADDRESS
                              CLI   INSTFLG2,X'00'          ANY FLAGS?
                              BE    RX1CKSTG                NO
                     RX1F  280  TM    INSTFLG2,X'80'          R1 MUST BE FP PAIR
 START?                         BZ    RX1F202                 NO
                                PACK  DBLWD(1),INSTTEXT+1(1)  PACK .R1.X2. INTO
DBLWD                           NI    DB LWD,X'0F'             CLEAR ALL BUT R1
                                  TRT   DBLWD(1),FLTPTPR        VALID FLOATING P
OINT PAIR?                        BNZ   RX1NOTI                 NO
                                     \RX1F202  TM    INSTFLG2,X'02'          R1
 MUST BE EVEN NUMBERED?                         BZ    RX1CKSTG                NO
                                                TM    INSTTEXT+1,X'10'        IS
 R1 EVEN NUMBERED?                                BZ    RX1CKSTG
YES                                      RX1NOTI  MVI   ISINST,0
SHOW NOT AN INSTRUCTION                           B     RX1XIT
AND EXIT                                 RX1CKSTG CLI     STAGE,1
  THIS STAGE 1?                                     BE    RX1BDOP
  YES, SKIP R1 OPERAND                              CLI   INSTTEXT,X'44'
  THIS AN EX INSTRUCTION?                           BNE   RX1DOR1
    NO                                                TM    INSTTEXT+1,X'F0'
    IS R1 ZERO?                                       BNZ   RX1DOR1
    NO                                                MVI   0(R8),C'0'
    Y  ES, MOVE A ZERO                                  B     RX1SEPA
      CONTINUE                                 RX1DOR1  IC    R1,INSTTEXT+1
      PICK UP R1X2                                      SRL   R1,4
      SHIFT OUT X2                                        BAS   R9,REGOPNDS
        GO FORMAT THE R1 REGISTER                RX1SEPA  MVI   0(R8),C','
        MOVE COMMA SEPARATOR                              LA    R8,1(R8)
        STEP PAST THE COMMA                        RX1BDOP  ICM   R1,7,INSTTEXT+
1         PICK UP M1X2B2D2D2D2 IN R1                        BAS   R9,XBDOPND
          GO FORMAT THE INDEXED OPERAND            RX1XIT   L     R9,RX19
          GET RETURN ADDRESS                                  BR    R9
            EXIT                                     RX19     DC    A(0)
            RETURN ADDRESS                           ***************************
********************************************         *                  RX-FORMA
T INSTRUCTION, TYPE 2 OPERANDS               *         * THESE 4-BYTE INSTRUCTIO
NS HAVE SINGLE-BYTE OP-CODES. ACTUALLY, ONLY *         * THE CONDITIONAL BRANCH
WITH RX-TYPE OPERAND HAS THIS FORMAT.        *         *
                                               *         * FMT  NBR  MEMORY CONT
ENT                        OPERAND CODING      *         * RX2   11  .OC.OC.M1.X
2.B2.D2.D2.D2.             M1,D2(X2,B2)        *         *
                                                 *         *  RX-FORMAT TYPE 2 I
NSTRUCTIONS INCLUDE: BC                          *         *
                                                 *         * SPECIAL OPCFLAG1 FL
AGS INCLUDE: NONE                                  *         * SPECIAL OPCFLAG2
FLAGS INCLUDE: NONE                                *         *******************
****************************************************         RX2OPND  ST    R9,R
X29                 SAVE RETURN ADDRESS      +                          CLI   ST
AGE,1                 THIS STAGE 1?                                       BE
RX2BDOP                 YES, SKIP M1 FORMATTING                           IC
R1,INSTTEXT+1           PICK UP THE MASK VALUE                            SRL
R1,4                    SHIFT TO LOW NYBBLE                                 BAS
  R9,CONDOPND             GO PROCESS CONDITIONAL BRANCH            RX2BDOP  ICM
  R1,7,INSTTEXT+1         PICK UP M1X2B2D2D2D2 IN R1                        BAS
  R9,XBDOPND              GO FORMAT THE INDEXED OPERAND            RX2XIT     L
    R9,RX29                 GET RETURN ADDRESS                                BR
    R9                      EXIT                                     RX29     DC
    A(0)                    RETURN ADDRESS                           ***********
********  ****************************************************         *
        RXE-FORMAT INSTRUCTION OPERANDS                      *         * THESE 4
-BYTE INSTRUCTIONS HAVE 2-BYTE OP-CODES WHOSE FIRST BYTE IS  *         * X'ED'.
                                                               *         *
                                                               *         * FMT
NBR  MEMORY CONTENT                        OPERAND CODING      *         * RXE1
 12  .OC.OC.R1.X2.B2.D2.D2.D2.--.--.OC  .OC. R1,D2(X2,B2)        *         *
                                                                 *         *  RX
E-FORMAT INSTRUCTIONS INCLUDE:                                   *         *
   LDEB  LXDB  LXEB  MXDB  KEB   CEB   AEB   SEB   MD  EB          *         *
     DEB   TCEB  TCDB  TCXB  SQEB  SQDB  MEEB  KDB   CDB           *         *
     ADB   SDB   MDB   DDB   LDE   LXD   LXE   SQE   SQD           *         *
     MEE                                                           *           *
                                                                     *         *
 SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *         *
 SPECIAL OPCFLAG2 FLAGS INCLUDE: X'80'                               *         *
***  *******************************************************************
 RXEOPND  ST    R9,RXE9                 SAVE RETURN ADDRESS
          CLI   INSTTEXT+4,0            BYTE 5 IS ALL ZEROS?
          BNZ   RX ENOTI                 NO, NOT AN INSTRUCTION
   RXEF280  TM    INSTFLG2,X'80'          R1 MUST BE FP PAIR START?
            BZ    RXECKSTG                NO
               \         PACK  DBLWD(1),INSTTEXT+1(1)  INVERT .R1.X2.
                          NI    DBLWD,X'0F'             CLEAR ALL BUT R1
                          TRT   DBLWD(1),FLTPTPR        VALID FLOATING POINT PAI
R?                          BZ    RXECKSTG                YES
                   RXENOTI  MVI   ISINST,0                NO, NOT AN INSTRUCTION
                            B     RXEXIT                  EXIT
                   RXECKSTG CLI     STAGE,1                 THIS STAGE 1?
                              BE    RXEBDOP                 YES, SKIP R1 FORMATT
ING                           IC    R1,INSTTEXT+1           GET R1 OPERAND
                              SRL   R1,4                        TO LOW NYBBLE
                                BAS   R9,REGOPNDS             GO FORMAT THE R1 R
EGISTER                         MVI   0(R8),C','              SET COMMA DELIMITE
R                               LA    R8,1(R8)                S  TEP PAST THE CO
MMA                      RXEBDOP  ICM   R1,7,INSTTEXT+1         GET X-B-D ADDRES
S                                 BAS   R9,XBDOPND              GO FORMAT THE RX
 ADDRESS                 RXEXIT   L     R9,RXE9                 GET RETURN ADD
RESS                                BR    R9                      EXIT
                           RXE9     DC    A(0)                    RETURN ADDRESS
                           *****************************************************
*************  *****         *   OPERANDS FOR RXF-FORMAT INSTRUCTIONS
                   *         * THESE 4-BYTE INSTRUCTIONS HAVE 2-BYTE OP-CODES WH
OSE FIRST BYTE IS  *         * X'ED'.
                   *           *
                     *         * FMT  NBR  MEMORY CONTENT
 OPERAND CODING      *         * RXF1  13  .OC.OC.R3.X2.B2.D2.D2.D2.R1.--.OC.OC.
 R1,R3,D2(X2,B2)     *         *
                       *         *  RXF-FORMAT INSTRUCTIONS INCLUDE: MAEB  MSEB
MADB   MSDB            *         *
                       *         * SPECIAL OPCFLAG1 FLAGS   INCLUDE: NONE
                         *         * SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE
                         *         *********************************************
**************************         RXFOPND  ST    R9,RXF9                   SAVE
 RETURN ADDRESS                               TM    INSTTEXT+4,X'0F'        10TH
 NYBBLE IS ALL ZEROS?                         BZ    RXFCKSTG                YES,
 CONTINUE                                     MVI   ISINST,0                NO,
NOT AN I  NSTRUCTION                            B     RXFXIT                  EX
IT                                     RXFCKSTG CLI   STAGE,1                 TH
IS STAGE 1?                                     BE    RXFBDOP                 YE
S, SKIP FORMATTING R1 A+ ND R3                    IC    R1,INSTTEXT+4
GET R1 OPERAND                                      SRL   R1,4
    TO LOW NYBBLE                                   BAS   R9,REGOPNDS
  GO FORMAT THE R1 REGISTER                         MVI   0(R8),C','
  SET COMMA DELIMITER                                 LA    R8,1(R8)
    STEP PAST THE COMMA                               IC    R1,INSTTEXT+1
    GET R3 OPERAND                                    SRL   R1,4
      TO LOW NYBBLE                                     BAS   R9,REGOPNDS
      GO FORMAT THE R3 REGISTER                         MVI   0(R8),C','
      SET COMMA DELIMITER                               LA    R8,1(R8)
      STEP PAST THE COMMA                      RXFBDOP  ICM   R1,7  ,INSTTEXT+1
        GET X-B-D ADDRESS                                 BAS   R9,XBDOPND
        GO FORMAT THE RX ADDRESS                 RXFXIT   L     R9,RXF9
        GET RETURN ADDRESS                                BR    R9
          EXIT                                     RXF9     DC    A(0)
          RETURN ADDRESS                           *****************************
******************************************         *                S-FORMAT INS
TRUCTION, TYPE 1   OPERANDS                *         * THESE 4-BYTE INSTRUCTIONS
 HAVE SINGLE-BYTE OP-CODES.                *         *
                                           *         * FMT  NBR  MEMORY CONTENT
                       OPERAND   CODING      *         * S1    14  .OC.OC.--.--.
B2.D2.D2.D2.             D2(B2)              *         *
                                             *         *  S-FORMAT TYPE 1 INSTRU
CTIONS INCLUDE:                              *           *       SSM   LPSW  TS
                                               *         *
                                               *         * SPECIAL OPCFLAG1 FLAG
S INCLUDE: NONE                                *         * SP  ECIAL OPCFLAG2 FL
AGS INCLUDE: NONE                                *         *********************
**************************************************         S1OPND   ST    R9,S19
                  SAVE RETURN ADDRESS                               CLI   IN ST
TEXT+1,0            SECOND BYTE IS ALL ZEROS?                         BE    S1BD
OP                  YES, CONTINUE                                     MVI   ISIN
ST,0                NO, SHOW NOT AN INSTRUCTION                          \
    B     S1XIT                   AND EXIT                                 S1BDO
P   ICM   R1,3,INSTTEXT+2         PICK UP B2D2D2D2
    MVI   LENGTH,0                SHOW LENGTH N/A
      BAS   R9,BDOPND               GO FORMAT THE BASE-DISPL ADDR            S1X
IT    L     R9,S19                  GET RETURN ADDRESS
      BR    R9                      EXIT                                     S19
      DC      A(0)                    RETURN ADDRESS                           *
**********************************************************************         *
                S-FORMAT INSTRUCTION, TYPE 2 OPERANDS                *         *
 THESE 4-BYTE INSTRUCTIONS   HAVE 2-BYTE OP-CODES WHOSE FIRST BYTE IS  *
 * X'B2'.                                                              *
 *                                                                     *
 * FMT  NBR  MEMORY CONTENT                          OPERAND CODING      *
   * S2    15  .OC.OC.OC.OC.--.--.--.--.             (NONE)              *
   *                                                                     *
   *  S-FORMAT TYPE 2 INSTRUCTIONS INCLUDE:                                *
     *       IPK   PTLB  CSCH  HSCH  SAL   RSCH  RCHP  SCHM                *
     *                                                                     *
     * SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                  *
       * SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *
       ***********************************************************************
       S2OPND   ST    R9,S29                  SAVE RETURN ADDRESS
                  CLC   INSTTEXT+2(2),XZROS     LAST TWO BYTES ARE ALL ZEROS?
                  BE    S2XIT                   YES, NOTHING ELSE TO DO
                  MVI   ISINST,0                NO, NOT AN INSTRUCTION
         S2XIT    L       R9,S29                  GET RETURN ADDRESS
                    BR    R9                      EXIT
           S29      DC    A(0)                    RETURN ADDRESS
           *************************  ******************************************
****         *                S-FORMAT INSTRUCTION, TYPE 3 OPERANDS
   *         * THESE 4-BYTE INSTRUCTIONS HAVE TWO-BYTE OP-CODES.
   *         *
     *         * FMT  NBR  MEMORY CONTENT                        OPERAND CODING
     *         * S1    14  .OC.OC.OC.OC.B2.D2.D2.D2.             D2(B2)
     *         *
       *         *  S-FORMAT TYPE 3 INSTRUCTIONS INCLUDE:
       *         *       STIDP SCK   STCK  SCKC  STCKC SPT   STPT  SPKA  SPX
       *         *       STPX  STAP  PC    SAC   CFC   MSCH  SSCH  STSCH TSCH
 +       *         *       TPI   STCRW STCPS RP    STCKE SACF  STSI  SRNM  STFP
 C         *         *       LFPC  TRAP4
           *         *
           *         * SPECIAL OPCFLAG1 FLAGS INCLUDE: X'80' (CFC)
           *           * SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE
             *         *********************************************************
**************         S3OPND   ST    R9,S39                  SAVE RETURN ADDRES
S                                 TM    INSTFLG1,X'80'          THIS THE CFC INS
TRUCTION?                         BZ    S3FORMAT                NO
                                  PACK  DBLWD(1),INSTTEXT+2(1)  INVERT .B2.D2.
                                  NI    DBLW  D,X'0F'             CLEAR ALL BUT
B2                                  CLI   DBLWD,X'02'             B2=X'02'?
                                    BNE   S3FORMAT                NO, CONTINUE
                           S3NOTI   MVI   ISINST,0                  SHOW NOT AN
INSTRUCTION                           B     S3XIT                   AND EXIT
                             S3FORMAT ICM   R1,3,INSTTEXT+2         PICK UP B2D2
D2D2                                  MVI   LENGTH,0                SHOW L  ENGT
H N/A                                   BAS   R9,BDOPND               GO FORMAT
THE BASE-DISPL ADDR            S3XIT    L     R9,S39                  GET RETURN
 ADDRESS                                BR    R9                      EXIT
                                 S39      DC    A(0)                    RETURN A
DDRESS                           ***********************************************
************************         *                SI-FORMAT INSTRUCTION OPERANDS
                       *           * THESE 4-BYTE INSTRUCTIONS HAVE SINGLE-BYTE
OP-CODES.                *         *
                         *         * FMT  NBR  MEMORY CONTENT
     OPERAND CODING      *         * SI  1   16  .OC.OC.I2.I2.B1.D1.D1.D1.
       D1(B1),I2           *         *
                           *         *  SI-FORMAT INSTRUCTIONS INCLUDE:
                           *         *       TM    MVI    NI    CLI   OI    XI
   STNSM STOSM MC            *         *
                             *         * SPECIAL OPCFLAG1 FLAGS INCLUDE: X'80' (
MC)                          *                     \* SPECIAL OPCFLAG2 FLAGS IN
CLUDE: NONE                                *         ***************************
********************************************         SIOPND   ST    R9,SI9
            SAVE RETURN ADDRESS                                 TM    INSTFLG1,X
'80'          THIS THE MC INSTRUCTION?                          BZ    SIFORMAT
              NO, CONTINUE                                      TM    INSTTEXT+1
,X'F0'        BITS 8-11 ARE ZERO?                               BZ      SIFORMAT
                YES                                      SINOTI   MVI   ISINST,0
                NO, SHOW NOT AN INSTRUCTION                       B     SIXIT
                AND EXIT                                 SIFORMAT ICM   R1,3,INS
TTEX  T+2         PICK UP B1D1D1D1                                  MVI   LENGTH
,0                SHOW LENGTH IS N/A                                BAS   R9,BDO
PND               GO FORMAT BASE-DISPL ADDRESS                      CLI   STAGE,
1                 T  HIS STAGE 1?                                     BE    SIXI
T                   YES, SKIP IMMEDIATE OPND FORMAT                   MVC   0(3,
R8),CMAXQT          FOLLOW WITH ",X'"                                 UNPK  3(3,
R8),INSTTEXT+1(2)   UNPACK I2I2                                         TR    3(
2,R8),TRCHAR-C'0'     MAKE PRINTABLE                                    MVI   5(
R8),C''''             MOVE ENDING APOSTROPHE                   SIXIT    L     R9
,SI9                  GET RETURN ADDRESS                                  BR
R9                      EXIT                                     SI9      DC
A(0)                    RETURN ADDRESS                           ***************
********************************************************           *
  SS-FORMAT INSTRUCTION, TYPE 1 OPERANDS                 *         * THESE 6-BYT
E INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *         *
                                                         *         * FMT  NBR
 MEMORY CONTENT                        OPERAND CODING      *         * SS1   17
 .OC.OC.LL.LL.B1.D1.D1.D1.B2.D2.D2.D2. D1(LL,B1),D2(B2)    *         *
                                                           *         *  SS-FORMA
T TYPE 1 INSTR  UCTIONS INCLUDE:                             *         *       M
VN   MVC   MVZ   NC    CLC   OC    XC    TR    TRT           *         *       E
D    EDMK  MVCIN                                             *         *
                                                               *         * SPECI
AL OPCFLAG1 FLAGS INCLUDE: NONE                                *         * SPECI
AL OPCFLAG2 FLAGS INCLUDE: NONE                                *         *******
********************************************  ********************         SS1OP
ND  ST    R9,SS19                 SAVE RETURN ADDRESS
    IC    R1,INSTTEXT+1           PICK UP LLLL
    LA    R1,1(R1)                ADD 1 FOR LENGTH         +
      STC   R1,LENGTH               SET OPERAND LENGTH
        ICM   R1,3,INSTTEXT+2         PICK UP B1D1D1D1
        BAS   R9,BDOPND               GO FORMAT THE D1(LL,B1) OPND
        MVI   0(R8),C','              SEPARATE OPERANDS
          LA    R8,1(R8)                STEP PAST THE COMMA
          ICM   R1,3,INSTTEXT+4         PICK UP B2D2D2D2
          MVI   LENGTH,0                SHOW LENGTH N/A
            BAS   R9,BDOPND               GO FORMAT THE D2(B2) OPND
   SS1XIT   L     R9,SS19                 GET RETURN ADDRESS
            BR    R9                      EXIT
   SS19     DC    A(0)                      RETURN ADDRESS
     ***********************************************************************
     *              SS-FORMAT INSTRUCTION, TYPE 2 OPERANDS                 *
     * THESE 6-BYTE INSTRUCTIONS HAVE   SINGLE-BYTE OP-CODES.                *
       *                                                                     *
       * FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *
       * SS2   18  .OC.OC.L1.L2.B1.D1.D1.D1.B2.D2.D2  .D2. D1(L1,B1),D2(L2,B2) *
         *                                                                     *
         *  SS-FORMAT TYPE 2 INSTRUCTIONS INCLUDE:                             *
         *       MVO   PACK  UNPK  ZAP   CP    AP    SP    MP    DP
 *         *
 *         * SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE
 *         * SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE
 *           *******************************************************************
****         SS2OPND  ST    R9,SS29                 SAVE RETURN ADDRESS
                      IC    R1,INSTTEXT+1           PICK UP L1L2
                        SRL   R1,4                    SHIFT OUT L2
                        N     R1,ZEROF                CLEAR ALL BUT L1
                        LA    R1,1(R1)                ADD 1 FOR LENGTH
                        STC   R1 ,LENGTH               SET OPERAND LENGTH
                          ICM   R1,3,INSTTEXT+2         PICK UP B1D1D1D1
                          BAS   R9,BDOPND               GO FORMAT THE D1(LL,B1)
OPND                         \         MVI   0(R8),C','              SEPARATE O
PERANDS                                 LA    R8,1(R8)                STEP PAST
THE COMMA                               IC    R1,INSTTEXT+1           PICK UP L1
L2                                        N     R1,ZEROF                CLEAR AL
L BUT L2                                  LA    R1,1(R1)                ADD 1 FO
R LENGTH                                  STC   R1,LENGTH               SET OPER
AND LENGTH                                ICM     R1,3,INSTTEXT+4         PICK U
P B2D2D2D2                                  BAS   R9,BDOPND               GO FOR
MAT THE D2(L2,B2) OPND             SS2XIT   L     R9,SS29                 GET RE
TURN ADDRESS                                BR    R9                        EXIT
                                     SS29     DC    A(0)                    RETU
RN ADDRESS                           *******************************************
****************************         *              SS-FORMAT INSTRUCTION, TY  P
E 3 OPERANDS                 *         * THESE 6-BYTE INSTRUCTIONS HAVE SINGLE-B
YTE OP-CODES.                *         *
                             *         * FMT  NBR  MEMORY CONTENT
         OPE  RAND CODING      *         * SS3   19  .OC.OC.R1.R3.B2.D2.D2.D2.B4
.D4.D4.D4. R1,D2(B2),R3,D4(B4) *         *
                               *         *  SS-FORMAT TYPE 3 INSTRUCTIONS INCLUD
E: PLO                           *         *
                                 *         * SPECIAL OPCFLAG1 FLAGS INCLUDE: NON
E                                *         * SPECIAL OPCFLAG2 FLAGS INCLUDE: NON
E                                *           ***********************************
************************************         SS3OPND  ST    R9,SS39
    SAVE RETURN ADDRESS                               MVI   LENGTH,0
    SHOW LENGTH N/A IN OPERANDS                       CLI     STAGE,1
      THIS STAGE 1?                                     BE    SS3BDOP1
      YES, SKIP R1 FORMAT                               IC    R1,INSTTEXT+1
      PICK UP R1R3                                      SRL   R1,4
        SHIFT OUT R3                                      BAS   R9,REGOPNDS
        GO FORMAT R1 OPERAND                              MVI   0(R8),C','
        SEPARATE OPERANDS                                 LA    R8,1(R8)
          STEP PAST THE COMMA                      SS3BDOP1 ICM   R1,3,INSTTEXT+
2         PICK UP B2D2D2D2                                  BAS   R9,BDOPND
          GO FORMAT THE D2(B2) OPERAND                      CLI   STAGE,1
          THIS STAGE 1  ?                                     BE    SS3BDOP2
            YES, SKIP R3 FORMAT                               MVI   0(R8),C','
            SEPARATE OPERANDS                                 LA    R8,1(R8)
            STEP PAST THE COMMA      +                          IC    R1,INSTTEX
T+1           PICK UP R1R3                                        BAS   R9,REGOP
NDS             GO FORMAT R3 OPERAND                              MVI   0(R8),C'
,'              SEPARATE OPERANDS                                 LA    R8,1(R8)
                STEP PAST THE COMMA                        SS3BDOP2 ICM   R1,3,I
NSTTEXT+4         PICK UP B4D4D4D4                                  BAS   R9,BDO
PND               GO FORMAT THE D4(B4) OPERAND             SS3XIT   L     R9,SS3
9                 GET RETURN ADDRESS                                  BR    R9
                    EXIT                                     SS39     DC    A(0)
                    RETURN ADDRESS                           *******************
****************************************************         *              SS-F
  ORMAT INSTRUCTION, TYPE 4 OPERANDS                 *         * THESE 6-BYTE IN
STRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *         *
                                                     *         * FMT  NBR  MEMOR
Y CONTENT                          OPERAND CODING      *         * SS4   1A  .OC
.OC.R1.R3.B1.D1.D1.D1.B2.D2.D2.D2. D1(R1,B1),D2(B2),R3 *         *
                                                       *         *  SS-FORMAT TY
PE 4 INSTRUCTIONS INCLUDE: MVC  K  MVCP  MVCS            *         *
                                                         *         * SPECIAL OPC
FLAG1 FLAGS INCLUDE: NONE                                *         * SPECIAL OPC
FLAG2 FLAGS INCLUDE: NONE                                  *         ***********
************************************************************         SS4OPND  ST
    R9,SS49                 SAVE RETURN ADDRESS                               MV
I   LENGTH,0                SHOW OPERAND LENGTHS N/A
IC    R1,INSTTEXT+1           PICK UP R1R3
SLL   R1,12                   MOVE R1 TO 4TH NYBBLE OF R1
ICM   R1,3,INSTTEXT+2         PICK UP B1D1D1D1
  BAS   R9,XBDOPND              GO FORMAT D1(R1,B1) OPERAND
  MVI   0(R8),C','              SEPARATE OPERANDS
  LA    R8,1(R8)                STEP PAST THE COMMA
  ICM   R1 ,3,INSTTEXT+4         PICK UP B2D2D2D2
    BAS   R9,BDOPND               GO FORMAT THE D2(B2) OPERAND
    CLI   STAGE,1                 NOW IN STAGE 1?
       \         BE    SS4XIT                  YES, SKIP R3 FORMAT
                  MVI   0(R8),C','              SEPARATE OPERANDS
                  LA    R8,1(R8)                STEP PAST THE COMMA
                    IC    R1,INSTTEXT+1           PICK UP R1R3
                    BAS   R9,REGOPNDS             GO FORMAT THE R3 OPERAND
           SS4XIT   L     R9,SS49                 GET RETURN ADDRESS
                    BR      R9                      EXIT
             SS49     DC    A(0)                    RETURN ADDRESS
             *******************************************************************
****         *              SS-FORMAT IN  STRUCTION, TYPE 5 OPERANDS
     *         * THESE 6-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.
     *         *
     *         * FMT  NBR  MEMORY CONTENT                          OPERAND CODIN
G      *         * SS5   1B  .OC.OC.L1.I3.B1.D1.D1.D1.B2.D2.D2.D2. D1(L1,B1),D2(
B2),I3 *         *
       *         *  SS-FORMAT TYPE 5 INSTRUCTIONS INCLUDE: SRP
         *         * NOTES: SRP IS CONSIDERED AN INSTRUCTION ONLY IF THE I3 OPER
AND IS 0 *         *        OR 5, AND THE INSTRUCTION BITS 32-41 ARE ZEROS, SINC
E THE SRP*         *        INSTRUCTION USES THE D2(B2) ADDRESS AS A SHIFT AMOUN
T WIT  H   *         *        NO B2 VALUE GIVEN. THE INTENT IS TO PREVENT TREATI
NG THE     *         *        CHARACTER '0' (X'F0') AS THE OP-CODE FOR SRP WHEN
IT REALLY  *         *        IS PART OF A CHARACTER STRING OR SOME OTHER CONSTR
UCT.       *           *
             *         * SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE
             *         * SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE
             *         ************  *******************************************
****************         SS5OPND  ST    R9,SS59                 SAVE RETURN ADDR
ESS                               IC    R1,INSTTEXT+1           PICK UP L1I3
                                  N     R1,ZEROF                  CLEAR ALL BUT
I3                                  BZ    SS5SHFT                 OK IF ZERO
                                    CH    R1,H5                   CHECK ROUND=5
                                    BE    SS5SHFT                   OK IF 5
                             SS5NOTI  MVI   ISINST,0                INDICATE NOT
 AN INSTRUCTION                       B     SS5XIT                  AND EXIT
                             SS5SHFT  CLI   INSTTEXT+4,0            .B2.D2. BYTE
   IS ZERO?                             BNE   SS5NOTI                 NO, NOT AN
 INSTRUCTION                            TM    INSTTEXT+5,X'C0'        HI 2 BITS
OF .D2.D2. ARE ZERO?                    BNZ   SS5NOTI                 NO, NOT AN
 INSTRUCTION   +                          IC    R1,INSTTEXT+1           PICK UP
L1I3                                        SRL   R1,4                    SHIFT
OUT I3                                      N     R1,ZEROF                CLEAR
ALL BUT L1                                  LA    R1,1(R1)                MAKE L
1 INTO LENGTH                                 STC   R1,LENGTH               SET
OPERAND LENGTH                                ICM   R1,3,INSTTEXT+2         PICK
 UP B1D1D1D1                                  BAS   R9,BDOPND               GO F
ORMAT D1(L1,B1) OPERAND                         MVI   0(R8),C','              SE
PARATE OPERANDS                                 LA    R8,1(R8)                ST
EP PAST THE COMMA                               SR    R1,R1                   CL
EAR FOR INSERT                                  ICM   R1,3  ,INSTTEXT+4
PICK UP SHIFT AMOUNT                              CH    R1,H32
POSITIVE (RIGHT) SHIFT AMOUNT?                    BL    SS5SHFMT
YES, GO FORMAT                                    MVC   0(3,R8),=CL3'64-'
  SHOW LEFT SHIFT                                   LA    R8,3(R8)
  STEP PAST DELIMITER                               LA    R2,64
  COMPUTE THE                                       SR    R2,R1
     VAL  UE TO                                       LR    R1,R2
          BE SUBTRACTED                      SS5SHFMT BAS   R9,DECMOPND
    GO FORMAT SHIFT AMOUNT                            MVI   0(R8),C','
    SEPARATE OPERANDS                                   LA    R8,1(R8)
      STEP PAST THE COMMA                               IC    R1,INSTTEXT+1
      PICK UP L1I3                                      N     R1,ZEROF
      CLEAR ALL BUT I3                                    BAS   R9,DECMOPND
        GO FORMAT I3 OPERAND                     SS5XIT   L     R9,SS59
        GET RETURN ADDRESS                                BR    R9
        EXIT                                     SS59       DC    A(0)
          RETURN ADDRESS                           *****************************
******************************************         *              SSE-FORMAT INS
TRUCTION OPERANDS                        *         * THESE 6-BYTE IN STRUCTIONS
 HAVE 2-BYTE OP-CODES WHOSE FIRST BYTE IS  *         * X'E5'.
                                           *         *
                                           *                     \* FMT  NBR  M
EMORY CONTENT                        OPERAND CODING      *         * SSE1  1C  .
OC.OC.OC.OC.B1.D1.D1.D1.B2.D2.D2.D2. D1(B1),D2(B2)       *         *
                                                         *         *   SSE-FORMA
T INSTRUCTIONS INCLUDE:                                    *         *       LAS
P  TPROT MVCSK MVCDK                                       *         *
                                                           *         * SPECIAL O
PCF  LAG1 FLAGS INCLUDE: NONE                                *         * SPECIAL
 OPCFLAG2 FLAGS INCLUDE: NONE                                *         *********
**************************************************************         SSEOPND
ST    R9,SSE9                   SAVE RETURN ADDRESS
  MVI   LENGTH,0                SHOW OPERAND LENGTHS N/A
  ICM   R1,3,INSTTEXT+2         PICK UP B1D1D1D1
  BAS   R9,BDOPND               G  O FORMAT D1(B1)
    MVI   0(R8),C','              SEPARATE OPERANDS
    LA    R8,1(R8)                STEP PAST THE COMMA
    ICM   R1,3,INSTTEXT+4         PICK UP B2D2D2  D2
      BAS   R9,BDOPND               GO FORMAT THE D2(B2) OPERAND             SSE
XIT   L     R9,SSE9                 GET RETURN ADDRESS
      BR    R9                      EXIT                                       S
SE9     DC    A(0)                    RETURN ADDRESS                           *
**********************************************************************         *
              FORMAT REGISTER OPERAND                                *
 * ON ENTRY, R8 POINTS TO THE OUTPUT LOCATION TO CONTAIN THE FORMATTED *
 * REGISTER OPERAND. THE REGISTER NUMBER IS IN THE LOW-ORDER NYBBLE OF *
 * R1. TO FORMAT, THE LETTER "R" IS MOVED TO THE ADDRESS POINTED TO BY *
 * R8, THEN T  HE REGISTER NUMBER IS MOVED TO FOLLOW THE "R". FINALLY,   *
   * R8 IS ADVANCED TO POINT TO THE BYTE FOLLOWING THIS OPERAND.         *
   ***********************************************************************
   REGOPNDS ST    R9,RO9                    SAVE RETURN ADDRESS
              MVI   0(R8),C'R'              REGISTER DELIMITER
              N     R1,ZEROF                CLEAR ALL BUT THE REGISTER NBR
              CHI   R1,9                      SINGLE-DIGIT REGISTER NUMBER?
                BH    ROTWO                   NO, TWO-DIGIT REGISTER
                STC   R1,1(R8)                SET REGISTER NUMBER IN OUTPUT
                OI    1(R8),X'F0'             SET THE SIGN
                  LA    R8,2(R8)                STEP PAST THE OPERAND
                  B     ROXIT                   AND EXIT
         ROTWO    MVI   1(R8),C'1'              SET TENS DIGIT IN OUTPUT +
                    SH    R1,H10                  DEDUCT TEN
                      STC   R1,2(R8)                SET REGISTER NUMBER IN OUTPU
T                     OI    2(R8),X'F0'             SET THE SIGN
                      LA    R8,3(R8)                STEP PAST THE OPERAND
               ROXIT    L     R9,RO9                  GET RETURN ADDRESS
                        BR    R9                      EXIT
               RO9      DC    A(0)                    RETURN ADDRESS
               ******  *********************************************************
********         *              FORMAT DECIMAL OPERAND
       *         * ON ENTRY, R8 POINTS TO THE OUTPUT LOCATION TO CONTAIN THE FOR
MATTED *         * DECIMAL OPERAND.   THE OPERAND VALUE IS GIVEN BY THE LOW ORDE
R 12 BITS*         * OF R1 IN BINARY. IT IS CONVERTED TO DECIMAL AND PLACED AT T
HE       *         * ADDRESS IN R8. AFTER THIS, R8 IS UPDATED TO POINT PAST THE
OPERAND. *         ********************************  ***************************
************         DECMOPND ST    R9,DO9                  SAVE RETURN ADDRESS
                              N     R1,KEEPLO12             CLEAR ALL BUT LOW 12
 BITS                         CVD   R1,DBLWD                CONVER  T TO DECIMAL
                                CP    DBLWD,PK999             4 DIGITS?
                                BH    DO4                     YES
                                CP    DBLWD,PK99              3 DIGITS?
                                  BH    DO3                     YES
                                  CP    DBLWD,PK9               2 DIGITS?
                                  BH    DO2                     YES
                           DO1      UNPK  0(1,R8),DBLWD           UNPACK SINGLE
DIGIT                               OI    0(R8),X'F0'             CLEAR THE SIGN
                                    LA    R8,1(R8)                STEP PAST THE
OPERAND                               B     DOXIT                   AND EXIT
                             DO2      UNPK  0(2,R8),DBLWD           UNPACK SINGL
E DIGIT                               OI    1(R8),X'F0'             CLEAR THE SI
GN                                    LA    R8 ,2(R8)                STEP PAST
THE OPERAND                             B     DOXIT                   AND EXIT
                               DO3      UNPK  0(3,R8),DBLWD           UNPACK SIN
GLE DIGIT                                  \         OI    2(R8),X'F0'
    CLEAR THE SIGN                                    LA    R8,3(R8)
    STEP PAST THE OPERAND                             B     DOXIT
    AND EXIT                                 D  O4      UNPK  0(4,R8),DBLWD
      UNPACK SINGLE DIGIT                               OI    3(R8),X'F0'
      CLEAR THE SIGN                                    LA    R8,4(R8)
      STEP PAST THE OPERAND                    DOXIT    L       R9,DO9
        GET RETURN ADDRESS                                BR    R9
        EXIT                                     DO9      DC    A(0)
        RETURN ADDRESS                           ***************************  **
******************************************         *              FORMAT CONDITI
ONAL BRANCH OPERAND                      *         * ON ENTRY, R8 POINTS TO THE
FIRST BYTE OF THE OUTPUT OPERAND FIELD.  *         * THE MASK VALUE IS IN THE LO
W-ORDER NYB  BLE OF R1. THE  MASK VALUE IS *         * USED AS AN INDEX TO THE L
ASTCCNT TABLE TO OBTAIN THE EXTENDED       *         * MNEMONIC TO BE USED. IF T
HE ENTRY FOUND IS ALPHABETIC, IT IS MOVED  *         * TO THE OUTPUT MNEMONIC FI
ELD (AN "R" IS APPENDED IF   THIS IS A TWO-  *         * BYTE BRANCH INSTRUCTION
) AND R8 IS LEFT AS-IS. WHEN THE ENTRY FOUND *         * CONTAINS A NUMERIC VALU
E, IT IS MOVED TO THE OUTPUT OPERAND FIELD,  *         * R8 IS UPDATED TO POINT
PAST THE MASK VALUE, AND THE MNEMONIC IS   LEFT*         * AS-IS.
                                               *         ***********************
************************************************         CONDOPND ST    R9,CO9
                SAVE RETURN ADDRESS                                 N     R1,ZER
OF                CLEAR ALL BUT THE MASK VALUE                      MHI   R1,3
                  COMPUTE TABLE OFFSET                              LA    R1,LAS
TCCNT(R1)         POINT TO COND CODE TABLE VALUE                    CLI     0(R1
),C'0'              NUMERIC TABLE ENTRY?                              BNL   CONU
M                   YES                                               MVC   OUTM
NEM(3),0(R1)        MOVE EXTENDED MNEMONIC                            MVC   OUTM
NEM+3(  2),BLANKS     CLEAR UNUSED BYTES                                CLI   IN
STLENG,2              THIS A TWO-BYTE BRANCH INST?                      BNE   CO
XIT                   NO, FINISHED                                      CLI   OU
TMNEM+1,C' '            BYTE 2 IS BLANK?                                  BNE
COTRY3                  NO                                                MVI
OUTMNEM+1,C'R'          YES, MOVE APPENDING R TO BYTE 2                   B
COXIT                   AND EXIT                                   COTRY3   CLI
  OUTMNEM+2,C' '          BYTE 3 IS BLANK?                                  BNE
  COIS4                   NO                                                MVI
  OUTMNEM+2,C'R'          YES, MOVE APPENDING R TO + BYTE 3                   B
    COXIT                   AND EXIT                                   COIS4
MVI   OUTMNEM+3,C'R'          MOVE APPENDING R TO BYTE 4
B     COXIT                   AND EXIT                                 CONUM
MVC   0(2,R8),0(R1)           MOVE IN MASK DIGITS
  CLI   1(R8),C' '              SINGLE DIGIT MASK?
  BNE   COTWO                   NO, TWO DIGIT MASK
  MVI   1(R8),C','              MOVE IN COMMA SEPARATOR
    LA    R8,2(R8)                STEP PAST THE OPERAND
    B     COXIT                   AND EXIT                                 COTWO
    MVI   2(R8),C','              MOVE IN COMMA SEPARATOR
    LA    R8,3  (R8)                STEP PAST THE OPERAND                    COX
IT    L     R9,CO9                  GET RETURN ADDRESS
      BR    R9                      EXIT                                     CO9
      DC    A(0)                      RETURN ADDRESS                           *
**********************************************************************         *
                INDEX-BASE-DISPLACEMENT ADDRESSES                    *         *
 ON ENTRY R8 POINTS TO THE NEXT BYTE OF THE   OPERAND FIELD, R1'S LOW  *
 * ORDER TWO BYTES CONTAIN THE BASE-DISPLACEMENT PORTION, AND ITS 4TH  *
 * NYBBLE CONTAINS THE INDEX REGISTER NUMBER:                          *
 *      R1 ON ENTRY: --.--.--.XX.BB.DD.DD.DD.                            *
   * IF THIS IS STAGE 1, THE ADDLABEL ROUTINE IS CALLED TO BUILD A LABEL *
   * TABLE ENTRY FOR THE OPERAND ADDRESS, FOR STAGE 2 THE ADDRESS IS     *
   * FORMATTED EITHER AS DISP(INDX,BASE) OR AS LBL(INDX) IF A LABEL IS   *
     * FOUND IN THE LABEL TABLE FOR THE BASE-DISPLACEMENT ADDRESS PORTION. *
     ***********************************************************************
     XBDOPND  ST    R9,XO9                  SAVE RETURN ADDRESS
                STH   R1,DISPLAC              SAVE THE DISPLACEMENT
                NI    DISPLAC,X'0F'           CLEAR HIGH ORDER NYBBLE
                SRL   R1,12                   SHIFT OUT DISPLACEMENT
                STC   R1 ,BASE                 SAVE BASE REGISTER NUMBER
                  NI    BASE,X'0F'              CLEAR HIGH ORDER NYBBLE
                  CLI   STAGE,2                 IS THIS STAGE 2?
                     \         BE    XOSTG2                  YES
                                BAS   R9,ADDLABEL             NO, GO ADD NEW LAB
EL                              B     XOXIT                   AND THEN EXIT
                       X  OSTG2   SRL   R1,4                    SHIFT OUT THE BA
SE REGISTER                       STC   R1,INDEX                SAVE INDEX REGIS
TER NUMBER                        NI    INDEX,X'0F'             CLEAR HIGH ORDER
 NYBBLE                           BAS     R9,GETLABEL             GO GET A LABEL
                                    CLI   0(R8),0                 WAS A LABEL FO
UND?                                BE    XOEXPL                  NO, FORMAT EXP
LICIT OPERAND                       CLI   INDEX,0                   IS THERE AN
INDEX REGISTER?                       BE    XOXIT                   NO, EXIT
                                      MVI   0(R8),C'('              MOVE OPEN PA
REN                                   LA    R8,1(R8)                S  TEP PAST
OPENING PAREN                           IC    R1,INDEX                PICK UP IN
DEX REGISTER NUMBER                     BAS   R9,REGOPNDS             GO FORMAT
THE REGISTER NUMBER                     MVI   0(R8),C')'              MOVE CLOSI
NG P  ARENTHESIS                          LA    R8,1(R8)                STEP PAS
T THE OPERAND                             B     XOXIT                   AND EXIT
                                 XOEXPL   LH    R1,DISPLAC              PICK UP
DISPLACEMENT                                CVD   R1,DBLWD                CONVER
T IT TO PACKED DECIMAL                      CP    DBLWD,PK999             DISPLA
CEMENT IS 4 DIGITS?                         BH    XOGT1K                  YES
                                              CP    DBLWD,PK99              DISP
LACEMENT IS 3 DIGITS?                         BH    XOGTHUND                YES
                                              CP    DBLWD,PK9               DISP
LACEMENT IS 2 DIGITS?                         BH      XOGTTEN                 YE
S                                               UNPK  0(1,R8),DBLWD           UN
PACK 1-BYTE DISPLACEMENT                        OI    0(R8),X'F0'             MA
KE SIGN VALID                                   LA    R8,1(R8)
STEP PAST DISPLACEMENT                            B     XOCKANY
CONTINUE                                 XOGT1K   UNPK  0(4,R8),DBLWD
UNPACK 1-BYTE DISPLACEMENT                        OI    3(R8),X'F0'
  MAKE SIGN VALID                                   LA    R8,4(R8)
  STEP PAST DISPLACEMENT                            B     XOCKANY
  CONTINUE                                 XOGTHUND UNPK  0(3,R8),DBLWD
  UNPACK 1-BYT  E DISPLACEMENT                        OI    2(R8),X'F0'
    MAKE SIGN VALID                                   LA    R8,3(R8)
    STEP PAST DISPLACEMENT                            B     XOCKANY
    CONTINUE                 +                 XOGTTEN  UNPK  0(2,R8),DBLWD
      UNPACK 1-BYTE DISPLAC  EMENT                        OI    1(R8),X'F0'
        MAKE SIGN VALID                                   LA    R8,2(R8)
        STEP PAST DISPLACEMENT                   XOCKANY  CLI   INDEX,0
        IS THERE AN INDEX REGISTER?                         BNE   XOSETOPN
          YES                                               CLI   BASE,0
          IS THERE A BASE REGISTER?                         BE    XOXIT
          NO, ALL THRU                             XOSETO  PN MVI   0(R8),C'('
            MOVE IN OPENING PARENTHESIS                       LA    R8,1(R8)
            STEP PAST OPENING PARENTHESIS                     CLI   INDEX,0
            IS THERE AN INDEX REG?                            BE    XOXC  KBAS
              CONTINUE TO BASE                         XOGOTIX  IC    R1,INDEX
              GET INDEX REGISTER NUMBER                         BAS   R9,REGOPND
S             GO FORMAT INDEX REGISTER                 XOXCKBAS CLI   BASE,0
                IS THERE A BASE REGISTER?                         BE    XOSETRPN
                NO                                                MVI   0(R8),C'
,'              MOVE SEPARATING COMMA                             LA    R8,1(R8)
                STEP P  AST THE COMMA                      XOGOTB   IC    R1,BAS
E                 GET BASE REGISTER NUMBER                          BAS   R9,REG
OPNDS             GO FORMAT THE BASE REGISTER              XOSETRPN MVI   0(R8),
C')'              MOVE CLOSING PARENT  HESIS                          LA    R8,1
(R8)                STEP PAST CLOSING PARENTHESIS            XOXIT    L     R9,X
O9                  GET RETURN ADDRESS                                BR    R9
                    EXIT                                       XO9      DC    A(
0)                    RETURN ADDRESS                           *****************
******************************************************         *
BASE-DISPLACEMENT ADDRESSES                          *         * ON   ENTRY R8 P
OINTS TO THE NEXT BYTE OF THE OPERAND FIELD, R1'S LOW  *         * ORDER TWO BYT
ES CONTAIN THE BASE-DISPLACEMENT ADDRESS:              *         *      R1 ON EN
TRY: --.--.--.--.BB.DD.DD.DD.                          *         *      LENGTH C
ON TAINS 0 IF N/A, ELSE THE OPERAND LENGTH              *         * IF THIS IS
STAGE 1, THE ADDLABEL ROUTINE IS CALLED TO BUILD A LABEL *         * TABLE ENTRY
 FOR THE OPERAND ADDRESS.                                *                
\* FOR STAGE 2 THE LABEL TABLE IS SEARCHED FOR A LABEL AT THE BASE-    *
 * DISPLACEMENT ADDRESS. IF FOUND, FORMAT IS LABEL(LENG) OTHERWISE     *
 * EXPLICIT FORMAT IS USED: DISP(LENG,BASE). THE LENGTH PORTION IS     *
 *   OMITTED WHEN LENGTH=0.                                              *
   ***********************************************************************
   BDOPND   ST    R9,BO9                  SAVE RETURN ADDRESS
            STH     R1,DISPLAC              SAVE THE DISPLACEMENT
              NI    DISPLAC,X'0F'           CLEAR HIGH ORDER NYBBLE
              SRL   R1,12                   SHIFT OUT DISPLACEMENT
              STC   R1,BASE                   SAVE BASE REGISTER NUMBER
                NI    BASE,X'0F'              CLEAR HIGH ORDER NYBBLE
                CLI   STAGE,2                 IS THIS STAGE 2?
                BE    BOSTG2                  Y  ES
                  BAS   R9,ADDLABEL             NO, GO ADD NEW LABEL
                  B     BOXIT                   AND THEN EXIT
         BOSTG2   BAS   R9,GETLABEL             GO GET A LABEL
                    CLI   0(R8),0                 WAS A LABEL FOUND?
                    BE    BOEXPL                  NO, FORMAT EXPLICIT OPERAND
                    CLI   LENGTH,0                IS THERE A LENGTH SPECIFIED  ?
                      BZ    BOXIT                   NO, EXIT
                      MVI   0(R8),C'('              MOVE OPEN PAREN
                      LA    R8,1(R8)                STEP PAST OPENING PAREN
                        SR    R1,R1                   CLEAR FOR INSERT
                        IC    R1,LENGTH               PICK UP LENGTH
                        BAS   R9,DECMOPND             GO FORMAT THE LENGTH
                        MVI     0(R8),C')'              MOVE CLOSING PARENTHESIS
                          LA    R8,1(R8)                STEP PAST THE OPERAND
                          B     BOXIT                   AND EXIT
                 BOEXPL   LH    R1,DISPLAC                PICK UP DISPLACEMENT
                            BAS   R9,DECMOPND             GO FORMAT THE DISPLACE
MENT               BOCKANY  CLI   LENGTH,0                IS THERE ANY LENGTH?
                            BNE   BOSETOPN                  YES
                              CLI   BASE,0                  IS THERE A BASE REGI
STER?                         BE    BOXIT                   NO, ALL THRU
                     BOSETOPN MVI   0(R8),C'('              MOVE IN OPEN  ING PA
RENTHESIS                       LA    R8,1(R8)                STEP PAST OPENING
PARENTHESIS                     CLI   LENGTH,0                IS THERE A LENGTH
SPECIFIED                       BE    BOXCKBAS                CONTINUE TO BASE
       +                 BOGOTIX  SR    R1,R1                   CLEAR FOR INSERT
                                    IC    R1,LENGTH               GET LENGTH
                                    BAS   R9,DECMOPND             GO FORMAT THE
LENGTH                              MVI   0(R8),C','              MOVE SEPARATIN
G COMMA                               LA    R8,1(R8)                STEP PAST TH
E COMMA                      BOXCKBAS CLI   BASE,0                  IS THERE A B
ASE REGISTER?                         BE    BOSETRPN                NO
                             BOGOTB     IC    R1,BASE                 GET BASE R
EGISTER NUMBER                          BAS   R9,REGOPNDS             GO FORMAT
THE BASE REGISTER              BOSETRPN MVI   0(R8),C')'              MOVE CLOSI
NG PARENTHESIS                          LA    R8,1  (R8)                STEP PAS
T CLOSING PARENTHESIS            BOXIT    L     R9,BO9                  GET RETU
RN ADDRESS                                BR    R9                      EXIT
                                 BO9      DC    A(0)                      RETURN
 ADDRESS                           *********************************************
**************************         *             SEARCH THE LABEL TABLE FOR A LA
BEL                      *         * CALLER SETS THE BASE REGISTER NUMBER IN THE
   BASE FIELD AND THE      *         * DISPLACEMENT IN THE DISPLAC FIELD. THIS R
OUTINE CHECKS TO SEE IF    *         * A USING HAS BEEN DECLARED FOR THE SPECIFI
ED BASE REGISTER. IF IT HAS*         * THE CSECT OFFSET IS COMPUTED AS USING VAL
UE + DISPLACEME  NT VALUE,   *         * AND THE LABEL TABLE IS SEARCHED FOR A L
ABEL AT THIS LOCATION. IF    *         * FOUND, THE LABEL IS MOVED TO THE ADDRES
S IN R8, AND R8 IS UPDATED TO*         * POINT TO THE NEXT BYTE FOLLOWING THE LA
BEL. IF NO LABEL IS FOUND, R8*           * WILL BE UNCHANGED, AND THE BYTE AT TH
E ADDRESS IN R8 WILL BE SET TO *         * X'00'.
                               *         ***************************************
********************************         GETL  ABEL ST    R9,GL9
  SAVE RETURN ADDRESS                               MVI   0(R8),0
  SET NOT FOUND INDICATOR                           SR    R1,R1
  CLEAR FOR INSERT                                  IC    R1 ,BASE
    GET BASE REGISTER NUMBER                          SLL   R1,2
    MULTIPLY BY 4                                     LA    R1,USENTRY(R1)
    POINT TO USING TABLE ENTRY                           \         ICM   R1,15,
0(R1)             GET USING ELEMENT                                 BZ    GLXIT
                  NO USING, EXIT                                    LA    R1,0(R
1)                CLEAR HI BIT                                        AH    R1,D
ISPLAC              COMPUTE CSECT OFFSET TO ADDR                      L     R15,
LBLTBADR            POINT TO LABEL TABLE                              USING LBLD
SECT,R15                                                     GLCKLBND C       R1
5,LBLTBEND            PAST END OF TABLE?                                BNL   GL
XIT                   YES, NO LABEL FOUND, EXIT                         C     R1
,LBLOFSET             PAST ANY POSSIBLE ENTRY?                          BL    GL
XIT                     YES, EXIT                                         BH
GLSTEP                  NO, NOT FAR ENOUGH                                CLI
LBLTYPE,X'20'           POSSIBLY LABEL ENTRY?                             BL
GLSTEP                  N  O                                                CLI
  LBLLABEL,C'A'           LABEL PRESENT?                                    BNL
  GLGOTONE                YES, GOT ONE                             GLSTEP   LA
  R15,L'LBLENTRY(R15)     NO, STEP TO NE  XT ENTRY                            B
    GLCKLBND                LOOP THROUGH THE TABLE                   GLGOTONE MV
C   0(8,R8),LBLLABEL        YES, MOVE LABEL TO OPERAND FIELD                  MV
C   LABELENG,LBLRLDLN       SAVE ASSOCIATED LABEL LENGT  H
LA    R8,7(R8)                POINT TO 8TH BYTE OF LABEL               GLCKRHE
CLI   0(R8),C' '              AT A BLANK?
BNE   GLLBIX                  NO, AT RIGHT END
  BCT   R8,GLCKRHE              LOOP TO FIND RHE                         GLLBIX
  LA    R8,1(R8)                STEP PAST THE LABEL
  DROP  R15                                                              GLXIT
  L       R9,GL9                  GET RETURN ADDRESS
    BR    R9                      EXIT                                     GL9
    DC    A(0)                    RETURN ADDRESS                           *****
********************  ********************************************           * B
UILD UP THE CONSTANT IN PROGRESS, OR START ONE IF THERE IS NONE  *           * I
N PROGRESS.                                                      *           ***
***********************************  *******************************           B
LDCONST ST    R9,BC9                  SAVE RETURN ADDRESS
        CLI   CONPROG,0               CONSTANT IN PROGRESS?
        BNE   BCCHKLEN                YES
 BCNEW    L     R12,CURRTXTA            POINT TO CURRENT TEXT BYTE
          TRT   0(3,R12),CHKCHAR        3 CONSECUTIVE CHARACTERS?
          BZ    BCNEWC                  YES                      +
            MVI   CONPROG,C'X'            NO, INDICATE HEX CONS  TANT
              B     BCSETLEN                CONTINUE
     BCNEWC   MVI   CONPROG,C'C'            INDICATE CHARACTER CONSTANT
     BCSETLEN MVC   CONLENG,H1              SET CONSTANT LENGTH TO 0
                MVC   CONSTRTL,LOCATION       SAVE STARTING LOCATION
                MVC   CONSTANT(1),0(R12)      SAVE THE CONSTANT BYTE
                B     BCUPDATE                GO UPDATE POINTERS
       BCCHKL  EN CLC   CONLENG,H32             ALREADY HAVE 32 BYTES?
                  BNL   BCFORCE                 YES, GO FORCE IT OUT
                  CLI   CONPROG,C'C'            CHARACTER CONSTANT IN PROGRESS?
                  BE    BCCH  LBLL                YES
                    CLC   CONLENG,H16             ALREADY HAVE 16 BYTES?
                    BL    BCCHLBLL                NO, CONTINUE
           BCFORCE  BAS   R9,FORCECON               YES, GO FORCE CURRENT ONE OU
T                     B     BCNEW                   GO START ANOTHER
             BCCHLBLL CLI   OUTLABEL,C' '           STATEMENT HAS A LABEL?
                      BE    BCCKCTNU                NO
                        CLC   LBLLENG,H0              LENGTH ASSOCIATED WITH LAB
EL?                     BE    BCCKCTNU                NO
                        CLC   CONLENG,LBLLENG         CONSTANT LENGTH = L  ABEL
LENGTH?                   BNE   BCCKCTNU                NO
                          B     BCFORCE                 YES, GO FORCE CURRENT ON
E OUT            BCCKCTNU L     R12,CURRTXTA            POINT TO CURRENT TEXT BY
TE                          CLI   CONPROG,C'X'            HEX CONSTANT IN PROGRE
SS?                         BNE   BCCKCCTN                NO
                            TRT   0(3,R12),CHKCHAR        3 CHARACTERS FOLLOW HE
RE?                           BNZ   BCTACKON                NO, CONTINUE WITH HE
X                             B     BCFORCE                 YES, GO FORCE HEX CO
NST OUT              BCCKCCTN TRT   0(1,R12),CHKCHAR        THIS BYTE A CHARACTE
R?                            BZ    BC TACKON                YES, CONTINUE IN C
HAR                             B     BCFORCE                 NO, GO FORCE CHAR
CONST OUT              BCTACKON LH    R1,CONLENG              PICK UP CURRENT LE
NGTH                               \         LA    R1,CONSTANT(R1)         POIN
T TO CURRENT BYTE IN CONST                    L     R12,CURRTXTA            POIN
T TO CURRENT TEXT BYTE                        MVC   0(1,R1),0(R12)          MOVE
 BYTE TO CONSTANT IN PROG                       LH    R1,CONLENG              UP
DATE                                            LA    R1,1(R1)
 CONSTANT                                       STH   R1,CONLENG
    LENGTH                             BCUPDATE LA      R12,1(R12)
UPDATE CURRENT                                    ST    R12,CURRTXTA
   TEXT ADDRESS                                   L     R1,LOCATION
UPDATE                                            LA    R1,1(R1)
     CURRENT                                        ST    R1,LOCATION
        LOCATION                           BCXIT    L     R9,BC9
  GET RETURN ADDRESS                                BR    R9
  E  XIT                                     BC9      DC    A(0)
    RETURN ADDRESS                           ***********************************
**********************************           * FORCE THE CURRENT CONSTANT IN PRO
GRESS OUT: WRITE T  HE SYSOUT      *           * SOURCE STATEMENT AND CLEAR STOR
AGE AREAS.                         *           *********************************
************************************           FORCECON ST    R9,FC9
                                                          CLI   STAGE,1
        NOW IN STAGE 1?                                   BE    FCXIT
        YES, NOTHING TO DO NOW                            MVC   OUTMNEM(2),=CL2'
DC'     MOVE MNEMONIC                                       MVC   OUTOPND(1),CON
PROG      BEGIN OPERAND WITH C OR X                         MVI   OUTOPND+1,C'L'
          SET LENGTH DELIMITER                              LH    R2,CONLENG
          GET CONSTANT LENGTH                               CVD     R2,DBLWD
            CONVERT TO PACKED DECIMAL                         CP    DBLWD,PK9
            OVER 9 BYTES?                                     BH    FCOVR9
            YES                                               UNPK  OUTOPND+2(
1),DBLWD      UNPACK LENGTH                                     OI    OUTOPND+2,
X'F0'         AND CLEAR THE SIGN                                LA    R11,OUTOPN
D+3           POINT TO OPENING APOSTROPHE                       B     FCOPENIT
                GO SET OPENING APOSTROPHE                FCOVR9   UNPK  OUTOPND+
2(2),DBLWD      UNPACK LENGTH                                     OI    OUTOPND+
3,X'F0'         AND CLEAR THE SIGN                                LA    R11,OUTO
PND+4           POINT TO OPE  NING APOSTROPHE              FCOPENIT MVI   0(R11)
,C''''            OPENING APOSTROPHE                                LA    R11,1(
R11)              STEP PAST LEADING APOSTROPHE                      LA    R12,CO
NSTANT            POINT TO CONSTANT AREA   +                          LH    R15,
CONLENG             GET CONSTANT LENGTH                                 UNPK  OU
TOFFST(7),CONSTRTL+1(4) UNPACK LOCATION                                 MVI   OU
TOFFST+6,C' '         CLEAR TRASH                                       TR    OU
TOFFST,TRCHAR-C'0'    MAKE PRINTABLE                                      CLI
CONPROG,C'C'            THIS A CHARACTER CONSTANT?                        BE
FCCHARS                 YES                                               ST
R11,WORKFWD             SAVE TEXT START ADDRESS                  FCFMTH  EX UNPK
  0(3,R11),0(2,R12)       UNPACK                                            MVC
  2(2,R11),=C''' '        MOVE ENDING APOSTROPHE                            TR
  0(2,R11),TRCHAR-C'0'    MAKE PRINTABLE                                    LA
  R11,  2(R11)              TO NEXT OPERAND LOCATION                          LA
    R12,1(R12)              TO NEXT CONSTANT BYTE                             BC
T   R15,FCFMTHEX            LOOP TO BUILD TEXT                                L
    R11,WORKFWD               POINT TO THE TEXT
LH    R1,CONLENG              PICK UP CONSTANT LENGTH
SLL   R1,1                    DOUBLE FOR HEX
BCTR  R1,0                    COMPUT  E LENGTH CODE
  CH    R1,H8                   TOO MUCH TO MOVE?
  BL    FCMOVIT                 NO
  LA    R1,7                    SET LENGTH MAX
    MVC   OUTTEXT+8(3),=CL3'...'  SHOW TEXT TRUNCATED                      FCMOV
IT  EX    R1,FCMVTXT              MOVE THE TEXT
    B     FCFINI                  FINISHED                                   FCC
HARS  BCTR  R15,0                   GET MOVE LENGTH CODE
      EX    R15,FCMVCHAR            MOVE CHARACTERS
      AR    R11,R15                 POINT TO LAST BYTE MOVED
        MVC   1(2,R11),=C''' '        SET ENDING APOSTROPHE
        CH    R15,H3                  CONSTANT LESS THAN 4 BYTES?
        BL    FCCHLT4                 YES
        UNPK  OU TTEXT(9),0(5,R12)     UNPACK 4 BYTES TO PRINT
          MVI   OUTTEXT+8,C' '          CLEAR TRASH
          TR    OUTTEXT(8),TRCHAR-C'0'  MAKE IT PRINTABLE
             \         BE    FCFINI                  EXACTLY FOUR BYTES, ALL TH
ROUGH                   MVC   OUTTEXT+8(3),=CL3'...'  SHOW TEXT TRUNCATED
                        B     FCFINI                  ALL THROUGH
               F  CCHLT4  CH    R15,H2                  CONSTANT IS 3 BYTES?
                          BL    FCCHLT3                 NO, LESS THAN 3
                          UNPK  OUTTEXT(7),0(4,R12)     UNPACK 3 BYTES TO PRINT
                          MVI     OUTTEXT+6,C' '          CLEAR TRASH
                            TR    OUTTEXT(6),TRCHAR-C'0'  MAKE PRINTABLE
                            B     FCFINI                  ALL THRU
                   FCCHLT3  CH    R15,H1                    CONSTANT IS 2 BYTES?
                              BL    FCCHLT2                 NO, LESS THAN 2 BYTE
S                             UNPK  OUTTEXT(5),0(3,R12)     UNPACK 2 BYTES TO PR
INT                           MVI   OUTTEXT+4,C' '          C  LEAR TRASH
                                TR    OUTTEXT(4),TRCHAR-C'0'  MAKE PRINTABLE
                                B     FCFINI                  ALL THRU
                       FCCHLT2  UNPK  OUTTEXT(3),0(2,R12)     UNPACK 1 BYTE   TO
 PRINT                            MVI   OUTTEXT+2,C' '          CLEAR TRASH
                                  TR    OUTTEXT(2),TRCHAR-C'0'  MAKE PRINTABLE
                         FCFINI   BAS   R9,OUTPUT               WRITE OUTPUT LIN
E                                   MVI   CONPROG,0               RESET CON-IN-P
ROG SWITCH                          MVI   LAST,C'C'               SHOW LAST WAS
CONSTANT                   FCXIT    L     R9,FC9                  GET RETURN ADD
RESS                                  BR    R9                      EXIT
                             FC9      DC    A(0)                    RETURN ADDRE
SS                           FCMVTXT  MVC   OUTTEXT(1),0(R11)       EXECUTED MOV
E                            FCMVCHAR MVC     0(1,R11),CONSTANT       EXECUTED M
OVE                            *************************************************
**********************         * TEST A BYTE OF TEXT TO SEE IF IT MAY BEGIN AN I
NSTRUCTION.          *         *************************  **********************
************************         SRCHOC   ST    R9,SO9                  SAVE RET
URN ADDRESS                               L     R12,CURRTXTA            POINT TO
 CURRENT TEXT BYTE                        MVI   ISINST,0                  CLEAR
INDICATOR                                   SR    R1,R1                   CLEAR
FOR INSERT                                  IC    R1,0(R12)               PICK U
P TEXT BYTE                                 MHI   R1,L'OPCENTRY           MULTIP
LY BY   ENTRY LENGTH                          A     R1,OPCDTBLA             POIN
T TO GENERAL OP-CODE ENTRY                    USING OPCODES,R1
                                              MVC   INSTBYT1,OPCODE1        SAVE
 (1ST BYTE OF) OP-COD+ E                        CLI   OPCTWO2,C'2'            TH
IS A TWO-BYTE OP-CO  DE?                          BNE   SOGOT1
NO, SINGLE BYTE OP-CODE                           ICM   R1,15,OPCSRCH2
GET 2-BYTE OP-CODE TABL ADDR                      CLI   INSTBYT1,X'ED'
IST BYTE OF OP-CODE IS X'ED'?                       BE    SOPLUS5
  YES, GO SEARCH                                    CLI   INSTBYT1,X'A7'
  IST BYTE OF OP-CODE IS X'A7'?                     BE    SOSRCHA7
  YES, GO SEARCH                           SOPLUS  1  CLC   0(4,R1),HEXFFS
    END OF TABLE?                                     BE    SOXIT
    YES, NOT AN INSTRUCTION                           CLC   OPCODE2,1(R12)
    FOUND THE OPCODE ENTRY?                           BE    SOGO  T1
      YES                                               BH    SOXIT
      NO, PAST IT                                       LA    R1,L'OPCENTRY(R1)
      STEP TO NEXT ENTRY                                B     SOPLUS1
        LOOP THRU TABLE                          SOSRCHA7 SR    R2,R2
        CLEAR FOR INSERTS                        SO1DOT5  CLC   0(4,R1),HEXFFS
        END OF TABLE?                                     BE    SOXIT
        YES, N  OT AN INSTRUCTION                           PACK  WORK1(1),1(1,R
12)       INVERT THE .R1.OC. BYTE                           NI    WORK1,X'F0'
          LEAVE ONLY .OC. IN HIGH NYBBLE                    CLC   OPCODE2,WORK1
          FOUND THE OPCODE EN  TRY?                           BE    SOGOT1
            YES                                               BH    SOXIT
            NO, PAST IT                                       LA    R1,L'OPCENTR
Y(R1)       STEP TO NEXT ENTRY                                  B     SO1DOT5
              LOOP THRU TABLE                          SOPLUS5  CLC   0(4,R1),HE
XFFS          END OF TABLE?                                     BE    SOXIT
              YES, NOT AN INSTRUCTION                             CLC   OPCODE2,
5(R12)          FOUND THE OPCODE ENTRY?                           BE    SOGOT1
                YES                                               BH    SOXIT
                NO, PAST IT                                       LA    R1 ,L'O
PCENTRY(R1)       STEP TO NEXT ENTRY                                B     SOPLUS
5                 LOOP THRU TABLE                          SOGOT1   SR    R2,R2
                  CLEAR FOR INSERT                                     \
  CLI   OPCMNEM,0               IS IT AN INSTRUCTION?
  BE    SOXIT                   NO, NOT AN INSTRUCTION
  MVC   INSTFMT,OPCFORMT        SAVE INSTRUCTION FORMAT CODE
    MVC   INSTFLG1,OPCFLAG1       SAVE FLAG BYTE 1
    MVC   INSTFLG2,OPCFLAG2       SAVE FLAG BYTE 2
    TM    INSTBYT1,X'C0'          TEST OPCODE LENGTH BITS
    BZ      SOLEN2                  BOTH ZERO: 2-BYTE INSTRUCTION
      BO    SOLEN6                  BOTH ONE: 6-BYTE INSTRUCTION
      MVI   INSTLENG,4              SET 4-BYTE LENGTH
      B     SOCLRTXT                  CONTINUE                                 S
OLEN6   MVI   INSTLENG,6              SET 6-BYTE LENGTH
        B     SOCLRTXT                CONTINUE                                 S
OLEN2   MVI   INSTLENG,2              S  ET 2-BYTE LENGTH
 SOCLRTXT XC    INSTTEXT,INSTTEXT       CLEAR INSTRUCTION TEXT
          SR    R2,R2                   CLEAR FOR INSERT
          IC    R2,INSTLENG             GET INSTRUCTIO  N LENGTH
            BCTR  R2,0                    COMPUTE TEXT LENGTH
            EX    R2,SOMVTXT              MOVE INSTRUCTION TEXT
            MVC   INSTMNEM,OPCMNEM        SAVE MNEMONIC
              MVC   INSTFLAG,OPCFLAGS       SAVE FLAGS
              MVC   INSTCCNT,OPCNDCOD       SAVE CONDITION CODE ENTRY NBR
              MVI   ISINST,1                INDICATE TEXT IS INSTRUCTION
                DROP  R1
       SOXIT    L     R9,SO9                  GET RETURN ADRESS
                BR    R9                      EXIT
       SO9      DC      A(0)                    RETURN ADDRESS
         SOMVTXT  MVC   INSTTEXT(1),0(R12)      EXECUTED MOVE
         *********************************************************************
         * ADD AN ENTRY TO THE LAB  EL TABLE. THE NEW ENTRY IS REPRESENTED BY  *
           * A BASE-DISPLACEMENT ADDRESS, AND THE CALLER HAS FILLED IN THE BASE*
           * AND DISPLAC FIELDS BEFORE CALLING THIS ROUTINE.                   *
           * FIRST, THE USENTRY TABLE IS SEARCHED   TO SEE IF THERE IS A CURRENT
 *           * USING STATEMENT IN EFFECT FOR THE BASE REGISTER SPECIFIED. IF NOT
 *           * THE NEW LABEL REQUEST IS IGNORED. NEXT, THE NEW LABEL ENTRY IS
 *           * BUILT AT THE END OF THE TABLE, AND IS THEN SORTED   IN CORRECT
   *           * POSITION. IF A LABEL ALREADY EXISTS AT THIS LOCATION, THE NEW O
NE *           * IS DROPPED.
   *           ****************************************************************+
 *****           ADDLABEL ST    R9,AL9                  SAVE RETURN ADDRESS
                            SR    R1,R1                   CLEAR FOR INSERT
                            IC    R1,BASE                 GET BASE REGISTER NUMB
ER                          SLL   R1,2                    MULTIPLY BY 4
                              LA    R1,USENTRY(R1)          POINT TO USING TABLE
 ENTRY                        ICM   R1,15,0(R1)             GET USING ELEMENT
                              BZ    ALXIT                   NO USING, EXIT
                                LA    R1,0(R1)                CLEAR HI ORDER BIT
                                AH    R1,DISPLAC              COMPUTE CSECT OFFS
ET TO ADDR                      L     R15,CURRLABL            POINT TO NEW LABEL
 LOCATION                       USING LBLD  SECT,R15
                                  XC    LBLENTRY,LBLENTRY       PRE-CLEAR THE EN
TRY                               ST    R1,LBLOFSET             SAVE THE OFFSET
                                  MVI   LBLTYPE,X'30'             SET TYPE TO LA
BEL                                 MVI   LBLLABEL,C'A'           FIRST CHARACTE
R OF LABEL                          UNPK  LBLLABEL+1(7),LBLOFSET+1(4) UNPACK LOC
ATION                               MVI   LBLLABEL+7,C' '         CLEAR   TRASH
                                      TR    LBLLABEL+1(6),TRCHAR-C'0' MAKE HEX P
RINTABLE                              DROP  R15
                                      L     R1,LBLTBADR             POINT TO FIR
ST TABL  E ENTRY                        USING LBLDSECT,R1
                                        L     R2,CURRLABL             POINT TO N
EW ENTRY                       ALCHKEND CR    R1,R2                   PRESENTLY
AT NEW ENTRY?                             BNL   ALADVANC                YES
                                          CLC   0(5,R2),LBLENTRY        AT INSER
TION POINT?                               BE    ALXIT                   YES, LAB
EL ALREADY HERE, IGNORE                     BL    ALINSRT                 YES, N
O LABEL HERE, INSERT                        LA    R1,L'LBLENTRY(R1)       NO, AD
VANCE TO NEXT ENTRY                         B     ALCHKEND                LOOP T
O FIND INSERTION POINT             ALINSRT  MVC   HO LDLABL,LBLENTRY       HOLD
 PRESENT ENTRY                                MVC   LBLENTRY,0(R2)          MOVE
 IN NEW ENTRY                                 MVC   0(L'LBLENTRY,R2),HOLDLABL PR
EVIOUS ENTRY TO END                              \         LA    R1,L'LBLENTRY(
R1)       STEP TO NEXT ENTRY                                CR    R1,R2
          PRESENTLY AT LAST ENTRY?                          BL    ALINSRT
          NO, CONTINUE INSERTION LOOP              A  LADVANC LA    R2,L'LBLENTR
Y(R2)       STEP TO NEXT AVAILABLE SLOT                       ST    R2,CURRLABL
            SAVE UPDATED TABLE ADDRESS                        C     R2,LBLTBEND
            PAST END OF TABLE?                                BL      ALXIT
              NO                                                MVC   PRT(37),=C
L37'LABEL TABLE OF 32,768 ENTRIES IS FULL'                      BAS   R9,PRINT
              PRINT ERROR MESSAGE                               WTO   'LABEL TAB
LE   OVERFLOW, ABENDING',ROUTCDE=11                               ABEND 666,DUMP
                TERMINATE IN ERROR                       ALXIT    L     R9,AL9
                GET RETURN ADDRESS                                L     R2,CURRL
ABL             P  OINT TO CURRENT ENTRY                            XC    0(L'LB
LENTRY,R2),0(R2)  CLEAR TO HEX ZEROS                                BR    R9
                  EXIT                                              DROP  R1
                                                             AL9      DC    A(0)
                    RETURN ADDRESS                           *******************
**************************************************           * PRINT ROUTINE
                                                   *           *****************
****************************************************           PRINT    ST    R9
,P9                   SAVE RETURN ADDRESS                               L     R9
,PRNTDCBA             POINT TO SYSPRINT DCB                               PUT
0(R9),PRTLINE           WRITE PRINT LINE                                  MVC
PRTLINE,BLANKS          CLEAR PRINT LINE                         PXIT     L
R9,P9                   GET RETURN ADDRESS                                BR
  R9                      RETURN                                   P9       DC
  A(0)                    RETURN ADDRESS                           *************
********************************************************           * OUTPUT ROUT
INE                                                      *           ***********
**********************************************************           OUTPUT   ST
    R9,OP9                  SAVE RETURN ADDRESS                               L
    R9,OUTDCBA                POINT TO SYSOUT DCB
PUT   0(R9),OUTREC            WRITE OUTPUT RECORD
MVC   OUTREC,BLANKS           CLEAR OUTPUT RECORD                      OPXIT
L     R9,OP9                  GET RETURN A  DDRESS
  BR    R9                      RETURN                                   OP9
  DC    A(0)                    RETURN ADDRESS                           *******
*********************************************************+ *****           * RET
URN TO CALLER                                                    *           ***
******************************************************************           RET
URN   CLI   STAGE,1                 IN STAGE 1?
      BE    RETURN1                 YES
        ZAP   DBLWD(2),PK0            SET REG NBR TO ZERO                      R
ETFMEQU MVI   OUTLABEL,C'R'           START REGISTER NAME
        MVC   OUTMNEM(3),=CL3'EQU'    SET IN MNEMONIC
          CP    DBLWD(2),PK9            GREATER THAN 9?
          BH    RETGT9                  YES
          UNPK  OUTLABEL+1(1),DBLWD+1(1) UNPACK REGISTER NUMBER
          OI    OUTL  ABEL+1,X'F0'        CLEAR SIGN
            B     RETREQND                CONTINUE
   RETGT9   UNPK  OUTLABEL+1(2),DBLWD(2)  UNPACK REGISTER NUMBER
            OI    OUTLABEL+2,X'F0'          CLEAR SIGN
     RETREQND MVC   OUTOPND(2),OUTLABEL+1   REGISTER NUMBER TO OPERAND
              BAS   R9,OUTPUT               GO WRITE THE EQU STATEMENT
              AP    DBLWD(2),PK1            INCREM  ENT REGISTER NUMBER
                CP    DBLWD(2),PK15           ALL THROUGH?
                BNH   RETFMEQU                NO
                MVC   OUTMNEM(3),=CL3'END'    SET MNEMONIC TO END
                  BAS   R9,OUTPUT               WRITE END STATEMENT
         RETURN1  L     R13,4(R13)              POINT TO CALLER'S SAVE AREA
                  L     R1,24(R13)              GET CALLER'S PARM POINTER
                    MVC   0(ENDPARMS-PARMAREA,R1),PARMAREA UPDATE PARMS
                    LM    R14,R12,12(R13)         RESTORE CALLER'S REGISTERS
                    SR    R15,R15                 SET RETURN CODE TO 0
                      BR    R14                     RETURN
             *******************************************************************
****         * WORKING STORAGE AND CONSTANTS
   *         ***************** ************************************************
******         DBLWD    DS    D                       DOUBLEWORD WORK AREA
               XZROS    DC    D'0'                    CONSTANT HEX ZEROS
                           \CSECT    DS    CL8                     CSECT NAME
                             LOCATION DC    A(0)                    LOCATION COU
NTER                         CONSTRTL DC    A(0)                    LOCATION FOR
 CONSTANT START              C  URRTXTA DC    A(0)                    CURRENT TE
XT LOCATION                    CURRLBLA DC    A(0)                    CURRENT LA
BEL TABLE ENTRY ADDR           ADCNVALU DC    F'0'                    SAVE FIELD
 FOR ADCON VALUE               WORKFWD  DC      F'0'                    WORK FIE
LD                               ZEROF    DC    X'0000000F'             AND MASK
: LEAVE ONLY LOW NYBBLE          KEEPLO12 DC    X'00000FFF'             AND MASK
: LEAVE ONLY LOW 12 BITS         USENTRY  DC    16F'0'                    USING
TABLE                              HEXFFS   DC    4X'FF'                  HEX FF
'S                                 LBLLENG  DS    H                       LABEL
ASSOCIATED DATA LENGTH             CONLENG  DS    H                       C  URR
ENT CONSTANT LENGTH                  H0       DC    H'0'                    CONS
TANT 0                               H1       DC    H'1'                    CONS
TANT 1                               H2       DC    H'2'                    CONS
TANT 2                                 H3       DC    H'3'                    CO
NSTANT 3                               H4       DC    H'4'                    CO
NSTANT 4                               H5       DC    H'5'                    CO
NSTANT 5                                 H8       DC    H'8'
CONSTANT 8                               H10      DC    H'10'
CONSTANT 10                              H16      DC    H'16'
CONSTANT 16                                H32      DC    H'32'
  CONSTANT 32                              INDEX    DC    XL1'00'
  INDEX REGISTER NUMBER                    BASE     DC    XL1'00'
  BASE REGISTER VALUE                      DISPLAC  DC      XL2'0000'
    DISPLACEMENT VALUE                       LENGTH   DC    XL1'00'
    LENGTH FOR BDDD ADDRESS                  LABEL    DC    CL8' '
    CURRENT LABEL                            LABELENG DC    H'0'
      LABEL LENGTH                             STAGE    DS    XL1
      STAGE INDICATOR                          PK0      DC    P'0'
      CONSTANT 0                               PK1      DC    P'1'
        CONSTANT 1                               PK9      DC    P'9'
        CONSTANT 9                               PK15     DC    P'15'
        CONSTANT 15                              PK99     DC    P'99'
        CONSTANT 99                                PK999    DC    P'999'
          CONSTANT 999                             INDATA   DC    X'00'
          01=TEXT HERE IS DATA ONLY                CONPROG  DC    X'00'
          01=CONSTANT IN PROGRESS  +                 LAST     DC    C'C'
            LAST OUTPUT INDICATOR                      LASTCCNT DC    CL48'NOP1
 2  3  4  5  6  7  8  9  10 11 12 13 14 B  '           REGS     DS    0CL3
              REGISTER OPERAND WORK AREA               REG1     DS    CL1
                R1 REGISTER NUMBER                       REG2     DS    CL1
                  R2 REGISTER AREA                       REG3     DS    CL1
                  R3 REGISTER AREA                       *
                                                         CMAXQT     DC    CL3',X
'''               LITERAL ",X'"                            CMASTRP  DC    CL3',*
+'                LITERAL ",*+"                            WORK1    DS    CL1
                  WORK FIELD                               CONSTANT DC    CL32
' '                 CONSTANT BUILD AREA                      HOLDLABL DS    CL(L
'LBLENTRY)          LABEL WORK AREA                          BLANKS   DC    CL13
3' '                CONSTANT BLANKS                          UNPKWORK DC    CL8'
 '                    WORK FIELD                               TRCHAR   DC    CL
16'0123456789ABCDEF'  TRANSLATE TABLE                          FLTPTPR  DC    X'
0000FFFF0000FFFF0000FFFF0000FFFF' FLT PNT PAIR TEST            VALIDM3  DC    X'
000002030000000008090A0B0C0D  0E0F' M3 MASK TEST                 HOLDOUT  DC
CL80' '                 HOLD AREA FOR OUTPUT RECORD              *
                                                                 CHKCHAR  DC
256X'FF'                TRT CHARACTER TEST                                  ORG
  CHKCHAR+C' '                                                              DC
  XL1'00'                                                                   ORG
  CHKCHAR+C'['                                                                DC
    XL5'00'                  C'[.<(+'                                         OR
G   CHKCHAR+C'!'                                                              DC
    XL5'00'                  C'!$*);'
ORG   CHKCHAR+C'-'
DC    XL2'00'                  C'-/'
ORG   CHKCHAR+C','
DC    XL 2'00'                  C',%'
  ORG   CHKCHAR+C'>'
  DC    XL2'00'                  C'>?'
     \         ORG   CHKCHAR+C':'
                DC    XL6'00'                  C':#@''="'
                ORG   CHKCHAR+C'A'
                  DC    XL9'00'                  C'ABCDEFGHI'
                  ORG   CHKCHAR+C'J'
                  DC    XL9'00'                  C'JKLMNOPQR'
                  ORG     CHKCHAR+C'S'
                    DC    XL8'00'                  C'STUVWXYZ'
                    ORG   CHKCHAR+C'0'
                    DC    XL10'00'                   C'0123456789'
                      ORG
             *
             PRTLINE  DS    0CL133                  P  RINT LINE
               PCC      DC    CL1' '                     CARRIAGE CONTROL BYTE
               PRT      DC    CL132' '                   PRINT DATA
               *
                 OUTREC   DS    0CL80                   OUTPUT RECORD
                 OUTLABEL DC    CL8' '                  STATEMENT LABEL
                          DC    CL1' '
                   OUTMNEM  DC    CL5' '                  STATEMENT MNEMONIC
                            DC    CL1' '
                   OUTOPND  DC    CL36' '                 STATEMENT OPERANDS
                              DC    CL1' '
                     OUTOFFST DC    CL6' '                  STATEMENT OFFSET
                              DC    CL1' '
                     OUTTEXT  DC      CL12' '                 STATEMENT TEXT
                       OUTCTNU  DC    CL1' '                  CONTINUATION INDIC
ATOR                   OUTNBR   DC    CL8' '                  STATEMENT NUMBER
                       *************************  ******************************
****************         * INFORMATION ABOUT AN INSTRUCTION SET BY THE SRCHOC RO
UTINE          *         *******************************************************
****************         ISINST   DC    X'00'                     01=TEXT MAY BE
 AN INSTRUCTION            INSTFLAG DS    XL1                     INSTRUCTION FL
AG BITS:                   *                                        40=FLOATING
POINT                      *                                        20=PRIVILE
GED                          INSTCCNT DS    XL1                     CONDITION CO
DE TABLE ENTRY NBR           INSTMNEM DS    XL5                     INSTRUCTION
MNEMONIC                     INSTLENG DS    XL1                     INSTRUCTION
LENGTH       +                 INSTFMT  DS    XL1                     INSTRUCTIO
N FORMAT: 0  0=NOT INSTR         *                                        SEE OP
CFORMT FOR LIST OF CODES         INSTFLG1 DS    XL1                     FLAGS. S
EE OPCFLAG1                      INSTFLG2 DS    XL1                     FLAGS. S
EE OPCFLAG2                        INSTTEXT DS    XL6                     INSTRU
CTION TEXT                         INSTBYT1 DS    XL1                     1ST BY
TE OF 2-BYTE OP-CODE               *********************************************
**************************         * DESC  RIBES THE INCOMING PARAMETER LIST PAS
SED BY THE RESOURCE PROGRAM*         *******************************************
****************************         PARMAREA DS    0A                      REBU
ILD PARAMETER LIST                   STAGEA   DS    A
 STAGE INDICATOR POINTER               CSECTA   DS    A
 CSECT NAME POINTER                    LBLTBADR DS    A
 LABEL TABLE STARTING ADDRESS          CURRLABL DC    A(0)
ADDRESS OF CURRENT LABEL ENTRY           LBLTBEND DS    A
   ADDRESS OF END OF LABEL TABLE         TEXTADDR DS    A
   ADDRESS OF CSECT TEXT                 TEXTENDA DS    A
   ADD  RESS OF LAST BYTE OF TEXT          TEXTLENG DS    A
     TOTAL TEXT LENGTH                     OPCDTBLA DS    A
     OP-CODE TABLE POINTER                 PRNTDCBA DS    A
     SYSPRINT DCB ADD  RESS                  OUTDCBA  DS    A
       SYSOUT DCB ADDRESS                    ENDPARMS EQU   *
                                             ***********************************
************************************           * THIS IS THE CURRENT LABEL TABLE
 ENTRY                               *         *********************************
**************************************                  DS    0F
                                               CURL  BNT  DS    0CL16
        LABEL TABLE ENTRY                        CURLBOFS DS    F
            CSECT OFFSET TO THE LABEL            CURLBTYP DS    X
            ENTRY TYPE                           CURLDROP EQU   X' 0C'
                  DROP USING REGISTER              CURLUSNG EQU   X'10'
                  SPECIFY USING REGISTER           CURLDTST EQU   X'18'
                  DATA-ONLY START                              \CURLDTND EQU
X'1C'                           DATA-ONLY END                    CURLABEL EQU
X'30'                           SIMPLE LABEL ENTRY               CURLADCN EQU
X'40'                           ADCON LOCATION                   C  URLVCON EQU
  X'50'                           V-CON LOCATION                   CURLBURG DS
  X                           USING REGISTER                       CURLBRLD DS
  H                           LENGTH IF RLD ENTRY ELSE 0           CURLBLBL DS
    0CL8                        LABEL                                CURLBINU DS
    XL4                         INITIAL REG VALUE FOR USING                   DS
    XL4                                                              ***********
****************  ********************************************         *     ***
** CONDITION CODE TABLE ENTRIES FOR THE CC COLUMN *****      *         * IN THE
TABLE, NON-NUMERIC ENTRIES GIVE THE INSTRUCTION MNEMONIC TO  *         * BE USED
 WHEN THE MASK IN THE INSTRUCTI  ON MATCHES THE COLUMN NUMBER. *         * WHEN
THE ENTRY IS NUMERIC, IT IS THE CONDITION TO BE USED, AND THE  *         * MNEMO
NIC WILL BE BC OR BCR.                                         *         *******
**********************************************  ******************         *
        0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F           *         *****
******************************************************************         CCTBL
NT  DC    0CL48          CONDITION CODE TABLE. 48-BYTE ENTRIE  S             CC0
1     DC    CL48'NOP1  2  3  4  5  6  7  8  9  10 11 12 13 14 B  '           CC0
2     DC    CL48'NOP1  BH 3  BL 5  6  BNEBE 9  10 BNL12 BNH14 B  '           CC0
3     DC    CL48'NOP1  2  3  4  5  6  BNZBZ 9  10 11 12 13 14 B  '             C
C04     DC    CL48'NOP1  2  3  4  5  6  BNEBE 9  10 11 12 13 14 B  '           C
C05     DC    CL48'NOP1  BH 3  BL 5  6  BNEBE 9  10 BNL12 13 14 B  '           C
C06     DC    CL48'NOPBO BP 3  4  5  6  BNZBZ 9  10 11 12 13 14 B  '           C
C07     DC      CL48'NOP1  2  3  BM 5  6  BNZBZ 9  10 11 12 13 14 B  '
 CC08     DC    CL48'NOP1  BP 3  BM 5  6  BNZBZ 9  10 BNM12 BNP14 B  '
 CC09     DC    CL48'NOPBO BP 3  BM 5  6  BNZBZ 9  10 BNM12 BNPBNOB  '
 CC0A     DC    CL48'NOP1    BP 3  4  5  6  BNZBZ 9  10 11 12 13 14 B  '
   CC0B     DC    CL48'NOPBO 2  3  BM 5  6  BNZBZ 9  10 BNM12 13 BNOB  '
   CC0C     DC    CL48'NOPBO 2  3  4  5  6  BNZBZ 9  10 11 12 13 BNOB  '
   CC0D     DC    CL48'NOP1  BH 3  BL 5    6  BNEBE 9  10 11 12 13 14 B  '
     CC0E     DC    CL48'NOP1  BP 3  BM 5  6  BNZBZ 9  10 11 12 13 14 B  '
     ***********************************************************************
     * THIS DSECT DESCRIBES AN ENTRY IN THE LABEL TABLE                      *
       * THE TABLE ADDRESSES ARE LOCATED AT LBLTBADR, LBLTBEND, AND CURRLBLA.*
       * IF THE LENGTH OF LBLENTRY CHANGES, CHANGE HOLDLABL, AS WELL.        *
       ****************************************************************+ *******
         LBLDSECT DSECT ,                       DESCRIBES A LABEL TAB  LE ENTRY
           LBLENTRY DS    0CL16                   LABEL TABLE ENTRY
           LBLOFSET DS    F                           CSECT OFFSET TO THE LABEL
           LBLTYPE  DS    X                           ENTRY TYPE: 0C=DROP,10=USI
NG           *                                            18=DATA START, 1C=DATA
 END         *                                            30=LABEL,40=ADCON,50=V
CON          LBLUREG  DS    X                           USING REGISTER
             LBLRLD  LN DS    H                           LENGTH IF RLD ENTRY EL
SE 0           LBLLABEL DS    0CL8                        LABEL
               LBLINITU DS    XL4                         INITIAL REG VALUE FOR
USING                   DS    XL4
                 ***************************************************************
********         * DESCRIBES AN ENTRY IN AN OP-CODE TABLE
       *         ********************************  *****************************
**********         OPCODES  DSECT ,                       DESCRIBES AN OP-CODE T
ABLE ENTRY         OPCENTRY DS    0XL12                   OP-CODE TABLE ENTRY
                   OPCODE1  DS    XL1                        OP-  CODE BYTE 1
                     OPCODE2  DS    XL1                        OP-CODE BYTE 2 OR
 ZERO                OPCMNEM  DS    0CL5                       MNEMONIC -OR-
                     OPCTWO2  DS    CL1                          '2' FOR 2-BYTE
  OP-CODES             *                                           X'00' IF NOT
AN OP-CODE             OPCSRCH2 DS    AL4                          SRCH ADDRESS
FOR 2-BYTE O-C         OPCFORMT DS    XL1                        INSTRUCTION FOR
MAT CODE                 E1       EQU   X'01' OCOCOCOC                 <==> (NON
E)                       RI1      EQU   X'02' OCOCR1OCI2I2I2I2         <==> R1,I
2                        RR1      EQU   X'03' OCOCR1R2                 <==> R1,R
2                        RR2        EQU   X'04' OCOCI1I1                 <==> I1
                           RR3      EQU   X'05' OCOCR1--                 <==> R1
                           RRE1     EQU   X'06' OCOCOCOC----R1R2         <==> R1
,R2                        RRE2     EQU   X' 07' OCOCOCOC----R1--         <==>
R1                           RRE3     EQU   X'08' OCOCOCOC--------         <==>
(NONE)                       RRF1     EQU   X'09' OCOCOCOCR1--R3R2         <==>
R1,R3,R2                                 \RRF2     EQU   X'0A' OCOCOCOCM3--R1R2
         <==> R1,M3,R2                     RRF3     EQU   X'0B' OCOCOCOCR3M4R1R2
         <==> R1,R3,R2,M4                  RS1      EQU   X'0C' OCOCR1R3B2D2D2D2
         <==> R1,R3,D2(B2)                 R  S2      EQU   X'0D' OCOCR1--B2D2D2
D2         <==> R1,D2(B2)                    RS3      EQU   X'0E' OCOCR1M3B2D2D2
D2         <==> R1,M3,D2(B2)                 RSI1     EQU   X'0F' OCOCR1R3I2I2I2
I2         <==> R1,R3,I2                     RX1      EQU     X'10' OCOCR1X2B2D2
D2D2         <==> R1,D2(X2,B2)                 RX2      EQU   X'11' OCOCM1X2B2D2
D2D2         <==> M1,D2(X2,B2)                 RXE1     EQU   X'12' OCOCR1X2B2D2
D2D2----OCOC <==> R1,D2(X2,B2)                 RXF1     EQU   X'13' OCOCR3  X2B2
D2D2D2R1--OCOC <==> R1,R3,D2(X2,B2)              S1       EQU   X'14' OCOC----B2
D2D2D2         <==> D2(B2)                       S2       EQU   X'15' OCOCOCOC--
------         <==> (NONE)                       S3       EQU   X'1E' OCOCOCOCB2
D2D2D2           <==> D2(B2)                       SI1      EQU   X'16' OCOCI2I2
B1D1D1D1         <==> D1(B1),I2                    SS1      EQU   X'17' OCOCLLLL
B1D1D1D1B2D2D2D2 <==> D1(LL,B1),D2(B2)             SS2      EQU   X'18' OCOCL1L2
B1D1D1D1B2D2D2D2 <==> D1  (L1,B1),D2(L2,B2)          SS3      EQU   X'19' OCOCR1
R3B2D2D2D2B4D4D4D4 <==> R1,D2(B2),R3,D4(B4)          SS4      EQU   X'1A' OCOCR1
R3B1D1D1D1B2D2D2D2 <==> D1(R1,B1),D2(B2),R3          SS5      EQU   X'1B' OCOCL1
I3B1D1D1D1B2D2D2D2 <==> D1(L1,B1),D2(B2  ),I3          SSE1     EQU   X'1C' OCOC
OCOCB1D1D1D1B2D2D2D2 <==> D1(B1),D2(B2)                OPCFLAGS DS    XL1
              FLAGS:                                   FP       EQU   X'40'
                FLOATING POINT INSTRUCTION               PR       EQU   X'20'
                  PRIVILEGED INSTRUCTION                 OPCNDCOD DS    XL1
                CONDITION CODE TABLE LINE                OPCFLAG1 DS    XL1
                FLAG BYTE:                               *
     X'80'=UNUSUAL TEST REQUIRED                           *
     X'01'=R2 MUST BE 0,1,4,5,8,9,12, OR 13                OPCFLAG2 DS    XL1
                  FLAG BYTE                                *
       X'80'=R1 MUST BE 0,1,4,5,8,9,12, OR 13                *
       X'40'=M3 MUST BE 0,1,4,5,6, OR 7                      *
       X'20'=INSTRUCTION BITS 16-25 MUST BE 0'S              *
       X'10'=R1 MUS  T NOT EQUAL R2                            *
         X'08'=R3 MUST BE AN EVEN NUMBERED REGISTER            *
         X'04'=R2 MUST BE AN EVEN NUMBERED REGISTER            *
         X'02'=R1 MUST BE AN EVEN   NUMBERED REGISTER            *
           X'01'=IF R2=0, OUTPUT 0, NOT R0                       REBUILD  CSECT
                                                                          LTORG
                                                 +                 *
                                                             00024310SVCOP    DS
    0CL10                   SVC NAME TABLE                   00024320         DC
    AL1(0),CL9'EXCP/XDAP'                                    00024330         DC
    AL1(1),CL9'WAIT(R)  '                                    0  0024340
DC    AL1(2),CL9'POST/PRTO'                                    00024350
DC    AL1(3),CL9'EXIT     '                                    00024360
DC    AL1(4),CL9'GETMAIN  '                                    00024370
  DC    AL1(5),CL9'FREEMAIN '                                    00024380
  DC    AL1(6),CL9'LINK     '                                    00024390
  DC    AL1(7),CL9'XCTL     '                                    00024400
  DC    AL1(  8),CL9'LOAD     '                                    00024410
    DC    AL1(9),CL9'DELETE   '                                    00024420
    DC    AL1(10),CL9'GET/FREE '                                   00024430
    DC    AL1(11),CL9'TIME       '                                   00024440
      DC    AL1(12),CL9'SYNCH    '                                   00024450
      DC    AL1(13),CL9'ABEND    '                                   00024460
      DC    AL1(14),CL9'SPIE     '                                     00024470
        DC    AL1(15),CL9'ERREXCP  '                                   00024480
        DC    AL1(16),CL9'PURGE    '                                   00024490
        DC    AL1(17),CL9'RESTORE  '                                     0002450
0         DC    AL1(18),CL9'BLDL/FIN '                                   0002451
0         DC    AL1(19),CL9'OPEN     '                                   0002452
0         DC    AL1(20),CL9'CLOSE    '                                     00024
530         DC    AL1(21),CL9'STOW     '                                   00024
540         DC    AL1(22),CL9'OPEN  J  '                                   00024
550         DC    AL1(23),CL9'CLOSE T  '                                   00024
560           DC    AL1(24),CL9'DEVTYPE  '                                   000
24570         DC    AL1(25),CL9'TRKBAL   '                                   000
24580         DC    AL1(26),CL9'LOCATE   '                                   000
24590         DC    AL 1(27),CL9'OBTAIN   '                                   0
0024600         DC    AL1(28),CL9'CVOL     '                                   0
0024610         DC    AL1(29),CL9'SCRATCH  '                                   0
0024620            \         DC    AL1(30),CL9'RENAME   '
             00024630         DC    AL1(31),CL9'FEOV     '
             00024640         DC    AL1(32),CL9'NO MACRO '
             00024650           DC    AL1(33),CL9'IOHALT   '
               00024660         DC    AL1(34),CL9'MGCR/QED '
               00024670         DC    AL1(35),CL9'WTO/WTOR '
               00024680         DC      AL1(36),CL9'WTL      '
                 00024690         DC    AL1(37),CL9'SEGLD/SEG'
                 00024700         DC    AL1(39),CL9'LABEL    '
                 00024710         DC    AL1(40),CL9'  EXTRACT  '
                   00024720         DC    AL1(41),CL9'IDENTIFY '
                   00024730         DC    AL1(42),CL9'ATTACH   '
                   00024740         DC    AL1(43),CL9'CIRB     '
                     00024750         DC    AL1(44),CL9'CHAP     '
                     00024760         DC    AL1(45),CL9'OVLYBRCH '
                     00024770         DC    AL1(46),CL9'TTIMER   '
                       00024780         DC    AL1(47),CL9'STIMER   '
                       00024790         DC    AL1(48),CL9'DEQ      '
                       00024800         DC    AL1(51),CL9'SNAP/SDUM'
                         00024810         DC    AL1(52),CL9'RESTART  '
                         00024820         DC    AL1(53),CL9'RELEX    '
                         00024830         DC    AL1(54),CL9'DISABLE  '
                         0002484  0         DC    AL1(55),CL9'EOV      '
                           00024850         DC    AL1(56),CL9'ENQ/RESE '
                           00024860         DC    AL1(57),CL9'FREEDBUF '
                           00024870         DC      AL1(58),CL9'RELBUF   '
                             00024880         DC    AL1(59),CL9'OLTEP    '
                             00024890         DC    AL1(60),CL9'(E)STAE  '
                             00024900         DC    AL1(61),CL  9'IKJEGS6A '
                               00024910         DC    AL1(62),CL9'DETACH   '
                               00024920         DC    AL1(63),CL9'CHKPT    '
                               00024930         DC    AL1(64),CL9'RDJFCB   '
                                 00024940         DC    AL1(66),CL9'BTAMTEST '
                                 00024950         DC    AL1(67),CL9'SYNADAF  '
                                 00024960         DC    AL1(68),CL9'SYNADRLS '
                                   00024970         DC    AL1(69),CL9'BSP      '
                                   00024980         DC    AL1(70),CL9'GSERV    '
                                   00024990         DC    AL1(71),CL9'ASGNBFR  '
                           +         00025000         DC    AL1(72),CL9'CHATR
 '                                     00025010         DC    AL1(73),CL9'SPAR
   '                                   00025020         DC    AL1(74),CL9'DAR
   '                                   00025030         DC    AL1(75),CL9'DQUEUE
   '                                   0  0025040         DC    AL1(76),CL9'NO M
ACRO '                                   00025050         DC    AL1(78),CL9'NO M
ACRO '                                   00025060         DC    AL1(79),CL9'STAT
US   '                                   00025070           DC    AL1(81),CL9'SE
TPRT   '                                   00025080         DC    AL1(82),CL9'DA
SDR    '                                   00025090         DC    AL1(83),CL9'SM
FWTM   '                                   00025100         DC    AL1(  84),CL9'
GRAPHICS '                                   00025110         DC    AL1(85),CL9'
DDRSWAP  '                                   00025120         DC    AL1(86),CL9'
ATLAS    '                                   00025130         DC    AL1(87),CL9'
DOM        '                                   00025140         DC    AL1(88),CL
9'MOD88    '                                   00025150         DC    AL1(91),CL
9'VOLSTAT  '                                   00025160         DC    AL1(92),CL
9'TCBEXCP  '                                     00025170         DC    AL1(93),
CL9'TGET/TPU '                                   00025180         DC    AL1(94),
CL9'STCC     '                                   00025190         DC    AL1(95),
CL9'SYSEVENT '                                     00025200         DC    AL1(96
),CL9'STAX     '                                   00025210         DC    AL1(97
),CL9'TSO TEST '                                   00025220         DC    AL1(98
),CL9'PROTECT  '                                     00025230         DC    AL1(
99),CL9'DDDYNAM  '                                   00025240         DC    AL1(
100),CL9'IKJEFFIB '                                  00025250         DC    AL1(
101),CL9'QTIP     '                                  00025260           DC    AL
1(102),CL9'AQCTL    '                                  00025270         DC    AL
1(103),CL9'XLATE    '                                  00025280         DC    AL
1(104),CL9'TOPCTL   '                                  00025290         DC    AL
 1(105),CL9'IMAGLIB  '                                  00025300         DC
AL1(107),CL9'MODESET  '                                  00025310         DC
AL1(109),CL9'ESR TYPE4'                                  00025320       
        DC    AL1(110),CL9'DSTATUS  '                                  00025330
        DC    AL1(111),CL9'NO MACRO '                                  00025340
        DC    AL1(112),CL9'PGRLSE   '                                  00025350
          DC    AL1(113),CL9'PGFIX,CL9'                                  0002536
0         DC    AL1(114),CL9'EXCPVR   '                                  0002537
0         DC    AL1(116),CL9'ESR TYPE1'                                  0002538
0         DC      AL1(117),CL9'DEBCHK   '                                  00025
390         DC    AL1(119),CL9'TESTAUTH '                                  00025
400         DC    AL1(120),CL9'GET/FREEM'                                  00025
410         DC    AL1(121),CL9  'VSAM     '                                  000
25420         DC    AL1(122),CL9'EVENTS   '                                  000
25430         DC    AL1(123),CL9'PURGEDQ  '                                  000
25440         DC    AL1(124),CL9'TPIO     '                                    0
0025450         DC    AL1(125),CL9'EVENTS   '                                  0
0025460         DC    AL1(126),CL9'MSS INTFC'                                  0
0025470         DC    X'FF'                   END OF TABLE
 00025480*********************************************************************
         *             REGISTER EQUATES                                      *
         ******************************************************************  ***
           R0       EQU   0
           R1       EQU   1
           R2       EQU   2
             R3       EQU   3
             R4       EQU   4
             R5       EQU   5
             R6       EQU     6
               R7       EQU   7
               R8       EQU   8
               R9       EQU   9
                 R10      EQU   10
                 R11      EQU   11
                 R12      EQU   12
                   R13      EQU   13
                   R14      EQU   14
                   R15      EQU   15                                  #
                              END
                                            \Subject:     Re: Fw: [cbt-tape] R
e: S0C4 ,File 234, Disassembler                From:        John P Kalinich <jka
linic@csc.com>                                 Date:        Sun, 17 Sep 2006 10:
55:33 -0500                                    T  o:          Sam Golob <IBMUSER
@cbttape.org>
                                                 John P Kalinich wrote:
 
                                                   Sam,
 
                                                   Can you update the CBT?
 
                                                     Regards,
                                                     John K
 
                                                       Note from Sam Golob:  Joh
n Kalinich posted a question about this                     disassembler on cbt-
tape@yahoogroups.com, and re  ceived a reply                  from B. Einsarguei
x with code changes to solve the problem.                     These code changes
 have been applied to the source module                       called RESOURCE.
 
                                                           ----- Forwarded by Jo
hn P Kalinich/DEF/CSC on 09/15/2006 10:28 AM -----
                                                                  "beinsargueix"
                                                                  <b.einsargueix
@free.fr>
                                                                  Sent by  :
              cbt-tape@yahoogroups.com                              Subject:
              [cbt-tape] Re: S0C4 ,File 234,
              Disassembler                                          Time:
                09/15/2006 09:17 AM
                                                                 Hello,
 
                                                                   I had the sam
e problem and fixed it. There is a problem in the STORAGE          OBTAIN in the
 RESOURCE module :                                                 Original :
                                                                     ***********
**********************************************************           * GET STORA
GE FOR TABLES AND OPEN FILES FOR PROCESSING              *           ***********
*****************************************************+ *****           GETSTOR
STORAGE OBTAIN,LENGTH=LBLTBEND,LOC=ANY GET LABEL ST  ORAGE
  ST    R1,LBLTBADR             SAVE THE GOTTEN ADDRESS
  A     R1,LBLTBEND             SAVE THE
  ST    R1,LBLTBEND                  TABLE END ADDRESS                     Chang
ed to :                                                                    *****
****************************************************************           * PRE
PARE REGS BEFORE ISSUING STORAGE OBTAIN                        *           *****
*  ***************************************************************           GET
STOR  ST    R10,LBLTBR10             SAVE R10 BEFORE OBTAIN
      ST    R11,LBLTBR11             SAVE R11 BEFORE OBTAIN
      L     R10,  LBLTBXXX             MAX LENGTH IN R10
        L     R11,LBLTBEND             MIN LENGTH IN R11                       *
********************************************************************           *
 GET STORAGE FOR TABLES AND OPE  N FILES FOR PROCESSING              *
 *********************************************************************
 XETSTOR  STORAGE OBTAIN,LOC=ANY,RTCD=MYRC,COND=NO,CHECKZERO=YES,       X
                LENGTH=((R10),(R11))
            ST    R0,LBLTBZZZ             SAVE THE LENGTH OF GOTTEN
            ST    R1,LBLTBYYY             SAVE THE GOTTEN ADDRESS
            ST    R1,LBLTBADR             SAVE THE GOTTEN ADD  RESS
              A     R1,LBLTBEND             SAVE THE
              ST    R1,LBLTBEND                  TABLE END ADDRESS
     *********************************************************************
       * RESTORE REGS AFTER  ISSUEING STORAGE OBTAIN                       *
       *********************************************************************
                L     R10,LBLTBR10             RESTORE R10
                  L     R11,LBLTBR11             RESTORE R11
         Also add some fields under STORAGE AND FILE AREAS :
         *********************************************************************
         *        STORAGE  AND FILE AREAS                                     *
           *********************************************************************
           MYRC     DS    F                       DOUBLEWORD WORK AREA
                       }LBLTBXXX DC    A(32800*L'LBLENTRY)        SIZR OF 32,80
0 ENTRIES                LBLTBYYY DS    F                       ADDR   OF GOTTEN
 AREA                    LBLTBZZZ DS    F                       LENGTH OF GOTTEN
 AREA                    L  BLTBR10 DS    F                       SAVE AREA FOR
R10                        LBLTBR11 DS    F                       SAVE AREA FOR
R11
                           And it works..  ..!
 
                             --- In cbt-tape@yahoogroups.com, John P Kalinich <j
kalinic@...> wrote:
 
                               When I run Dick Thorton's new disassembler (CBT f
ile 234), I get                a S0C4 abend.  Has anyone run this  disa  ssemble
r successfully?
                                 Regards,
                                 John Kalinich
                                   Computer Sciences Corp
 
 
                                     //RESOURCE EXEC  PGM=RESOURCE,PARM=(FLTPT,S
UPVR) <==WANT
                                     FLOATPT,PRIV
 
                                       //STEPLIB  DD    DSN=AD.CMDLIB,DISP=SHR
                                       //SYSUDUMP DD    SYSOUT=*
                                       //SYSPRINT D  D    SYSOUT=*
                                         //SYSLIB   DD    DSN=AD.CMDLIB,DISP=SHR
                                         //SYSOUT   DD    DSN=TRIDJK.DEL.DISTEST
.ASM,DISP=(NEW,CATLG,DELETE),            //         UNIT=DISK,SPAC  E=(TRK,(15,5
),RLSE),                                   //         DSORG=PS,RECFM=FB,LRECL=80
                                           //SYSIN    DD    *
                                           DISTEST  DISTEST
                                             DATA 000020 00007F
                                             DATA 0002C8 00057F
                                             USING 000000 000006 F 000000
                                               USING 000006        3 000000
                                               ULABL SAVEAREA 000038 072
                                               ULABL MYLBL90  000090 002
                               +                 ULABL MYLBL12C 00012C 004
                                                   ULABL MYLBL2CA 0002CA 002
                                                   ULABL NOLBL34C 00034C 004
                                                   ULABL NOLBL384 000384 004
 
 
                                                     - DSN=AD.CMDLIB,VOL=SER=PER
M69  MEM=(DISTEST  ---------
                                                       at * short
 
                                                       NAME     ALIASOF     CREA
TED  SIZE SSI      ATTRIBUTES                            DISTEST           05/12
/28  1456          R24, AANY                             READLMOD          05/12
/28  2928          R24, A31                              REBUILD           05/12
/28 10288            R24, A31                              RESOURCE          05/
12/28 15656          R24, A31                              4 MEMBERS RMODE24; SI
ZE IS 30K
                        E                                    (See attached file:
 rebuild s0c4.txt)
                                                              {     
       \         TITLE '*** BUILD ASSEMBLER SOURCE FROM A LOAD MODULE ***'
         RESOURCE CSECT
         RESOURCE AMODE 31
         R  ESOURCE RMODE 24
           *********************************************************************
           * BUILDS AN ASSEMBLER LANGUAGE SOURCE PROGRAM FROM A LOAD MODULE IN *
           * A PDS OR A P  DSE. LOAD MODULE DATA IS OBTAINED USING THE READLMOD
 *           * SUBROUTINE, WHICH USES THE IEWBUFF AND IEWBIND MACROS. INITIAL
 *           * PROCESSING IS PERFORMED HERE INCLUDING OPENING FILES, GETTING
 *           * STORAGE FOR TABLES AND WO  RK AREAS, PROCESSING THE PARM FIELD ON
   *           * THE EXEC STATEMENT, PROCESSING CONTROL STATEMENTS, AND LOADING
THE*           * TEXT FOR THE CSECT TO BE DISASSEMBLED INTO MEMORY. WHEN INITIAL
   *           * PROCESSING IS COMPLETE, THE REBUILD PR  OGRAM IS CALLED WITH TH
E    *           * STAGE SET TO 1 FOR LABEL HANDLING, AND THEN A SECOND TIME WIT
H    *           * STAGE SET TO 2 FOR FINAL DISASSEMBLY.
     *           *
       *           * JCL DD STATEMENTS ARE REQUIRED AS FOLLOWS:
       *           *   SYSIN:    INPUT  RECFM=FB  LRECL=80   CONTROL STATEMENTS.
       *           *   SYSPRINT: OUTPUT RECFM=FBA LRECL=133  PRINT LISTING.
         *           *   SYSLIB:   INPUT  PDS OR PDSE RECFM=U  LOAD MODULE TO DI
SASSEMBLE*           *   SYSOUT:   OUTPUT RECFM=FB  LRECL=80   ASSEMBLER SOURCE
PROGRAM  *           *
         *             * CONTROL STATEMENTS ARE ENTERED FOR THE FOLLOWING PURPOS
ES:        *           *   1) COMMENTS: AN ASTERISK IN COLUMN 1 IDENTIFIES COMME
NTS        *           *   2) MEMBER AND CSECT NAME RECORD: THIS CONTROL STATEME
NT MUST BE *           *      THE F  IRST NON-COMMENT RECORD IN THE CONTROL FILE
. IT MUST    *           *      CONTAIN MEMBER NAME IN COL 1-8 AND CSECT NAME IN
 COL 10-17.  *           *   3) DATA ONLY RECORD (OPTIONAL): IDENTIFIES AREAS WI
THIN THE TEXT*           *      THAT CONTAIN NO IN  STRUCTIONS, ONLY DATA. MULTI
PLE DATA-ONLY  *           *      RECORDS CAN BE ENTERED, IN ANY ORDER. FORMAT I
S:             *           *         COL 1-5 = 'DATA '
               *           *         COL 6-11 = OFFSET TO START O  F DATA-ONLY A
REA              *           *         COL 12   = BLANK
                 *           *         COL 13-18 = OFFSET TO END OF DATA-ONLY AR
EA               *           *   4) USING RECORD (OPTIONAL): PROVIDES INFORMATIO
  N NEEDED TO      *           *      TO CREATE USING AND DROP STATEMENTS. FORMA
T IS:              *           *         COL  1-6  = 'USING '
                   *           *         COL  7-12 = HEX OFFSET TO WHERE THE USI
NG STATEMENT WI+ LL  *           *                     BE PLACED (IT WILL OCCUR
BEFORE THIS O  FFSET). *           *         COL  13   = BLANK
                       *           *         COL 14-19 = HEX OFFSET TO WHERE THE
 DROP STATEMENT WILL   *           *                     BE PLACED (IT WILL OCCU
R BEFORE THIS OFFSET). *             *                     IF BLANK, NO DROP WIL
L BE CREATED.            *           *         COL  20   = BLANK
                         *           *         COL  21   = REGISTER USED WITH TH
IS USING, 0-9 OR A-F     *           *           COL  22   = BLANK
                           *           *         COL 23-28 = INITIAL OFFSET VALU
E IN THE USING REGISTER.   *           *
                           *           *   5) USER LABEL R  ECORD (OPTIONAL): DE
FINE USER LABELS TO BE PLACED*           *      ON STATEMENTS WITHIN THE PROGRAM
. IF PROGRAM BASE REGISTERS  *           *      ARE SET UP WITH USING CARDS, THE
SE WILL ALSO BE GENERATED AS *           *      SYMBOLIC OPERANDS ON INST  RUCTI
ONS. FORMAT IS:                *           *         COL  1-5   = LITERAL 'ULABL
'                              *           *         COL   6    = BLANK
                               *           *         COL  7-14  = LABEL NAME
                                 *           *         COL  15    : BLANK
                                 *           *         COL 16-21  : OFFSET TO LE
FT END OF FIELD, IN HEX.         *           *         COL  22    : BLANK
                                   *           *         COL 23-25  : LENGTH OF
FIELD IN DECIMAL. 256 IS MAX.      *           *
                                   *           * NOTE: THE BAS R9,TESTPRNT AT TH
E EOJ LABEL IS FOR TESTING ONLY    *             *       AND CAN BE COMMENTED OU
T FOR NORMAL USE. IT PROVIDES A      *           *       PRINTOUT OF THE LABEL T
ABLE THAT CAN BE HELPFUL WHEN TESTING*           *       CHANGES.
                                     *           *
                                       *           * AUTHOR R THORNTON FEB 2002
                                       *           *****************************
****************************************           *                
                                                     ***************************
******************************************           *        SAVE REGISTERS, SE
T UP BASE REGS, CHAIN SAVE AREAS         *                       \*************
********************************************************                    USIN
G RESOURCE,R3,R4,R5,R6                                                      STM
  R14,R12,12(R13)         SAVE CALLER'S REGS                                  LR
    R3,R15                  SET UP BASE FIRST BASE REG                        LA
    R4,4095(R3)             SET UP SECOND                                     LA
    R4,1(R4)                    BASE REGISTER                                 LA
      R5,4095(R4)             SET UP THIRD
LA    R5,1(R5)                    BASE REGISTER
LA    R6,4095(R5)             SET UP THIRD
LA    R6,1(R6)                      BASE REGISTER
  LA    R15,MYSAVE              POINT TO MY REGISTER SAVE AREA
  ST    R15,8(R13)              SET LSA IN CALLER'S SAVE
  ST    R13,4(R15)              S  ET HSA IN MY SAVE AREA
    LR    R13,R15                 SET UP SAVE AREA POINTER
    B     PARMS                   BRANCH AROUND CONSTANTS
    DC    CL8'RESOURCE'           PROGRAM NAME I  DENTIFIER
      DC    CL8'&SYSDATE'           ASSEMBLY DATE
      DC    CL8'&SYSTIME'           ASSEMBLY TIME                            MYS
AVE   DS    18F                     MY REGISTER SAVE AREA                      *
********************************************************************           *
 PROCESS THE PARM STATEMENT: DEFAULT IS TO IGNORE ALL FLOATING     *           *
 POINT AND PRIVILEGED INSTRUCTIONS. IF PARM CONTAINS 'FLTPT' THEN  *
 * FLOATING POINT INSTRUCTIONS WILL BE INCLUDED AND/OR IF PARM       *
 * CONTAINS 'SUPVR' THEN PRIVILEGED INSTRUCTIONS WILL BE INCLUDED.   *
 *********************************************************************
 PARMS    L       R2,0(R1)                GET PARM FIELD ADDR
            CLC   0(2,R2),H0              ANY PARM DATA?
            BE    TBLMODS                 NO, CONTINUE
            CLC   0(2,R2),H5                VALID PARM LENGTH?
              BL    BADPARM                 NO
              BH    PMCK11                  MAYBE, TEST MORE ...
              CLC   2(5,R2),FLTPT             FLOATING POINT SPECIFIED?
                BNE   PM5CK2                  NO
                NI    UNWANTED,X'BF'          YES, TURN OFF '40' BIT
                B     TBLMODS                 CONTINUE
         PM5CK2   CLC   2(5,R2),SUPVR           SUPVR SPECIFIED?
                  BNE   BADPARM                 NO, ERROR
                  NI    UNWANTED,X'DF'          YES, TURN OFF '20' BIT   +
                    B     TBLMODS                 CONTINUE
             PMCK11   CLC   0(2,R2),H11             VALID PARM LENGTH?
                      BNE   BADPARM                 NO, ERROR
                      CLC   2(5,R2),FLTPT           FLOATING POINT SPECIFIED?
                        BNE   PM11CK2                 NO
                        NI    UNWANTED,X'BF'          YES, TURN OFF '40' BIT
                        B     PM11CK3                 CONTINUE
               PM11CK  2  CLC   2(5,R2),=CL5'SUPVR'     SUPVR SPECIFIED?
                          BNE   BADPARM                 NO, ERROR
                          NI    UNWANTED,X'DF'          YES, TURN OFF '20' BIT
                 PM11CK3  CLC   2(5,  R2),8(R2)           BOTH PARMS SAME?
                            BE    BADPARM                 YES, ERROR
                            CLI   7(R2),C','              COMMA SEPARATES?
                            BNE   BADPARM                   NO, ERROR
                              CLC   8(5,R2),FLTPT           FLOATING POINT SPECI
FIED?                         BNE   PM11CK4                 NO
                              NI    UNWANTED,X'BF'          YES, T  URN OFF '40'
 BIT                            B     TBLMODS                 CONTINUE
                       PM11CK4  CLC   8(5,R2),SUPVR           SUPVR SPECIFIED?
                                BNE   BADPARM                 NO, ERROR
                                  NI    UNWANTED,X'DF'          YES, TURN OFF '2
0' BIT                            B     TBLMODS                 CONTINUE
                         BADPARM  WTO   'RESOURCE: INVALID PARM ON EXEC STATEMEN
T',ROUTCDE=11                       ABEND 111,DUMP
                           *****************************************************
****************           * THIS ROUTINE MODIFIES THE OP-CODE TABLES TO ELIMINA
TE ENTRIES FOR *           * UN  WANTED FLOATING POINT AND/OR PRIVILEGED INSTRUC
TIONS.           *           ***************************************************
******************           TBLMODS  CLI   UNWANTED,0              FLOATING POI
NT/SUPVR WANTED?                      BE    GE TSTOR                 YES, BOTH.
 NO MOD NEEDED                 TSSTART  LA    R11,TABLTABL-4          POINT TO F
IRST TABLE ADDRESS -4                   LA    R12,OPCODTBL            POINT TO F
IRST TABLE                                 \TSNEXT   SR    R10,R10
    CLEAR FOR INSERT                                  IC    R10,UNWANTED
    PICK UP UNWANTED MASK                    TSCHKEND CLC   0(4,R12),HEXFFS
    END OF TABLE?                                       BE    TSSTEP
      YES, GO TO NEXT                                   USING OPCODES,R12
                                                        EX    R10,TSCHKWNT
      THIS INSTRUCTION WANTED?                          BZ      TSENTSTP
        YES                                               MVC   OPCENTRY,XZROS
        CLEAR THE ENTRY                          TSENTSTP LA    R12,L'OPCENTRY(R
12)     STEP TO NEXT TABLE ENTRY                          B     TSCHKEND
          CONTINUE                                 TSSTEP   LA    R11,4(R11)
          STEP TO NEXT TABLE ADDRESS                        CLC   0(4,R11),HEXFF
S         END OF ADDRESS TABLE?                             BE    TBLCMPRS
          Y  ES, GO COMPRESS TABLES                           L     R12,0(R11)
            POINT TO NEXT TABLE                               B     TSCHKEND
            GO MODIFY NEXT TABLE                     TSCHKWNT TM    OPCFLAGS,0
            EXECUTED INSTR  UCTION                              DROP  R12
                                                       *************************
********************************************           * COMPRESS THE OP-CODE TA
BLES AFTER CLEARING ENTRIES FOR UNWANTED     *           * INSTRUCTIONS. THE GEN
ERAL INSTRUCTION TABLE, OPCODTBL, IS NOT     *           * COMPRESSED, AS IT CON
TAINS 256 ENTRIES, AND IS ACCESSED DIRECTLY  *           * USING THE FIRST BYTE
OF OP-CODE AS AN INDEX.                      *             *********************
************************************************           TBLCMPRS LA    R10,TA
BLTABL            POINT TO FIRST TABLE ADDRESS             TCNEX10  CLC   0(4,R1
0),HEXFFS         END OF ADDRESS TABLE?                             BE      GETS
TOR                 YES, ALL THRU HERE                                L     R11,
0(R10)              POINT TO OP-CODE TABLE                            USING OPCO
DES,R11                                                      TCNEX11  CLC   0(4,
R11),H  EXFFS         END OF OP-CODE TABLE?                             BE    TC
STEP10                YES, STEP TO NEXT TABLE                           CLI   OP
CMNEM,0               THIS A WANTED INSTRUCTION?                        BNE   TC
STEP11                  YES                                               LA
R12,L'OPCENTRY(R11)     NO, STEP TO NEXT ENTRY                   TCNEX12  CLC
0(4,R12),HEXFFS         END OF OP-CODE TABLE?                             BNE
TCCHKWNT                NO, CHECK FO  R WANTED INSTRUCTION                  MVC
  OPCENTRY(4),HEXFFS      YES, SET TABLE END                                B
  TCSTEP10                GO TO NEXT TABLE                         TCCHKWNT CLI
  OPCMNEM-OPCENTRY(R12),0 THIS A WANTED INSTRUCTION+ ?                        BE
    TCSTEP12                NO, KEEP GOING
MVC   0(L'OPCENTRY,R11),0(R12) MOVE WANTED ENTRY BACK
XC    1(L'OPCENTRY-1,R12),1(R12) CLEAR THE ENTRY MOVED
B     TCSTEP11                CONTINUE IN TABLE                          TCSTEP1
2 LA    R12,L'OPCENTRY(R12)     YES, STEP TO NEXT ENTRY
  B     TCNEX12                 CONTINUE COMPRESSION                     TCSTEP1
1 LA    R11,L'OPCENTRY(R11)     STEP TO NEXT TABLE ENTRY
    B     TCNEX11                 CONTINUE                                 TCSTE
P10 LA    R10,4(R10)              STEP TO NEXT TABLE ADDRESS
    B     TCNEX10                 GO COMPRESS NEXT TABLE
    DROP  R11                                                                ***
******************************************************************           * G
ET STORAGE FOR TABLES AND OPEN FILES FOR PROCESSING              *           ***
*****************************  *************************************           G
ETSTOR  STORAGE OBTAIN,LENGTH=LBLTBEND,LOC=ANY GET LABEL STORAGE
        ST    R1,LBLTBADR             SAVE THE GOTTEN ADDRESS
        A     R1,LBLTBEND             SAVE T  HE
          ST    R1,LBLTBEND                  TABLE END ADDRESS
          OPEN  (SYSPRINT,OUTPUT,SYSOUT,OUTPUT,SYSIN) OPEN FILES
 **********************************************************  ***********
   * READ CONTROL CARD FILE AND PROCESS THE STATEMENTS                 *
   *********************************************************************
   IIREAD   BAS   R9,READCNTL             READ NEXT CONTROL RECORD
              CLI   MORECNTL,C'Y'           GOT A CONTROL RECORD?
              BE    IIGOT1                  YES
              CLI   GOTMCREC,C'Y'           NO, GOT A MEMBER/CSECT CARD?
                BE    EXEC                    YES, EXIT
                MVC   PRT(36),=CL36'*** NO CONTROL RECORDS IN SYSIN FILE'
                BAS   R9,PRINT                PRINT ERROR MESSAGE
                WTO   '* ** NO CONTROL RECORDS IN SYSIN FILE',ROUTCDE=11
                  MVC   RETCODE+2(2),H8         SET RETURN CODE = 8
                  ABEND 111,DUMP                TERMINATE IN ERROR
                     \IIGOT1   CLI   GOTMCREC,C'Y'           ALREADY HAD MEMBER
/CSECT?                         BE    IIGOT2                  YES
                                BAS   R9,MEMBCSEC             NO, GO PROCESS MEM
BER/CSECT                         B     IIREAD                  GO READ NEXT CON
TROL RECORD              IIGOT2   CLC   CNTLCARD(5),=CL5'DATA ' THIS A DATA-ONLY
 RECORD?                          BNE   IIGOT3                  NO
                                  BAS     R9,DATAONLY             YES, GO PROCES
S IT                                B     IIREAD                  CONTINUE
                           IIGOT3   CLC   CNTLCARD(6),=CL6'ULABL ' THIS A USER L
ABEL CARD?                          BNE   IIGOT4                    NO
                                      BAS   R9,ULABEL               YES, GO PROC
ESS ULABL                             B     IIREAD                  CONTINUE
                             IIGOT4   CLC   CNTLCARD(6),=CL6'USING '   THIS A US
ING RECORD?                             BNE   IIBADCRD                NO
                                        BAS   R9,USINGCRD             YES, GO PR
OCESS USING                             B     IIREAD                  CONTINUE
                                 IIBADCRD MVC   PRT(39),=CL39'INVALID CONTROL RE
CORD ABOVE IS DROPPED'                    BAS   R9,PRINT                PRINT ME
SSAGE                                     MVC   RETCODE+2(2),H8         SET RETU
RN CODE = 8                                 WTO   'DROPPED AN INVALID CONTROL RE
CORD',ROUTCDE=11                            B     IIREAD                  CONTIN
UE                                 *********************************************
************************             * INITIALIZATION FINISHED. LOAD THE DISASSE
MBLY ROUTINE. CALL ONCE  *           * FOR LABEL TABLE BUILD, THEN A SECOND TIME
 FOR THE FINAL OUTPUT    *           *******************************************
**************************           EXEC     LOA  D  EP=REBUILD              GE
T THE DISASSEMBLY MODULE                        ST    R0,REBLDEP              SA
VE ENTRY POINT ADDRESS                          LA    R1,REBLDPRM             PO
INT TO PARAMETERS                               L     R15,REBLDE  P
POINT TO DISASSEMBLY MODULE                       BASR  R14,R15
PERFORM LABEL TABLE BUILD                         MVI   STAGE,2
SET STAGE 2 INDICATOR                             LA    R1,REBLDPRM
  POINT TO PARAMETERS                               L     R15,REBLDEP
  POINT TO DISASSEMBLY MODULE                       BASR  R14,R15
  PERFORM DISASSEMBLY                      *************************************
**************  ******************           *        TERMINATE PROCESSING
                                 *           ***********************************
**********************************           EOJ      EQU   *
                             +                          BAS   R9,TESTPRNT
      ????TESTING DISPLAYS?  ????                         CLOSE (SYSPRINT,,SYSIN
,,SYSOUT) CLOSE FILES                                     L     R13,4(R13)
        POINT TO CALLER'S SAVE AREA                       L     R14,12(R13)
        RESTORE RETURN REG: R14                             L     R15,RETCODE
          SET RETURN CODE                                   LM    R0,R12,20(R13)
          RESTORE CALLER'S REGS 0-12                        BR    R14
          RETURN                                   ******  *********************
******************************************           *        READ NEXT CONTROL
RECORD                                   *           ***************************
******************************************           READCNTL ST    R9,R  C9
              SAVE RETURN ADDRESS                      RCGET    GET   SYSIN,CNTL
CARD          READ CONTROL CARD                                 MVC   PRT(21),=C
L21'CONTROL RECORD READ: '                                      MVC   PRT+21(59)
,CNTLCA  RD     MOVE CONTROL RECORD                               BAS   R9,PRINT
                PRINT IT                                          CLI   CNTLCARD
,C'*'           COMMENT?                                          BE    RCGET
                YES                                        RCXIT    L     R9,RC9
                  GET RETURN ADDRESS                                BR    R9
                  EXIT                                     RCEOF    MVI   MORECN
TL,C'N'           SET EOF INDICATOR                                   B     RCXI
T                   AND EXIT                                 RC9      DC    A(0)
                    RETURN ADDRESS                           *******************
**************************************************             *        PROCESS
MEMBER/CSECT CONTROL RECORD                        *           *****************
****************************************************           MEMBCSEC ST    R9
,MC9                  SAVE RETURN ADDRESS                                 XC
CURRINFO(CURREND-CURRINFO),CURRINFO CLEAR CURRENT INFO                    XC
TEXTENDA,TEXTENDA       SAVE TEXT LENGTH                                  MVC
PRMEMBER,CCMEMBER       MOVE REQUESTED MEMBER NAME                        MVC
CU RRMEMB,CCMEMBER       SAVE REQUESTED MEMBER NAME                        MVC
  PRMCSECT,CCCSECT        MOVE REQUESTED CSECT NAME                         MVC
  CURRCSCT,CCCSECT        SAVE REQUESTED CSECT NAME                       
\         MVC   PRT(29),=CL29'CONTROL CARD READ HAS MEMBER='
          MVC   PRT+29(8),CCMEMBER      MOVE MEMBER NAME
          MVC   PRT+39(6),=CL6'CSECT='
            MVC   PRT+46(8),CCCSECT       MOVE CSECT NAME
            BAS   R9,PRINT                PRINT CONTROL CARD INFO
            L     R1,LBLTBADR             POINT TO 1ST LABEL TABLE ENTRY
            ST      R1,CURRLABL             SET CURRENT LABEL ADDRESS
              MVI   0(R1),X'FF'             SET TABLE END ADDRESS
              BAS   R9,GETESD               PROCESS ESD'S FOR THE CSECT
              BAS   R9,GETRLD                 PROCESS RLD'S FOR THE CSECT
                BAS   R9,GETTEXT              GET TEXT FOR THE CSECT
                MVI   GOTMCREC,C'Y'           INDICATE MEMBER/CSECT REC DONE
       MCXIT    L     R9,MC9                  G  ET RETURN ADDRESS
                  BR    R9                      EXIT
         MC9      DC    A(0)                    RETURN ADDRESS
         *****************************************************  ****************
           * PROCESS DATA-ONLY CONTROL RECORDS: VALIDATE THE START AND END     *
           * OFFSETS, THEN BUILD LABEL TABLE ENTRIES FOR THE START OF THE      *
           * AREA AND FOR THE END OF THE AREA.
 *           *******************************************************************
**           DATAONLY ST    R9,DO9                  SAVE RETURN ADDRESS
                      TRT   CNTLCARD+5(6),CHECKHEX  IS START OFFSET VALID HEX?
                        BNZ   DOBADCRD                NO, ERROR
                        TRT   CNTLCARD+12(6),CHECKHEX IS END OFFSET VALID HEX?
                        BNZ   DOBADCRD                NO, ERROR
                        L       R1,CURRLABL             POINT TO CURRENT LABEL A
REA                       USING LBLDSECT,R1
                          TR    CNTLCARD+5(6),TRHEX     MAKE C1=FA, C2=FB, ... E
TC                        PACK  LBLOFSET(5  ),CNTLCARD+5(7) PACK TO MAKE HEX
                            MVI   LBLOFSET+4,C' '         CLEAR TRASH
                            MVC   HOLDSTRT,LBLOFSET       SAVE START OFFSET
                            MVI   LBLTYPE,X'18'             TYPE IS DATA-ONLY ST
ART                           XC    LBLUREG(11),LBLUREG     REST IS N/A
                              BAS   R9,ADDLABEL             GO PUT IT IN THE TAB
LE                            L     R1,CURRLABL             POINT TO CUR  RENT L
ABEL AREA                       TR    CNTLCARD+12(6),TRHEX    MAKE C1=FA, C2=FB,
 ... ETC                        PACK  LBLOFSET(5),CNTLCARD+12(7) PACK TO MAKE HE
X                               MVI   LBLOFSET+4,C' '         CLEAR TRASH
       +                          CLC   HOLDSTRT,LBLOFSET       IS START LESS TH
AN EN  D?                           BNL   DOBADCRD                NO, ERROR
                                    MVI   LBLTYPE,X'1C'           TYPE IS DATA-O
NLY END                             XC    LBLUREG(11),LBLUREG     REST IS N/A
                                      BAS   R9,ADDLABEL             GO PUT IT IN
 THE TABLE                            B     DOXIT                   AND EXIT
                                      DROP  R1
                             DOBADC  RD MVC   PRT(41),=CL41'INVALID DATA-ONLY RE
CORD ABOVE IS DROPPED'                  BAS   R9,PRINT                PRINT MESS
AGE                                     MVC   RETCODE+2(2),H8         SET RETURN
 CODE = 8                               WTO   'DRO  PPED AN INVALID DATA-ONLY CO
NTROL RECORD',ROUTCDE=11         DOXIT    L     R9,DO9                  GET RETU
RN ADDRESS                                BR    R9                      EXIT
                                 DO9      DC    A(0)                      RETURN
 ADDRESS                           *********************************************
************************           * PROCESS USING CONTROL RECORDS: FIRST VALIDA
TE THE HEX OFFSET AND  *           * FIELDS. FORMAT A LABEL ENTRY FOR THE USING
  AND ADD IT TO THE LABEL*           * TABLE. IF A DROP LOCATION IS PROVIDED, BU
ILD A DROP ENTRY AND ADD *           * IT TO THE LABEL TABLE.
                         *           *******************************************
***************  ***********           USINGCRD ST    R9,UC9                  SA
VE RETURN ADDRESS                               TRT   CNTLCARD+6(6),CHECKHEX  IS
 USING OFFSET VALID HEX?                        BNZ   UCBADCRD                NO
, ERROR                                           TRT   CNTLCARD+20(1),CHECKHEX
IS REGISTER VALID HEX?                            BNZ   UCBADCRD
NO, ERROR                                         TRT   CNTLCARD+22(6),CHECKHEX
 IS USING INITIAL VALUE HEX?                        BNZ   UCBADCRD
  NO, ERROR                                         CLC   CNTLCARD+13(6),BLANKS
  ANY DROP OFFSET ENTERED?                          BE    UCFORMAT
  NO                                                TRT   CN TLCARD+13(6),CHECK
HEX  IS USING INITIAL VALUE HEX?                      BNZ   UCBADCRD
    NO, ERROR                                UCFORMAT L     R1,CURRLABL
    POINT TO CURRENT LABEL AREA                          \         USING LBLDSE
CT,R1                                                               TR    CNTLCA
RD+6(6),TRHEX     MAKE C1=FA, C2=FB, ... ETC                        PACK  LBLOFS
ET(5),CNTLCARD+6(7) PACK TO MAKE HEX                                  MVI   LBLO
FSET+4,C' '         CLEAR TRASH                                       MVC   HOLD
STRT,LBLOFSET       SAVE START OFFSET                                 MVI   LBLT
YPE,X'10'           TYPE IS USING                                     TR      CN
TLCARD+20(1),TRHEX    MAKE C1=FA, C2=FB,... ETC                         MVC   LB
LUREG,CNTLCARD+20     MOVE REGISTER                                     NI    LB
LUREG,X'0F'           CLEAR ZONE NYBBLE                                 MVC   HO
LDREG,LBLU  REG         SAVE REGISTER VALUE                               XC
LBLRLDLN(10),LBLRLDLN   ZERO OUT REMAINDER                                TR
CNTLCARD+22(6),TRHEX    MAKE C1=FA, C2=FB, ... ETC                        MVI
HOLDINIU,0              C  LEAR HIGH ORDER BYTE                             PACK
  HOLDINIU+1(4),CNTLCARD+22(7) PACK TO MAKE HEX                             MVC
  LBLINITU,HOLDINIU       MOVE INITIAL USING REG VALUE                      BAS
  R9,ADDLABEL             GO PUT IT IN T  HE TABLE                            L
    R1,CURRLABL             POINT TO CURRENT LABEL AREA                       CL
C   HOLDINIU,XZROS          USING AT LOCATION ZERO?                           BE
    UCCKDROP                YES, NO LABEL ENTRY NEEDED
MVC   LBLOFSET,HOLDINIU       COPY INITIAL VALUE TO LOCATION
MVI   LBLOFSET,0              CLEAR 1ST BYTE OF OFFSET
MVI   LBLTYPE,X'30'           INDICATE SIMPLE LABEL ENTRY
  MVI   LBLUREG,0               CLEAR USING REGISTER NBR
  MVC   LBLRLDLN,XZROS          CLEAR RLD LENGTH
  XC    LBLLABEL,LBLLABEL       CLEAR LABEL NAME
  BAS     R9,ADDLABEL             GO PUT IT IN THE TABLE                   UCCKD
ROP CLC   CNTLCARD+13(6),BLANKS   ANY DROP OFFSET ENTERED?
    BE    UCXIT                   NO
    L     R1,CURRLAB  L             POINT TO CURRENT LABEL AREA
      TR    CNTLCARD+13(6),TRHEX    MAKE C1=FA, C2=FB, ... ETC
      PACK  LBLOFSET(5),CNTLCARD+13(7) PACK TO MAKE HEX
      MVI   LBLOFSET+4,C' '           CLEAR TRASH
        CLC   HOLDSTRT,LBLOFSET       IS DROP AFTER USING?
        BNL   UCBADCRD                NO, ERROR
        MVI   LBLTYPE,X'0C'           TYPE IS DROP
          MVC   LBLUREG,HOLDREG         MOVE IN REGISTER NBR
          XC    LBLRLDLN(10),LBLRLDLN   ZERO OUT REST
          BAS   R9,ADDLABEL             GO PUT IT IN THE TABLE   +
            B     UCXIT                   AND EXIT
              DROP  R1
     UCBADCRD MVC   PRT(37),=CL37'INVALID USING RECORD ABOVE IS DROPPED'
              BAS   R9,PRINT                PRINT MESSAGE
                MVC   RETCODE+2(2),H8         SET RETURN CODE = 8
                WTO   'DROPPED AN INVALID USING CONTROL RECORD',ROUTCDE=11
       UCXIT    L     R9,UC9                  GET RETURN ADDRESS
                  BR    R9                      EXIT
         UC9      DC    A(0)                    RETURN ADDRESS
         *********************************************************************
         * PROCESS USER LABE  L RECORDS: FIRST VALIDATE THE HEX OFFSET, DECIMAL*
           * LENGTH, AND CHARACTER LABEL FIELDS. FORMAT A LABEL ENTRY FOR THE  *
           * LABEL AND ADD IT TO THE LABEL TABLE.                              *
           ********************************  ***********************************
**           ULABEL   ST    R9,UL9                  SAVE RETURN ADDRESS
                      TRT   CNTLCARD+15(6),CHECKHEX IS LABEL OFFSET VALID HEX?
                      BNZ   ULBADCRD                NO, ER  ROR
                        TRT   CNTLCARD+22(3),CHECKZON IS LENGTH VALID DECIMAL?
                        BNZ   ULBADCRD                NO, ERROR
                        CLI   CNTLCARD+6,C' '         ANY LABEL ENTERED?
                          BE    ULBADCRD                NO
                          CLI   CNTLCARD+6,C'Z'         FIRST CHARACTER VALID?
                          BH    ULBADCRD                NO
                            TRT   CNTLCARD+6(8),CHECKLBL  IS USER LABEL VALID CH
ARS?                        BNZ   ULBADCRD                NO, ERROR
                   ULFORMAT L     R1,CURRLABL             POINT TO CURRENT LABEL
 AREA                         USING LBLDSECT,R1
                              TR    CNTLCARD+15(6),TRHEX     MAKE C1=FA, C2=FB,
... ETC                       PACK  LBLOFSET(5),CNTLCARD+15(7) PACK TO MAKE HEX
                              MVI   LB LOFSET+4,C' '         CLEAR TRASH
                                MVI   LBLTYPE,X'30'           TYPE IS USING
                                MVI   LBLUREG,0               REGISTER NOT USED
                                   \         PACK  DBLWD,CNTLCARD+22(3)    PACK
 LENGTH VALUE                                 CVB   R15,DBLWD               CONV
ERT TO PACKED                                 STCM  R15,3,LBLRLDLN          SAVE
 LENGTH                                         MVC   LBLLABEL,CNTLCARD+6     MO
VE IN LABEL NAME                                BAS   R9,ADDLABEL             GO
 PUT IT IN THE TABLE                            B     ULXIT                   AN
D THEN EXIT                                     DROP    R1
                                         ULBADCRD MVC   PRT(37),=CL37'INVALID UL
ABL RECORD ABOVE IS DROPPED'                      BAS   R9,PRINT
PRINT MESSAGE                                     MVC   RETCODE+2(2)  ,H8
  SET RETURN CODE = 8                               WTO   'DROPPED AN INVALID UL
ABL CONTROL RECORD',ROUTCDE=11             ULXIT    L     R9,UL9
  GET RETURN ADDRESS                                BR    R9
  E  XIT                                     UL9      DC    A(0)
    RETURN ADDRESS                           ***********************************
**********************************           * PROCESS THE ESD RECORDS FOR THIS
CSECT: LOOP THROUG  H ALL THE ESD  *           * ENTRIES RETURNED BY THE READLMO
D SUBROUTINE. THE FIRST THREE ARE  *           * NORMALLY FOR THE CSECT ITSELF (
AN SD, AN ED, AND AN LD). THESE    *           * WILL BE FOLLOWED BY OTHER ESD E
LEMENTS OF WHICH ONLY THE LD TYPE  S *           * ARE USED. THE FIRST SD ELEMEN
T CONTAINS THE AMODE AND RMODE VALUES*           * THE ED CONTAINS THE CSECT LEN
GTH, AND THE LD FOR THE CSECT        *           * PROVIDES LABEL INFORMATION FO
R THE CSECT ITSELF. ANY REMAINING    *             * LD ENTRIES REPRESENT LABELS
 IDENTIFIED WITH ENTRY STATEMENTS.     *           *****************************
****************************************           GETESD   ST    R9,GE9
          SAVE RETURN ADDRESS                               XC      PRMCURSR,PRM
CURSR       CLEAR CURSOR FOR FIRST CALL              GEGETIT  MVC   PRMREQST,=CL
8'ESD'      SHOW REQUEST IS FOR ESD DATA                      BAS   R9,READLMOD
            GO READ THE ESD DATA                              CLC   PRMCOUNT,Z
ERO           ANY DATA RETURNED?                                BE    GEXIT
              NO                                                L     R10,PRMCOU
NT            GET NUMBER ELEMENTS FOUND                         L     R11,PRMBUF
AD              POINT TO BUFFER HEADER                            USING ESDHEADR
,R11                                                              LA    R12,ESDH
END             POINT TO FIRST ELEMENT                            USING ESDENTRY
,R12                                                       GENEXT   STM   R10,R1
2,WORKSAVE        SAVE WORK REGISTERS                               MVC   ESDSYM
B,BLANKS          CLEAR SYMBOL NAME                                 LH    R1,ESD
NAMEC             GET LENGTH OF SYMBOL     +                          LTR   R1,R
1                   ANY LENGTH?                                         BZ    GE
MVOWBK                NO                                                BCTR  R1
,0                    COMPUTE LENGTH CODE                               CH    R1
,H8                   EXCESSIVE LENGTH?                                   BL
GEMVNAM2                NO                                                LA
R1,7                    YES, SET MAX LENGTH                      GEMVNAM2 L
R2,ESDNAMEP             POINT TO THE SYMBOL                                 EX
  R1,GEMVSYMX             MOVE SYMBOL NAME                         GEMVOWBK MVC
  ESDOWNER,BLANKS         PRE-CLEAR OWNER NAME                              LH
  R1,ESDRESCL             GET OWNER NAME LENGTH                             LTR
  R1,R  1                   ANY LENGTH?                                       BZ
    GECKTYPE                NO                                                BC
TR  R1,0                    COMPUTE LENGTH CODE                               CH
    R1,H8                     EXCESSIVE LENGTH?
BL    GEMVOWN2                NO
LA    R1,7                    YES, SET MAX LENGTH                      GEMVOWN2
L     R2,ESDRESCP             POINT   TO OWNING NAME
  EX    R1,GEMVOWNX             MOVE IN OWNING NAME                      GECKTYP
E CLC   ESDTYPE,=CL2'SD'        IS THIS AN SD (CSECT)?
  BNE   GECKTYP2                NO
    CLC   CURRCSCT,ESDSYMB        SYMBOL SAME AS REQUESTED CSECT?
    BNE   GECKTYP2                NO
    CLC   CURRCSCT,ESDOWNER       OWNER SAME AS REQUESTED CSECT?
      BNE   GECKTYP2                NO
      TM    ESDSYMAT,X'80'          STRONG REFERENCE/DEFINITION?
      BO    GECKTYP2                YES
        MVC   CURRAMOD,ESDAMODE       NO, SAVE AMODE
        MVC   CURRRMOD,ESDRMODE          AND RMODE
        B     GESTEP                  CONTINUE WITH NEXT ESD ENTRY             G
ECKTYP2 CLC   ES DTYPE,=CL2'ED'        THIS AN ED?
          BNE   GECKTYP3                NO
          CLC   ESDSYMB,=CL8'B_TEXT'    SYMBOL NAME IS B_TEXT?
             \         BNE   GECKTYP3                NO
                        CLC   CURRCSCT,ESDOWNER       OWNER SAME AS REQUESTED CS
ECT?                    BNE   GECKTYP3                NO
                          TM    ESDSYMAT,X'80'          STRONG REFERENCE/DEFINIT
ION?                      BO    GECKTYP2                YES
                          MVC   TEXTENDA,ESDLENG        NO, SAVE TEXT LENGTH
                          MVC     TEXTLENG,ESDLENG           TWICE
                            B     GESTEP                  CONTINUE WITH NEXT ESD
 ENTRY             GECKTYP3 CLC   ESDTYPE,=CL2'LD'        THIS AN LD?
                            BNE   GESTEP                    NO
                              CLC   CURRCSCT,ESDOWNER       OWNER SAME AS REQUES
TED CSECT?                    BNE   GESTEP                  NO
                              TM    ESDSYMAT,X'80'          S  TRONG REFERENCE/D
EFINITION?                      BZ    GESTEP                  NO
                                L     R1,CURRLABL             POINT TO CURRENT L
ABEL ENTRY                      USING LBLDSECT,R1
                                  MVC   LBLOFSET,ESDELOFF       OFFSET TO LABEL
                                  MVI   LBLTYPE,X'30'           TYPE = LABEL
                                  MVI   LBLUREG,0               NO USING REGISTE
R                                   XC    LBLRLDLN,LBLRLDLN       CLEAR LENGTH F
OR RLD CONSTANT                     MVC   LBLLABEL,ESDSYMB        MOVE SYMBOL NA
ME TO ENTRY                         DROP  R1
                                      BAS   R9,ADDLABEL             GO ADD LABEL
 ENTRY TO TABLE              GESTEP   LM    R10,R12,WORKSAVE        GET WORK REG
ISTERS                                A     R12,ESDHENTL            POINT TO NEX
T ELEMENT                             BCT     R10,GENEXT              LOOP THRU
ESD ENTRIES                             CLC   PRMRETCD,ZERO           ANY MORE E
SD ENTRIES?                             BE    GEGETIT                 YES, GO RE
AD NEXT ESD BUFFER             GEXIT    L     R9,GE9                    GET RETU
RN ADDRESS                                BR    R9                      EXIT
                                 GE9      DC    A(0)                    RETURN A
DDRESS                           GEMVSYMX MVC   ESDSYMB(1),0(R2)          EXECUT
ED MOVE                            GEMVOWNX MVC   ESDOWNER(1),0(R2)       EXECUT
ED MOVE                                     DROP  R11
                                            DROP  R12
                                     *******************************************
**************************           *        PROCESS THE RLD RECORDS FOR THIS C
SECT                     *           *******************************************
*********************+ *****           GETRLD   ST    R9,GR9                  SA
VE RETURN ADDRESS                                 MVC   PRMREQST,=CL8'RLD'
SHOW REQUEST IS FOR RLD DATA             GRGET2   BAS   R9,READLMOD
GO READ THE RLD DATA                              L     R10,PRMCOUNT
GET NUMBER ELEMENTS FOUND                           LTR   R10,R10
  ANY RLD ELEMENTS READ?                            BZ    GRXIT
  NO                                                L     R11,PRMBUFAD
  POINT TO BUFFER HEADER                              USING RLDHEADR,R11
                                                      LA    R12,RLDHEND
    POINT TO FIRST ELEMENT                            USING RLDENTRY,R12
                                             GRNEXT   STM   R10,  R12,WORKSAVE
      SAVE WORK REGISTERS                               MVC   RESIDENT,BLANKS
      PRE-CLEAR TO BLANKS                               LH    R1,RLDRESNL
      GET LENGTH OF RES CSECT NAME                      LTR   R1,R1
        ANY LENGTH?                                       BZ    GRDMVAC
        NO                                                BCTR  R1,0
        COMPUTE LENGTH CODE                               CH    R1,H8
        EXCESS  IVE LENGTH?                                 BL    GRDMVRES
          NO                                                LA    R1,7
          YES, SET MAX LENGTH                      GRDMVRES L     R2,RLDRESNP
          POINT TO THE SYMBOL                                 EX    R1,GRDMVREX
            MOVE SYMBOL NAME                         GRDMVAC  MVC   SYMBPTS2,BLA
NKS         PRE-CLEAR TO BLANKS                               LH    R1,RLDTGTNL
            GET LENGTH OF SYMBOL POINTED TO                     LTR   R1,R1
              ANY LENGTH?                                       BZ    GRDCKIT
              NO                                                BCTR  R1,0
              COMPUTE LENGTH CODE                                 CH    R1,H8
                EXCESSIVE LENGTH?                                 BL    GRDMVTGT
                NO                                                LA    R1,7
                YES, SET MAX LENGTH                      GRDMVTGT L     R2 ,RLD
TGTNP             POINT TO THE SYMBOL                               EX    R1,GRD
TGTNX             MOVE SYMBOL NAME                         GRDCKIT  CLC   RESIDE
NT,CURRCSCT       ENTRY RESIDES IN CURRENT CSECT?                      \
  BNE   GRSTEP                  NO
  L     R1,CURRLABL             POINT TO LABEL TABLE
  USING LBLDSECT,R1                                                      G  RLBL
OK  MVC   LBLOFSET,RLDRESOF       OFFSET TO LABEL
    MVI   LBLTYPE,X'40'           ASSUME ADCON
    CLI   RLDSTAT,X'02'           IS IT AN ADCON?
    BE      GRCLRU                  YES
      MVI   LBLTYPE,X'50'           NO, ASSUME VCON
      CLI   RLDSTAT,X'01'           IS IT A VCON?
      BNE   GRSTEP                    NO, DROP IT                              G
RCLRU   MVI   LBLUREG,0               CLEAR USING REG NBR
        MVC   LBLRLDLN,RLDADCNL       LENGTH OF ADCON
        MVC   LBLLABEL,BLANKS         C  LEAR SYMBOL NAME FIELD
          CLC   SYMBPTS2,CURRCSCT       SYMBOL = CURRENT CSECT?
          BE    GRLBADD                 YES
          MVC   LBLLABEL,SYMBPTS2       MOVE SYMBOL NA  ME TO ENTRY
   GRLBADD  BAS   R9,ADDLABEL             GO ADD LABEL TO TABLE.
            DROP  R1
   GRSTEP   LM    R10,R12,WORKSAVE        GET WORK REGISTERS
              A     R12,RLDHENTL            POINT TO NEXT ELEMENT
              BCT   R10,GRNEXT              LOOP THRU ESD ENTRIES
              CLC   PRMRETCD,ZERO           ANY MORE RLD ENTRIES?
                BE    GRGET2                  YES
       GRXIT    L     R9,GR9                  GET RETURN ADDRESS
                BR    R9                      EXIT
       GRDMVREX MVC     RESIDENT(1),0(R2)       EXECUTED MOVE
         GRDTGTNX MVC   SYMBPTS2(1),0(R2)       EXECUTED MOVE
         GR9      DC    A(0)                    RETURN ADDRESS
         *************************  ********************************************
           *        OBTAIN THE TEXT FOR THIS CSECT: ISSUE A STORAGE OBTAIN     *
           *        FOR A STORAGE AREA ABOVE THE 16M LINE LARGE ENOUGH TO      *
           *        CONTAIN THE TEXT, THEN LOAD A  LL THE TEXT INTO IT.
 *           *******************************************************************
**           GETTEXT  ST    R9,GT9                  SAVE RETURN ADDRESS
                      MVC   PRMCURSR,ZERO           SET CURSOR=0   TO START
                        L     R0,TEXTENDA             GET TEXT LENGTH SET BY ESD
                        LTR   R0,R0                   HAS TEXT LENGTH BEEN SET?
                        BZ    GTNOTXAD                NO, ERROR                +
                          AH    R0,H32                  INSURE SUFFICIENT STO  R
AGE                         B     GTSTOBTN                YES
                   GTNOTXAD MVC   PRT(39),=CL39'NO STORAGE SIZE WAS FOUND FOR TH
E CSECT'                    BAS   R9,PRINT                PRINT THE ERROR MESSAG
E                             WTO   'MISSING TEXT STORAGE SIZE, ABENDING',ROUTCD
E=11                          ABEND 555,DUMP                TERMINATE IN ERROR
                     GTSTOBTN STORAGE OBTAIN,LENGTH=(0),LOC=ANY GET TEXT STORAGE
                                ST    R1,TEXTADDR             SAVE THE GOTTEN AD
DRESS                           ST    R1,CURRTEXT             SET CURRENT TEXT A
DDRESS                          A     R1,TEXTENDA             SAVE THE ADDRESS O
F THE                           ST    R1,T  EXTENDA                 END OF THE T
EXT AREA                          MVC   PRMREQST,=CL8'TEXT'     SHOW REQUEST IS
FOR ESD DATA             GTNEXT   BAS   R9,READLMOD             GO READ THE TEXT
 DATA                             CLC   PRMCOUNT,ZERO             ANY DATA RETUR
NED?                                BE    GTXIT                   NO
                                    L     R11,PRMCOUNT            GET NUMBER BYT
ES IN BUFFER                        L     R10,PRMBUFAD            POINT   TO BUF
FER HEADER                            USING TXTHEADR,R10
                                      LA    R10,TXTHEND             POINT TO FIR
ST TEXT BYTE                          DROP  R10
                                        L     R0,PRMCURSR             GET STARTI
NG                                      S     R0,PRMCOUNT                 TEXT
                                        A     R0,TEXTADDR                    ADD
RESS                                      LR    R1,R11                  COPY TEX
T LENGTH                                  MVCL  R0,R10                  MOVE TEX
T                                         CLC   PRMRETCD,ZERO           ANY MORE
 TEXT?                                      BE    GTNEXT                  YES
                                   GTXIT    L     R9,GT9                  GET RE
TURN ADDRESS                                BR    R9                      EXIT
                                   GT9      DC    A( 0)                    RETU
RN ADDRESS                           *******************************************
**************************           *        CALL READLMOD TO OBTAIN DATA FROM
THE LOAD MODULE          *                       \*****************************
****************************************           READLMOD ST    R9,RL9
          SAVE RETURN ADDRESS                      RLCALL   CALL  READLMOD,PARMA
REA       CALL READLMOD FOR REQUESTED DATA                    CLI   PRMERROR,C'
'           WAS THERE AN ERROR?                               BE    RLXIT
            NO                                                MVC   PRTREQST,PRM
REQST       MOVE REQUESTED DATA TYPE                          MVC     PRTERROR,P
RMERROR       AND THE ERROR CODE                       RLCURS   UNPK  PRTCURSR(9
),PRMCURSR(5) CURSOR TO PRINT                                   TR    PRTCURSR,T
RCHAR         MAKE IT PRINTABLE                                 MVI   PRTCURSR+8
,C  ' '         CLEAR TRASH                                       UNPK  PRTRETCD
(9),PRMRETCD(5) RETURN CODE TO PRINT                              TR    PRTRETCD
,TRCHAR         MAKE IT PRINTABLE                                 MVI   PRTRETCD
+8,C' '         C  LEAR TRASH                                       UNPK  PRTRSN
CD(9),PRMRSNCD(5) REASON CODE TO PRINT                              TR    PRTRSN
CD,TRCHAR         MAKE IT PRINTABLE                                 MVI   PRTRSN
CD+8,C' '         CLEAR TRASH                                         UNPK  PRTC
OUNT(9),PRMCOUNT(5) COUNT TO PRINT                                    TR    PRTC
OUNT,TRCHAR         MAKE IT PRINTABLE                                 MVI   PRTC
OUNT+8,C' '         CLEAR TRASH                                         MVC   PR
T(80),PRTRETRN        DATA LINE                                         BAS   R9
,PRINT                PRINT THE LINE                                    WTO   'R
ESOURCE FOUND ERROR RETURNED BY READLMOD CALL',       X
ROUTCDE=11                                                                ABEND
111,DUMP                TERMINATE IN ERROR                       RLXIT    L
R9,RL9                  GET RETURN ADDRESS                                BR
  R9                      EXIT                                     RL9      DC
  A(0)                    RETURN ADDRESS                           *************
********************************************************           *
 PRINT SUBRO  UTINE                                      *           ***********
**********************************************************           PRINT    PU
T   SYSPRINT,PRTLINE        WRITE PRINT LINE                                  MV
C   PRTLINE,BLANKS            CLEAR PRINT LINE
BR    R9                      RETURN                                   *********
************************************************************           * ADD AN
ENTRY TO THE LABEL TABLE. THE NEW ENTRY HA  S BEEN PLACED    *           * IN TH
E NEXT AVAILABLE TABLE SLOT THAT IS POINTED TO BY CURRLABL.  *           * THE N
EW ENTRY IS INSERTED INTO THE TABLE IN ADDRESS-TYPE ORDER.   *           *******
*********************************************************+ *****           ADDLA
BEL ST    R9,AL9                  SAVE RETURN ADDRESS
      L     R1,LBLTBADR             POINT TO FIRST TABLE ENTRY
      USING LBLDSECT,R1
      L     R2,CURRLABL             POINT TO NEW ENTRY                         A
LCHKEND CR    R1,R2                   PRESENTLY AT NEW ENTRY?
        BNL   ALADVANC                YES
        CLC   0(5,R2),LBLENTRY        AT INSERTION POINT?
          BL    ALINSRT                 YES
          LA    R1,L'LBLENTRY(R1)       NO, ADVANCE TO NEXT ENTRY
          B     ALCHKEND                LOOP TO FIND INSERTION POINT
 ALINSRT  MVC   HOLD  LABL,LBLENTRY       HOLD PRESENT ENTRY
            MVC   LBLENTRY,0(R2)          MOVE IN NEW ENTRY
            MVC   0(L'LBLENTRY,R2),HOLDLABL PREVIOUS ENTRY TO END
            LA    R1,L'LBLENTRY(R1)         STEP TO NEXT ENTRY
              CR    R1,R2                   PRESENTLY AT LAST ENTRY?
              BL    ALINSRT                 NO, CONTINUE INSERTION LOOP
     ALADVANC LA    R2,L'LBLENTRY(R2)       STEP T  O NEXT AVAILABLE SLOT
                ST    R2,CURRLABL             SAVE UPDATED TABLE ADDRESS
                C     R2,LBLTBEND             PAST END OF TABLE?
                BL    ALXIT                   NO
                  MVC   PRT(37),=CL37'LABEL TABLE OF 32,768 ENTRIES IS FULL'
                  BAS   R9,PRINT                PRINT ERROR MESSAGE
                  WTO   'LABEL TABLE OVERFLOW, ABENDING',ROUTCDE=11
                    ABEND 666,DUMP                TERMINATE IN ERROR
           ALXIT    L     R9,AL9                  GET RETURN ADDRESS
                    BR    R9                      EXIT
                      DROP  R1
             AL9      DC    A(0)                    RETURN ADDRESS
             *******************************************************************
**           *        TESTPRNT  PRINTS THE LABEL TABLE AND TEXT AREAS AT END OF
   *           *        JOB FOR TESTING.
   *           *****************************************************************
****                       \TESTPRNT ST    R9,TP9                  SAVE RETURN
ADDRESS                               MVC   PRT(8),=CL8'LBLOFSET'
                                      MVC   PRT+9(4),=CL4'TYPE'
                                        MVC   PRT+14(4),=CL4'UREG'
                                        MVC   PRT+19(4),=CL4'LENG'
                                        MVC   PRT+24(8),=CL8'LABEL'
                                        BAS     R9,PRINT
                                          L     R12,LBLTBADR            POINT TO
 LABEL TABLE                              USING LBLDSECT,R12
                                 TPNEXTLB UNPK  PRT(9),LBLOF  SET(5)
                                            MVI   PRT+8,C' '
                                            TR    PRT(8),TRCHAR
                                            UNPK  PRT+10(3),LBLTYPE(2)
                                              MVI   PRT+12,C' '
                                              TR    PRT+10(2),TRCHAR
                                              UNPK  PRT+15(3),LBLUREG(2)
                                                MVI   PRT+17,C' '
                                                TR    PRT+15(3),TRCHAR
                                                UNPK  PRT+19(5),LBLRLDLN(3)
                                                  MVI   PRT+23,C' '
                                                  CLI   LBLTYPE,X'10'
                                                  BNE   TPLBL
                                                    UNPK  PRT+24(7),LBLINITU+1(4
)                                                   MVI   PRT+30,C' '
                                                    TR    PRT+24(6),TRCHAR
                                                    B       TPDESCR
                                             TPLBL    MVC   PRT+24(8),LBLLABEL
                                             TPDESCR  CLI   LBLTYPE,X'0C'
                                                      BNE   TPDESC2
                                                        MVC   PRT+36(4),=CL4'DRO
P'                                                      MVI   PRT+42,C'R'
                                                        MVC   PRT+43(1),LBLUREG
                                                          OI    PRT+43,X'F0'
                                                          CLI   LBLUREG,X'0A'
                                                          BL    TPPRINT
                                                            MVI   PRT+43,C'1'
                                                            IC    R1,LBLUREG
                                                            LA    R1,6(R1)
                                   +                          STC   R1,PRT+44
                                                                OI    PRT+44,X'F
0'                                                              B     TPPRINT
                                                       TPDESC2  CLI   LBLTYPE,X'
10'                                                               BNE   TPDESC3
                                                                  MVC   PRT+36(5
),=CL5'USING'                                                     MVC   PRT+42(6
),PRT+24                                                            MVI   PRT+48
,C','                                                               MVI   PRT+49
,C'R'                                                               MVC   PRT+50
(1),LBLUREG                                                         OI    PRT+
50,X'F0'                                                              CLI   LBLU
REG,X'0A'                                                             BL    TPPR
INT                                                                   MVI   PRT+
50,C'1'                                                                 IC    R1
,LBLUREG                                                                LA    R1
,6(R1)                                                                  STC   R1
,PRT+51                                                                   OI
PRT+51,X'F0'                                                              B
TPPRINT                                                          TPDESC3  CLI
LBLTYPE,X'18'                                                               BNE
  TPDESC4                                                                   MVC
  PRT+36(10),=CL10'DATA START'                                              B
  TPPRINT                                                            TPDESC4  CL
I   LBLTYPE,X'1C'                                                             BN
E   TPDESC5                                                                   MV
C   PRT+36(8),=CL8'DATA END'
B     TPPRINT                                                          TPDESC5
CLI   LBLTYPE,X'30'
BNE   TPDESC6
MVC   PR T+36(5),=CL5'LABEL'
  B     TPPRINT                                                          TPDESC6
  CLI   LBLTYPE,X'40'
     \         BNE   TPDESC7
                MVC   PRT+36(5),=CL5'ADCON'
                B     TPPRINT
       T  PDESC7  CLI   LBLTYPE,X'50'
                  BNE   TPPRINT
                  MVC   PRT+36(5),=CL5'V-CON'
                  B       TPPRINT
           TPPRINT  BAS   R9,PRINT
                    LA    R12,L'LBLENTRY(R12)
                    C     R12,CURRLABL
                      BL    TPNEXTLB
                      BAS   R9,PRINT
                      UNPK  PRT(9),TEXTLENG(5)
                        MVI   PRT+8,C' '
                        TR    PRT(8),TRCHAR
                        MVC   PRT+9(22),=CL22' BYTES OF TEXT FOLLOW:  '
                          BAS   R9,PRINT
                          L     R12,TEXTADDR            POINT TO TEXT AREA START
                 TPNEXTT  UNPK  PRT(9),TPOFF(5)
                            MVI   PRT+8,C' '
                            TR    PRT(8),TRCHAR
                            UNPK  PRT+9(9),0(5,R12)
                              MVI   PRT+17,C' '
                              UNPK  PRT+18(9),4(5,R12)
                              MVI   PRT+26,C' '
                              UNP  K  PRT+27(9),8(5,R12)
                                MVI   PRT+35,C' '
                                UNPK  PRT+36(9),12(5,R12)
                                MVI   PRT+44,C'   '
                                  UNPK  PRT+46(9),16(5,R12)
                                  MVI   PRT+54,C' '
                                  UNPK  PRT+55(9),20(5,R12)
                                    MVI   PRT+63,C' '
                                    UNPK  PRT+64(9),24(5,R12)
                                    MVI   PRT+72,C' '
                                      UNPK  PRT+73(9),28(5,R12)
                                      MVI   PRT+81,C' '
                                      TR    PRT+9(74),TRCHAR
             +                          MVC   PRT+83(32),0(R12)
                                          BAS   R9,PRINT
                                          L     R1,TPOFF
                                          LA    R1,32(R1)
                                            ST    R1,TPOFF
                                            LA    R12,32(R12)
                                            C     R12,TEXTENDA
                                              BL    TPNEXTT
                                     TPXIT    L     R9,TP9                  GET
RETURN ADDRESS                                BR    R9                      EXIT
                                     TP9      DC    A(0)                      RE
TURN ADDRESS                           TPOFF    DC    A(0)                    TE
XT OFFSET                              *****************************************
****************************           *        STORAGE AND FILE AREAS
                             *           ***************************************
******************************           DBLWD    DS    D
DOUBLEWORD WORK AREA                     XZROS    DC    16X'00'
CONSTA  ND HEX ZEROES                      REBLDEP  DC    A(0)
  E.P. ADDRESS FOR REBUILD                 WORKSAVE DS    3F
  SAVE AREA FOR WORK REGS 10-12            ZERO     DC    F'0'
  CONSTANT ZEROS                             RETCODE  DC    F'0'
    RETURN CODE                              H0       DC    H'0'
    CONSTANT 0                               H5       DC    H'5'
    CONSTANT 5                                 H11      DC    H'11'
      CONSTANT 11                              H8       DC    H'8'
      CONSTANT 8                               H32      DC    H'32'
      CONSTANT 32                              RESI  DENT DC    CL8' '
        RLD RESIDENT CSECT NAME                  SYMBPTS2 DC    CL8' '
        RLD SYMBOL POINTED TO                    ESDSYMB  DC    CL8' '
        ESD SYMBOL NAME                          ESDOWNER DC    CL 8' '
          ESD OWNING CSECT NAME                    UNWANTED DC    XL1'60'
          40=NO FLTPT, 20=NO PRIV INST             SUPVR    DC    CL5'SUPVR'
          LITERAL CONSTANT                                     \FLTPT    DC
CL5'FLTPT'              LITERAL CONSTANT                         BLANKS   DC
CL133' '                BLANKS                                   MORECNTL DC
CL1'Y'                  N=NO MORE CONTROL RECORDS                G  OTMCREC DC
  CL1'N'                  Y=MEMBER/CSECT RECORD PROCESSED          HOLDLABL DS
  CL16                    HOLD AREA FOR LABEL ENTRY SORTS          HOLDINIU DS
  XL4,XL1                 HOLD INITIAL USING REG VALUE             HOLDSTRT DS
    XL4                     WORK FIELD                               HOLDREG  DS
    XL1                     WORK FIELD                               STAGE    DC
    XL1'1'                  STAGE NUMBER FOR REBUILD                 HEXFFS   DC
    X'FFFFFFFF'               HEX FF'S                                 WORK1
DC    C' '                    WORK FIELD                               *
                                                                       REBLDPRM
DS    0A                      R  EBUILD PARAMETER LIST
  DC    A(STAGE)                   STAGE INDICATOR POINTER
  DC    A(CURRCSCT)                CSECT NAME POINTER                    LBLTBAD
R DC    A(0)                       LABEL TABLE   STARTING ADDRESS          CURRL
ABL DC    A(0)                    ADDRESS OF CURRENT LABEL ENTRY           LBLTB
END DC    A(32768*L'LBLENTRY)        SIZE OF 32,768 ENTRIES                TEXTA
DDR DC    A(0)                       ADDRESS OF CSECT TEXT                   TEX
TENDA DC    A(0)                       ADDRESS OF LAST BYTE OF TEXT          TEX
TLENG DC    A(0)                       TOTAL TEXT LENGTH                     TBL
TBLAD DC    A(OPCODTBL)                OP-CODE TABLE POINTER                   P
RNTDCBA DC    A(SYSPRINT)                SYSPRINT DCB ADDRESS                  O
UTDCBA  DC    A(SYSOUT)                  SYSOUT DCB ADDRESS                    *
                                                                               T
ABLTABL DS      0A                      TABLE OF OP-CODE TABLE ADDRESSES
          DC    A(OCTWO01)                  01XX OP-CODE TABLE
          DC    A(OCTWOA7)                  A7X OP-CODE TABLE
          DC    A(OCTWOB2)                    B2XX OP-CODE TABLE
            DC    A(OCTWOB3)                  B3XX OP-CODE TABLE
            DC    A(OCTWOE5)                  E5XX OP-CODE TABLE
            DC    A(OCTWOED)                    EDXX OP-CODE TABLE
              DC    XL4'FFFFFFFF'              END OF TABLE ENTRY
     *
     ISINST   DC    X'00'                   01=TEXT MAY   BE AN INSTRUCTION
       INSTFLAG DS    XL1                     INSTRUCTION FLAGS
       INSTMNEM DS    XL5                     INSTRUCTION MNEMONIC
       INSTLENG DS    XL1                     INSTRUCTION LENGTH       +
         INSTFMT  DS    XL1                     INSTRUCTION LENGTH
           INSTTEXT DS    XL6                     INSTRUCTION TEXT
           *
           CURRINFO DS    0F                      CURRENT PROCESSING INFO
             CURRMEMB DC    CL8' '                     MEMBER NAME
             CURRCSCT DC    CL8' '                     CSECT NAME
             CURRTEXT DC    A(0)                    ADDRESS OF CURRENT TEXT BYTE
             CURRAM  OD DS    XL1                        REQUESTED CSECT AMODE
               CURRRMOD DS    XL1                        REQUESTED CSECT RMODE
               CURREND  EQU   *
               *
                 PRTLINE  DS    0CL133                  PRINT LINE
                 PRTCC    DC    CL1'1'                     CARRIAGE CONTROL BYYT
E                PRT      DC    CL132' '                     PRINT DATA LINE
                   *
                   PRTRETRN DS    0CL80                   PRINT READLMOD RETURNE
D DATA                      DC    CL5' REQ='
                     PRTREQST DS    CL5                        REQUESTED DATA TY
PE                   PRTRERR  DC    CL5' ERR='
                     PRTERROR DS    CL1                        ERROR INDICATOR
                                DC    CL8' CURSOR='
                       PRTCURSR DS    CL8                        IEWBIND CURSOR
                                DC    CL8' RETCOD='
                         PRTRETCD DS    CL8                        IEWBIND RETUR
N CODE                            DC    CL8' RSNCOD='
                         PRTRSNCD DS    CL8                        IEWBIND REASO
N CODE                              DC    CL7' COUNT='
                           PRTCOUNT DS    CL8                        IEWBIND COU
NT                                  DC    CL1' '
                           *                
                             CNTLCARD DS    0CL80              CONTROL STATEMENT
                             CCMEMBER DS    CL8                   MEMBER NAME
                                         \         DS    CL1
                                           CCCSECT  DS    CL8
CSECT NAME                                          DS    CL63
                                           *
                                             TRCHAR   DC    256C' '            T
RANSLATE HEX TO PRINTABLE CHARS                       ORG   TRCHAR+C'0'
                                                      DC      C'0123456789ABCDEF
'                                                       ORG
                                               *
                                               CHECKHEX DC    256X'FF'
   TRT TABLE TO CHECK FOR VALID HEX                       ORG   CHECKHEX+C'A'
                                                          DC    6X'00'
                                                          ORG   CHECKHEX+C'0'
                                                            DC    10X'00'
                                                            ORG
                                                   *
                                                     CHECKZON DC    256X'FF'
       TRT TABLE TO CHECK FOR ZONED DECIMAL                   ORG   CHECKZON+C'0
'                                                             DC    10X'00'
                                                                ORG
                                                       *
                                                       CHECKLBL DC    256X'FF'
         TRT TABLE TO CHECK LABEL CHARS                           ORG   CHECKLBL
+C'@'                                                             DC    X'00'
                                                                  ORG   CHECKLBL
+C'$'                                                             DC      X'00'
                                                                    ORG   CHECKL
BL+C'#'                                                             DC    X'00'
                                                                    ORG   CHECKL
BL+C  ' '                                                             DC    X'00
'                                                                     ORG   CHEC
KLBL+C'A'                                                             DC    9X'0
0'                                                                      ORG   CH
ECKLBL+C'J'                                                             DC    9X
'00'                                                                    ORG   CH
ECKLBL+C'S'                                                               DC
8X'00'                                                                    ORG
CHECKLBL+C'0'                                                             DC
10X'00'                                          +                          ORG
                                                                     *
                                                                     TRHEX    DC
    256C' '                 TRANSLATE TO MAKE REAL HEX                        OR
G   TRHEX+C'A'
DC    X'FAFBFCFDFEFF'
ORG   TRHEX+C'0'
DC    C'0123456789'
  ORG                                                                    *******
****************************************************************         *TABLES
 OF INSTRUCTION OP-CODES. THE FIRST TABLE CONTAINS 256 ENTRIES,*         *ONE FO
R EACH POSSI  BLE SINGLE-BYTE OP-CODE. FOLLOWING TABLES ARE FOR  *         *THE
INSTRUCTIONS HAVING MORE THAN A ONE-BYTE OP-CODE. EACH TABLE     *         *ENTR
Y IS 10 BYTES LONG AAND CONTAINS:                                *         *  BY
TE  0   OP-CODE FIRST OR ON  LY BYTE                               *         *
BYTE  1   FOR 1.5 AND 2 BYTE OPCODES, THE SECOND OP-CODE BYTE      *         *
BYTES 2-6 INSTRUCTION MNEMONIC FOR SINGLE-BYTE OP-CODES            *         *
BYTE  2   '2' FOR 1.5 AND 2 BYTE OP-CODE I  NSTRUCTIONS              *         *
  BYTES 3-6 ADDRESS OF THE 1.5 OR 2 BYTE OP-CODE TABLE TO USE        *         *
  BYTE  7   INSTRUCTION FORMAT IDENTIFIER. THIS IDENTIFIES THE MEMORY*         *
            FORMAT AND CODING SYNTAX FOR THE INSTRUCTION   (SEE THE EQU*
 *            INSTRUCTIONS FOR THE FORMAT NAMES)                       *
 *  BYTE  8   FLAGS: X'40'=FLOATING POINT INSTRUCTION, X'20'=PRIVILEGED*
 *  BYTE  9   IF THE INSTRUCTION SETS THE CONDITION CODE, THIS BYTE    *
   *            WILL CONTAIN THE NUMBER OF THE CONDITION CODE TABLE ENTRY*
   *            TO BE USED FOR FOLLOWING CONDITIONAL BRANCHES.           *
   *  BYTE 10   FLAG BYTE 1: X'80'=ODD TEST REQUIRED                     *
   *                           X'01'=R2 MUST BE 0,1,4,5,8,9,12, OR 13      *
     *  BYTE 11   FLAG BYTE 2: X'80'=R1 MUST BE 0,1,4,5,8,9,12, OR 13      *
     *                         X'40'=M3 MUST BE 0,1,4,5,6, OR 7            *
     *                          X'20'=INSTRUCTION BITS 16-25 MUST BE 0'S    *
       *                         X'10'=R1 MUST NOT EQUAL R2                  *
       *                         X'08'=R3 MUST BE AN EVEN NUMBERED REGISTER  *
                   \*                         X'04'=R2 MUST BE AN EVEN NUMBERED
 REGISTER  *         *                         X'02'=R1 MUST BE AN EVEN NUMBERED
 REGISTER  *         *                         X'01'=IF R2=0, OUTPUT 0, NOT R0
           *         *  ********************************************************
**************                  DS    0F
                       OPCODTBL DS    0XL12
                                DC      XL2'0000',XL5'00',AL1(0),AL1(0),AL1(0),X
L2'0000'                          DC    XL2'0100',CL1'2',AL4(OCTWO01),XL5'000000
0000'                             DC    XL2'0200',XL5'00',AL1(0),AL1(0),AL1(0),X
L2'0000'                          DC    XL2'0300',XL  5'00',AL1(0),AL1(0),AL1(0)
,XL2'0000'                          DC    XL2'0400',CL5'SPM',AL1(RR3),AL1(0),AL1
(1),XL2'0000'                       DC    XL2'0500',CL5'BALR',AL1(RR1),AL1(0),AL
1(0),XL2'0001'                      DC    XL2'0600',CL5'BCTR',AL1(R  R1),AL1(0),
AL1(0),XL2'0001'                      DC    XL2'0700',CL5'BCR',AL1(RR4),AL1(0),A
L1(0),XL2'0001'                       DC    XL2'0800',XL5'00',AL1(0),AL1(0),AL1(
0),XL2'0000'                          DC    XL2'0900',XL5'00',AL1(0),AL1(0),AL1(
0)  ,XL2'0000'                          DC    XL2'0A00',CL5'SVC',AL1(RR2),AL1(0)
,AL1(0),XL2'0000'                       DC    XL2'0B00',CL5'BSM',AL1(RR1),AL1(0)
,AL1(0),XL2'0001'                       DC    XL2'0C00',CL5'BASSM',AL1(RR1),AL1(
0),AL1(0),XL2'000  1'                     DC    XL2'0D00',CL5'BASR',AL1(RR1),AL1
(0),AL1(0),XL2'0001'                      DC    XL2'0E00',CL5'MVCL',AL1(RR1),AL1
(0),AL1(1),XL2'0006'                      DC    XL2'0F00',CL5'CLCL',AL1(RR1),AL1
(0),AL1(2),XL2'0016'                        DC    XL2'1000',CL5'LPR',AL1(RR1),AL
1(0),AL1(6),XL2'0000'                       DC    XL2'1100',CL5'LNR',AL1(RR1),AL
1(0),AL1(7),XL2'0000'                       DC    XL2'1200',CL5'LTR',AL1(RR1),AL
1(0),AL1(8),XL2'0000'                       DC      XL2'1300',CL5'LCR',AL1(RR1),
AL1(0),AL1(9),XL2'0000'                       DC    XL2'1400',CL5'NR',AL1(RR1),A
L1(0),AL1(3),XL2'0000'                        DC    XL2'1500',CL5'CLR',AL1(RR1),
AL1(0),AL1(2),XL2'0000'                       DC    XL2'1600',  CL5'OR',AL1(RR1)
,AL1(0),AL1(3),XL2'0000'                        DC    XL2'1700',CL5'XR',AL1(RR1)
,AL1(0),AL1(3),XL2'0000'                        DC    XL2'1800',CL5'LR',AL1(RR1)
,AL1(0),AL1(0),XL2'0000'                        DC    XL2'1900',CL5'CR',AL1(R  R
1),AL1(0),AL1(2),XL2'0000'                        DC    XL2'1A00',CL5'AR',AL1(RR
1),AL1(0),AL1(9),XL2'0000'                        DC    XL2'1B00',CL5'SR',AL1(RR
1),AL1(0),AL1(9),XL2'0000'                        DC    XL2'1C00',CL5'MR',AL1(RR
1),AL1(0),AL  1(0),XL2'0002'                        DC    XL2'1D00',CL5'DR',AL1(
RR1),AL1(0),AL1(0),XL2'0000'                        DC    XL2'1E00',CL5'ALR',AL1
(RR1),AL1(0),AL1(1),XL2'0000'                       DC    XL2'1F00',CL5'SLR',AL1
(RR1),AL1(0),AL1(1),XL2'000+ 0'                       DC    XL2'2000',CL5'LPDR',
AL1(RR1),AL1(FP),AL1(10),  XL2'0000'                    DC    XL2'2100',CL5'LNDR
',AL1(RR1),AL1(FP),AL1(7),XL2'0000'                     DC    XL2'2200',CL5'LTDR
',AL1(RR1),AL1(FP),AL1(8),XL2'0000'                     DC    XL2'2300',CL5'LCDR
',AL1(RR1),AL1(FP),AL1(8),XL2'0000'                       DC    XL2'2400',CL5'HD
R',AL1(RR1),AL1(FP),AL1(0),XL2'0000'                      DC    XL2'2500',CL5'LD
XR',AL1(RR1),AL1(FP),AL1(0),XL2'0100'                     DC    XL2'2600',CL5'MX
R',AL1(RR1),AL1(FP),AL1(0),XL2'0000'                        DC    XL2'2700',CL5'
MXDR',AL1(RR1),AL1(FP),AL1(0),XL2'0080'                     DC    XL2'2800',CL5'
LDR',AL1(RR1),AL1(FP),AL1(0),XL2'0000'                      DC    XL2'2900',CL5'
CDR',AL1(RR1),AL1(FP),AL1(2),XL2'0000'                      DC    XL2'  2A00',CL
5'ADR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'                      DC    XL2'2B00',CL
5'SDR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'                      DC    XL2'2C00',CL
5'MDR',AL1(RR1),AL1(FP),AL1(0),XL2'0000'                      DC    XL2'2D00',CL
5'DDR  ',AL1(RR1),AL1(FP),AL1(0),XL2'0000'                      DC    XL2'2E00',
CL5'AWR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'                      DC    XL2'2F00',
CL5'SWR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'                      DC    XL2'3000',
CL5'LPER',AL1(RR1),A  L1(FP),AL1(10),XL2'0000'                    DC    XL2'3100
',CL5'LNER',AL1(RR1),AL1(FP),AL1(7),XL2'0000'                     DC    XL2'3200
',CL5'LTER',AL1(RR1),AL1(FP),AL1(8),XL2'0000'                     DC    XL2'3300
',CL5'LCER',AL1(RR1),AL1(FP),AL1(8)  ,XL2'0000'                     DC    XL2'34
00',CL5'HER',AL1(RR1),AL1(FP),AL1(0),XL2'0000'                      DC    XL2'35
00',CL5'LEDR',AL1(RR1),AL1(FP),AL1(0),XL2'0000'                     DC    XL2'36
00',CL5'AXR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'                        DC    XL2'
3700',CL5'SXR',AL1(RR1),AL1(FP),AL1(8),XL2'0180'                      DC    XL2'
3800',CL5'LER',AL1(RR1),AL1(FP),AL1(0),XL2'0000'                      DC    XL2'
3900',CL5'CER',AL1(RR1),AL1(FP),AL1(2),XL2'0000'                        DC    XL
2'3A00',CL5'AER',AL1(RR1),AL1(FP),AL1(8),XL2'0000'                      DC    XL
2'3B00',CL5'SER',AL1(RR1),AL1(FP),AL1(8),XL2'0000'                      DC    XL
2'3C00',CL5'MDER',AL1(RR1),AL1(FP),AL1(0),XL2'0000'                     DC    XL
 2'3D00',CL5'DER',AL1(RR1),AL1(FP),AL1(0),XL2'0000'                      DC
XL2'3E00',CL5'AUR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'                      DC
XL2'3F00',CL5'SUR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'                         \
        DC    XL2'4000',CL5'STH',AL1(RX1),AL1(0),AL1(0),XL2'0000'
        DC    XL2'4100',CL5'LA',AL1(RX1),AL1(0),AL1(0),XL2'0000'
        DC    XL2'4200',CL5'STC',AL1(RX1),AL1(0),AL1(0),XL2'0000'
          DC    XL2'4300',CL5'IC',AL1(RX1),AL1(0),AL1(0),XL2'0000'
          DC    XL2'4400',CL5'EX',AL1(RX1),AL1(0),AL1(0),XL2'8000'
          DC    XL2'4500',CL5'BAL',AL1(RX1),AL1(0),AL1(0),XL2'0000'
          DC      XL2'4600',CL5'BCT',AL1(RX1),AL1(0),AL1(0),XL2'0000'
            DC    XL2'4700',CL5'BC',AL1(RX2),AL1(0),AL1(0),XL2'0000'
            DC    XL2'4800',CL5'LH',AL1(RX1),AL1(0),AL1(0),XL2'0000'
            DC    XL2'4900',CL  5'CH',AL1(RX1),AL1(0),AL1(2),XL2'0000'
              DC    XL2'4A00',CL5'AH',AL1(RX1),AL1(0),AL1(9),XL2'0000'
              DC    XL2'4B00',CL5'SH',AL1(RX1),AL1(0),AL1(9),XL2'0000'
              DC    XL2'4C00',CL5'MH',AL1(RX1  ),AL1(0),AL1(0),XL2'0000'
                DC    XL2'4D00',CL5'BAS',AL1(RX1),AL1(0),AL1(0),XL2'0000'
                DC    XL2'4E00',CL5'CVD',AL1(RX1),AL1(0),AL1(0),XL2'0000'
                DC    XL2'4F00',CL5'CVB',AL1(RX1),AL1(0),AL1  (0),XL2'0000'
                  DC    XL2'5000',CL5'ST',AL1(RX1),AL1(0),AL1(0),XL2'0000'
                  DC    XL2'5100',CL5'LAE',AL1(RX1),AL1(0),AL1(0),XL2'0000'
                  DC    XL2'5200',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
                    DC    XL2'5300',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
                    DC    XL2'5400',CL5'N',AL1(RX1),AL1(0),AL1(3),XL2'0000'
                    DC    XL2'5500',CL5'CL',AL1(RX1),AL1(0),AL1(2),XL2'0000'
                      DC    XL2'5600',CL5'O',AL1(RX1),AL1(0),AL1(3),XL2'0000'
                      DC    XL2'5700',CL5'X',AL1(RX1),AL1(0),AL1(3),XL2'0000'
                      DC    XL2'5800',CL5'L',AL1(RX1),AL1(0),AL1(0),XL2'0000'
                      DC      XL2'5900',CL5'C',AL1(RX1),AL1(0),AL1(2),XL2'0000'
                        DC    XL2'5A00',CL5'A',AL1(RX1),AL1(0),AL1(9),XL2'0000'
                        DC    XL2'5B00',CL5'S',AL1(RX1),AL1(0),AL1(9),XL2'0000'
                        DC    XL2'5C00',  CL5'M',AL1(RX1),AL1(0),AL1(0),XL2'0002
'                         DC    XL2'5D00',CL5'D',AL1(RX1),AL1(0),AL1(0),XL2'0000
'                         DC    XL2'5E00',CL5'AL',AL1(RX1),AL1(0),AL1(1),XL2'000
0'                        DC    XL2'5F00',CL5'SL',AL1(R  X1),AL1(0),AL1(1),XL2'0
000'                        DC    XL2'6000',CL5'STD',AL1(RX1),AL1(FP),AL1(0),XL2
'0000'                      DC    XL2'6100',XL5'00',AL1(0),AL1(0),AL1(0),XL2'000
0'                          DC    XL2'6200',XL5'00',AL1(0),AL1(0),AL1(  0),XL2'0
000'                          DC    XL2'6300',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0
000'                          DC    XL2'6400',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0
000'                          DC    XL2'6500',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0
000' +                          DC    XL2'6600',XL5'00',AL1(0),AL1(0),AL1(0),XL2
'00  00'                          DC    XL2'6700',CL5'MXD',AL1(RX1),AL1(FP),AL1(
0),XL2'0080'                      DC    XL2'6800',CL5'LD',AL1(RX1),AL1(FP),AL1(0
),XL2'0000'                       DC    XL2'6900',CL5'CD',AL1(RX1),AL1(FP),AL1(2
),XL2'0000'                         DC    XL2'6A00',CL5'AD',AL1(RX1),AL1(FP),AL1
(8),XL2'0000'                       DC    XL2'6B00',CL5'SD',AL1(RX1),AL1(FP),AL1
(8),XL2'0000'                       DC    XL2'6C00',CL5'MD',AL1(RX1),AL1(FP),AL1
(0),XL2'0180'                         DC    XL2'6D00',CL5'DD',AL1(RX1),AL1(FP),A
L1(0),XL2'0000'                       DC    XL2'6E00',CL5'AW',AL1(RX1),AL1(FP),A
L1(8),XL2'0000'                       DC    XL2'6F00',CL5'SW',AL1(RX1),AL1(FP),A
L1(8),XL2'0000'                       DC    XL2'  7000',CL5'STE',AL1(RX1),AL1(FP
),AL1(0),XL2'0000'                      DC    XL2'7100',CL5'MS',AL1(RX1),AL1(FP)
,AL1(0),XL2'0000'                       DC    XL2'7200',XL5'00',AL1(0),AL1(0),AL
1(0),XL2'0000'                          DC    XL2'7300',XL5'00'  ,AL1(0),AL1(0),
AL1(0),XL2'0000'                          DC    XL2'7400',XL5'00',AL1(0),AL1(0),
AL1(0),XL2'0000'                          DC    XL2'7500',XL5'00',AL1(0),AL1(0),
AL1(0),XL2'0000'                          DC    XL2'7600',XL5'00',AL1(0),AL1(0
),AL1(0),XL2'0000'                          DC    XL2'7700',XL5'00',AL1(0),AL1(0
),AL1(0),XL2'0000'                          DC    XL2'7800',CL5'LE',AL1(RX1),AL1
(FP),AL1(0),XL2'0000'                       DC    XL2'7900',CL5'CE',AL1(RX1),AL1
(FP),AL1(2),X  L2'0000'                       DC    XL2'7A00',CL5'AE',AL1(RX1),A
L1(FP),AL1(8),XL2'0000'                       DC    XL2'7B00',CL5'SE',AL1(RX1),A
L1(FP),AL1(8),XL2'0000'                       DC    XL2'7C00',CL5'MDE',AL1(RX1),
AL1(FP),AL1(0),XL2'0000'                        DC    XL2'7D00',CL5'DE',AL1(RX1)
,AL1(FP),AL1(0),XL2'0000'                       DC    XL2'7E00',CL5'AU',AL1(RX1)
,AL1(FP),AL1(8),XL2'0000'                       DC    XL2'7F00',CL5'SU',AL1(RX1)
,AL1(FP),AL1(8),XL2'0000'                         DC    XL2'8000',CL5'SSM',AL1(S
1),AL1(PR),AL1(0),XL2'0000'                       DC    XL2'8100',XL5'00',AL1(0)
,AL1(0),AL1(0),XL2'0000'                          DC    XL2'8200',CL5'LPSW',AL1(
S1),AL1(PR),AL1(1),XL2'0000'                      DC    XL 2'8300',XL5'00',AL1(
0),AL1(0),AL1(0),XL2'0000'                          DC    XL2'8400',CL5'BRXH',AL
1(RSI1),AL1(0),AL1(0),XL2'0000'                     DC    XL2'8500',CL5'BRXLE',A
L1(RSI1),AL1(0),AL1(0),XL2'0000'                       \         DC    XL2'8600
',CL5'BXH',AL1(RS1),AL1(0),AL1(0),XL2'0000'                       DC    XL2'8700
',CL5'BXLE',AL1(RS1),AL1(0),AL1(0),XL2'0000'                      DC    XL2'8800
',CL5'SRL',AL1(RS2),AL1(0),AL1(0),XL2'0020'                         DC    XL2'89
00',CL5'SLL',AL1(RS2),AL1(0),AL1(0),XL2'0020'                       DC    XL2'8A
00',CL5'SRA',AL1(RS2),AL1(0),AL1(8),XL2'0020'                       DC    XL2'8B
00',CL5'SLA',AL1(RS2),AL1(0),AL1(9),XL2'0020'                       DC      XL2'
8C00',CL5'SRDL',AL1(RS2),AL1(0),AL1(0),XL2'0022'                      DC    XL2'
8D00',CL5'SLDL',AL1(RS2),AL1(0),AL1(0),XL2'0022'                      DC    XL2'
8E00',CL5'SRDA',AL1(RS2),AL1(0),AL1(8),XL2'0022'                      DC    XL2'
8F00',CL  5'SLDA',AL1(RS2),AL1(0),AL1(9),XL2'0022'                      DC    XL
2'9000',CL5'STM',AL1(RS1),AL1(0),AL1(0),XL2'0000'                       DC    XL
2'9100',CL5'TM',AL1(SI1),AL1(0),AL1(11),XL2'0000'                       DC    XL
2'9200',CL5'MVI',AL1(SI  1),AL1(0),AL1(0),XL2'0000'                       DC
XL2'9300',CL5'TS',AL1(S1),AL1(0),AL1(1),XL2'0000'                         DC
XL2'9400',CL5'NI',AL1(SI1),AL1(0),AL1(3),XL2'0000'                        DC
XL2'9500',CL5'CLI',AL1(SI1),AL1(0),AL1  (2),XL2'0000'                       DC
  XL2'9600',CL5'OI',AL1(SI1),AL1(0),AL1(3),XL2'0000'                        DC
  XL2'9700',CL5'XI',AL1(SI1),AL1(0),AL1(3),XL2'0000'                        DC
  XL2'9800',CL5'LM',AL1(RS1),AL1(0),AL1(0),XL2'0000'                          DC
    XL2'9900',CL5'TRACE',AL1(RS1),AL1(PR),AL1(0),XL2'0000'                    DC
    XL2'9A00',CL5'LAM',AL1(RS1),AL1(0),AL1(0),XL2'0000'                       DC
    XL2'9B00',CL5'STAM',AL1(RS1),AL1(0),AL1(0),XL2'0000'
DC    XL2'9C00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
DC    XL2'9D00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
DC    XL2'9E00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
DC      XL2'9F00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
  DC    XL2'A000',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
  DC    XL2'A100',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
  DC    XL2'A200',  XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
    DC    XL2'A300',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
    DC    XL2'A400',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
    DC    XL2'A500',XL5'00',AL1(0  ),AL1(0),AL1(0),XL2'0000'
      DC    XL2'A600',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
      DC    XL2'A700',CL1'2',AL4(OCTWOA7),XL5'0000000000'
      DC    XL2'A800',CL5'MVCLE',AL1(RS1),AL1(0)  ,AL1(1),XL2'800A'
        DC    XL2'A900',CL5'CLCLE',AL1(RS1),AL1(0),AL1(13),XL2'800A'
        DC    XL2'AA00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
        DC    XL2'AB00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000' +
          DC    XL2'AC00',CL5'STNSM',AL1(SI1),AL1(PR),AL1(0),  XL2'0000'
            DC    XL2'AD00',CL5'STOSM',AL1(SI1),AL1(PR),AL1(0),XL2'0000'
            DC    XL2'AE00',CL5'SIGP',AL1(RS1),AL1(PR),AL1(1),XL2'0000'
            DC    XL2'AF00',CL5'MC',AL1(SI1),AL1(0),AL1(0),XL2'8000'
              DC    XL2'B000',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
              DC    XL2'B100',CL5'LRA',AL1(RX1),AL1(PR),AL1(1),XL2'0000'
              DC    XL2'B200',CL1'2',AL4(OCTWOB2),XL5'0000000000'
                DC    XL2'B300',CL1'2',AL4(OCTWOB3),XL5'0000000000'
                DC    XL2'B400',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
                DC    XL2'B500',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
                DC    XL2'  B600',CL5'STCTL',AL1(RS1),AL1(PR),AL1(0),XL2'0000'
                  DC    XL2'B700',CL5'LCTL',AL1(RS1),AL1(PR),AL1(0),XL2'0000'
                  DC    XL2'B800',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
                  DC    XL2'B900',XL5'00'  ,AL1(0),AL1(0),AL1(0),XL2'0000'
                    DC    XL2'BA00',CL5'CS',AL1(RS1),AL1(0),AL1(1),XL2'0000'
                    DC    XL2'BB00',CL5'CDS',AL1(RS1),AL1(0),AL1(1),XL2'000A'
                    DC    XL2'BC00',XL5'00',AL1(0),AL1(0  ),AL1(0),XL2'0000'
                      DC    XL2'BD00',CL5'CLM',AL1(RS2),AL1(0),AL1(2),XL2'0000'
                      DC    XL2'BE00',CL5'STCM',AL1(RS3),AL1(0),AL1(0),XL2'0000'
                      DC    XL2'BF00',CL5'ICM',AL1(RS3),AL1(0),AL1(3),X  L2'0000
'                       DC    XL2'C000',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
                        DC    XL2'C100',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
                        DC    XL2'C200',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
                          DC    XL2'C300',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
                          DC    XL2'C400',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
                          DC    XL2'C500',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
                            DC    XL2'C600',XL5'00',AL1(0),AL1(0),AL1(0),XL2'000
0'                          DC    XL2'C700',XL5'00',AL1(0),AL1(0),AL1(0),XL2'000
0'                          DC    XL2'C800',XL5'00',AL1(0),AL1(0),AL1(0),XL2'000
0'                          DC    XL 2'C900',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0
000'                          DC    XL2'CA00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0
000'                          DC    XL2'CB00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0
000'                             \         DC    XL2'CC00',XL5'00',AL1(0),AL1(0
),AL1(0),XL2'0000'                          DC    XL2'CD00',XL5'00',AL1(0),AL1(0
),AL1(0),XL2'0000'                          DC    XL2'CE00',XL5'00',AL1(0),AL1(0
),AL1(0),XL2'0000'                            DC    XL2'CF00',XL5'00',AL1(0),AL1
(0),AL1(0),XL2'0000'                          DC    XL2'D000',XL5'00',AL1(0),AL1
(0),AL1(0),XL2'0000'                          DC    XL2'D100',CL5'MVN',AL1(SS1),
AL1(0),AL1(0),XL2'0000'                       DC      XL2'D200',CL5'MVC',AL1(SS1
),AL1(0),AL1(0),XL2'0000'                       DC    XL2'D300',CL5'MVZ',AL1(SS1
),AL1(0),AL1(0),XL2'0000'                       DC    XL2'D400',CL5'NC',AL1(SS1)
,AL1(0),AL1(3),XL2'0000'                        DC    XL2'D500',CL  5'CLC',AL1(S
S1),AL1(0),AL1(2),XL2'0000'                       DC    XL2'D600',CL5'OC',AL1(SS
1),AL1(0),AL1(3),XL2'0000'                        DC    XL2'D700',CL5'XC',AL1(SS
1),AL1(0),AL1(3),XL2'0000'                        DC    XL2'D800',XL5'00',AL1(0)
,  AL1(0),AL1(0),XL2'0000'                          DC    XL2'D900',CL5'MVCK',AL
1(SS4),AL1(PR),AL1(1),XL2'0000'                     DC    XL2'DA00',CL5'MVCP',AL
1(SS4),AL1(PR),AL1(1),XL2'0000'                     DC    XL2'DB00',CL5'MVCS',AL
1(SS4),AL1(PR),A  L1(1),XL2'0000'                     DC    XL2'DC00',CL5'TR',AL
1(SS1),AL1(0),AL1(0),XL2'0000'                        DC    XL2'DD00',CL5'TRT',A
L1(SS1),AL1(0),AL1(3),XL2'0000'                       DC    XL2'DE00',CL5'ED',AL
1(SS1),AL1(0),AL1(8),XL2'0000'                          DC    XL2'DF00',CL5'EDMK
',AL1(SS1),AL1(0),AL1(8),XL2'0000'                      DC    XL2'E000',XL5'00',
AL1(0),AL1(0),AL1(0),XL2'0000'                          DC    XL2'E100',XL5'00',
AL1(0),AL1(0),AL1(0),XL2'0000'                            DC    XL2'E200',XL5'00
',AL1(0),AL1(0),AL1(0),XL2'0000'                          DC    XL2'E300',XL5'00
',AL1(0),AL1(0),AL1(0),XL2'0000'                          DC    XL2'E400',XL5'00
',AL1(0),AL1(0),AL1(0),XL2'0000'                          DC      XL2'E500',CL1'
2',AL4(OCTWOE5),XL5'0000000000'                             DC    XL2'E600',XL5'
00',AL1(0),AL1(0),AL1(0),XL2'0000'                          DC    XL2'E700',XL5'
00',AL1(0),AL1(0),AL1(0),XL2'0000'                          DC    XL2'E800',  CL
5'MVCIN',AL1(SS1),AL1(0),AL1(0),XL2'0000'                     DC    XL2'E900',XL
5'00',AL1(0),AL1(0),AL1(0),XL2'0000'                          DC    XL2'EA00',XL
5'00',AL1(0),AL1(0),AL1(0),XL2'0000'                          DC    XL2'EB00',XL
5'00',AL1(0  ),AL1(0),AL1(0),XL2'0000'                          DC    XL2'EC00',
XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'                          DC    XL2'ED00',
CL1'2',AL4(OCTWOED),XL5'0000000000'                             DC    XL2'EE00',
CL5'PLO',AL1(SS3),AL1(0),A  L1(1),XL2'0000'                       DC    XL2'EF00
',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'                          DC    XL2'F000
',CL5'SRP',AL1(SS5),AL1(0),AL1(9),XL2'0000'                       DC    XL2'F100
',CL5'MVO',AL1(SS2),AL1(0),AL1(0),XL2'000+ 0'                       DC    XL2'F2
00',CL5'PACK',AL1(SS2),AL1(0),AL1(0),XL  2'0000'                      DC    XL2'
F300',CL5'UNPK',AL1(SS2),AL1(0),AL1(0),XL2'0000'                      DC    XL2'
F400',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'                          DC    XL2'
F500',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'                            DC    XL
2'F600',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'                          DC    XL
2'F700',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'                          DC    XL
2'F800',CL5'ZAP',AL1(SS2),AL1(0),AL1(9),XL2'0000'                         DC
XL2'F900',CL5'CP',AL1(SS2),AL1(0),AL1(2),XL2'0000'                        DC
XL2'FA00',CL5'AP',AL1(SS2),AL1(0),AL1(9),XL2'0000'                        DC
XL2'FB00',CL5'SP',AL1(SS2),AL1(0),AL1(9),XL2'0000'                        DC
XL2'  FC00',CL5'MP',AL1(SS2),AL1(0),AL1(0),XL2'0000'                        DC
  XL2'FD00',CL5'DP',AL1(SS2),AL1(0),AL1(0),XL2'0000'                        DC
  XL2'FE00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'                          DC
  XL2'FF00',XL5'00'  ,AL1(0),AL1(0),AL1(0),XL2'0000'                          DC
    12X'FF'              END OF TABLE                                ***********
************************************************************         *TABLES OF
TWO-BYTE INSTRUCTIONS WHOSE FIRST   BYTE IS 01               *         *********
**************************************************************
DS    0F                                                               OCTWO01
DS    0XL12
  DC    XL2'0101',CL5'PR',AL1(E1),AL1(0),AL1(1),XL2'0000'
  DC    XL2'0102',CL5'UPT',AL1(E1),AL1(0),AL1(4),XL2'0000'
  DC    XL2'0107',CL5'SCKPF',AL1(E1),AL1(PR),AL1(0),XL2'0000'
    DC    XL2'01FF',CL5'TRAP2',AL1(E1),AL1(0),AL1(0),XL2'0000'
    DC    12X'FF'              END OF TABLE                                *****
******************************************************************         *TAB
 LES OF 1.5-BYTE INSTRUCTIONS WHOSE FIRST BYTE IS A7               *         ***
********************************************************************
      DS    0F                                                               OCT
WOA7  DS    0X L12
        DC    XL2'A700',CL5'TMH',AL1(RI1),AL1(0),AL1(12),XL2'0000'
        DC    XL2'A710',CL5'TML',AL1(RI1),AL1(0),AL1(12),XL2'0000'
           \         DC    XL2'A740',CL5'BRC',AL1(RI1),AL1(0),AL1(0),XL2'0000'
                      DC    XL2'A750',CL5'BRAS',AL1(RI1),AL1(0),AL1(0),XL2'0000'
                      DC    XL2'A760',CL5'BRCT',AL1(RI1),AL1(0),AL1(0),XL2'0000'
                        DC    XL2'A780',CL5'LHI',AL1(RI1),AL1(0),AL1(0),XL2'0000
'                       DC    XL2'A7A0',CL5'AHI',AL1(RI1),AL1(0),AL1(9),XL2'0000
'                       DC    XL2'A7C0',CL5'MHI',AL1(RI1),AL1(0),AL1(0),XL2'0000
'                       DC      XL2'A7E0',CL5'CHI',AL1(RI1),AL1(0),AL1(2),XL2'00
00'                       DC    12X'FF'              END OF TABLE
                 ***************************************************************
********         *TABLES OF TWO-BYTE INSTRUC  TIONS WHOSE FIRST BYTE IS B2
         *         *************************************************************
**********                  DS    0F
                   OCTWOB2  DS    0XL12
                              DC    XL2'B202',CL5'STIDP',AL1(S3),AL1(PR),AL1(0),
XL2'0000'                     DC    XL2'B204',CL5'SCK',AL1(S3),AL1(PR),AL1(1),XL
2'0000'                       DC    XL2'B205',CL5'STCK',AL1(S3),AL1(0),AL1  (1),
XL2'0000'                       DC    XL2'B206',CL5'SCKC',AL1(S3),AL1(PR),AL1(0)
,XL2'0000'                      DC    XL2'B207',CL5'STCKC',AL1(S3),AL1(PR),AL1(0
),XL2'0000'                     DC    XL2'B208',CL5'SPT',AL1(S3),AL1(PR),AL1(0),
XL2'0000'                         DC    XL2'B209',CL5'STPT',AL1(S3),AL1(PR),AL1(
0),XL2'0000'                      DC    XL2'B20A',CL5'SPKA',AL1(S3),AL1(PR),AL1(
0),XL2'0000'                      DC    XL2'B20B',CL5'IPK',AL1(S2),AL1(PR),AL1(0
),XL2'0000'                         DC    XL2'B20D',CL5'PTLB',AL1(S2),AL1(PR),AL
1(0),XL2'0000'                      DC    XL2'B210',CL5'SPX',AL1(S3),AL1(PR),AL1
(0),XL2'0000'                       DC    XL2'B211',CL5'STPX',AL1(S3),AL1(PR),AL
1(0),XL2'0000'                      DC      XL2'B212',CL5'STAP',AL1(S3),AL1(PR),
AL1(0),XL2'0000'                      DC    XL2'B218',CL5'PC',AL1(S3),AL1(PR),AL
1(0),XL2'0000'                        DC    XL2'B219',CL5'SAC',AL1(S3),AL1(PR),A
L1(0),XL2'0000'                       DC    XL2'B21A',  CL5'CFC',AL1(S3),AL1(0),
AL1(4),XL2'8000'                        DC    XL2'B221',CL5'IPTE',AL1(RRE1),AL1(
PR),AL1(0),XL2'0000'                    DC    XL2'B222',CL5'IPM',AL1(RRE2),AL1(0
),AL1(0),XL2'0000'                      DC    XL2'B223',CL5'IVSK',AL1  (RRE1),AL
1(PR),AL1(0),XL2'0000'                    DC    XL2'B224',CL5'IAC',AL1(RRE2),AL1
(PR),AL1(1),XL2'0000'                     DC    XL2'B225',CL5'SSAR',AL1(RRE2),AL
1(0),AL1(0),XL2'0000'                     DC    XL2'B226',CL5'EPAR',AL1(RRE2),AL
1(PR  ),AL1(0),XL2'0000'                    DC    XL2'B227',CL5'ESAR',AL1(RRE2),
AL1(PR),AL1(0),XL2'0000'                    DC    XL2'B228',CL5'PT',AL1(RRE1),AL
1(PR),AL1(0),XL2'0000'                      DC    XL2'B229',CL5'ISKE',AL1(RRE1),
AL1(PR),AL1(0),XL2'+ 0000'                    DC    XL2'B22A',CL5'RRBE',AL1(RRE1
),AL1(PR),AL1(1),  XL2'0000'                    DC    XL2'B22B',CL5'SSKE',AL1(RR
E1),AL1(PR),AL1(0),XL2'0000'                    DC    XL2'B22C',CL5'TB',AL1(RRE1
),AL1(PR),AL1(1),XL2'0000'                      DC    XL2'B22D',CL5'DXR',AL1(RRE
1),AL1(FP),AL1(0),XL2'0180'                       DC    XL2'B230',CL5'CSCH',AL1(
S2),AL1(PR),AL1(1),XL2'0000'                      DC    XL2'B231',CL5'HSCH',AL1(
S2),AL1(PR),AL1(1),XL2'0000'                      DC    XL2'B232',CL5'MSCH',AL1(
S3),AL1(PR),AL1(1),XL2'0000'                        DC    XL2'B233',CL5'SSCH',AL
1(S3),AL1(PR),AL1(1),XL2'0000'                      DC    XL2'B234',CL5'STSCH',A
L1(S3),AL1(PR),AL1(1),XL2'0000'                     DC    XL2'B235',CL5'TSCH',AL
1(S3),AL1(PR),AL1(1),XL2'0000'                      DC    XL2'  B236',CL5'TPI',A
L1(S3),AL1(PR),AL1(1),XL2'0000'                       DC    XL2'B237',CL5'SAL',A
L1(S2),AL1(PR),AL1(0),XL2'0000'                       DC    XL2'B238',CL5'RSCH',
AL1(S2),AL1(PR),AL1(1),XL2'0000'                      DC    XL2'B239',CL5'STC  R
W',AL1(S3),AL1(PR),AL1(1),XL2'0000'                     DC    XL2'B23A',CL5'STCP
S',AL1(S3),AL1(PR),AL1(0),XL2'0000'                     DC    XL2'B23B',CL5'RCHP
',AL1(S2),AL1(PR),AL1(1),XL2'0000'                      DC    XL2'B23C',CL5'SCHM
',AL1(S2),AL  1(PR),AL1(0),XL2'0000'                      DC    XL2'B240',CL5'BA
KR',AL1(RRE1),AL1(0),AL1(0),XL2'0000'                     DC    XL2'B241',CL5'CK
SM',AL1(RRE1),AL1(0),AL1(1),XL2'8014'                     DC    XL2'B244',CL5'SQ
DR',AL1(RRE1),AL1(FP),AL1(0  ),XL2'0000'                    DC    XL2'B245',CL5'
SQER',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'                    DC    XL2'B246',CL5'
STURA',AL1(RRE1),AL1(PR),AL1(0),XL2'0000'                   DC    XL2'B247',CL5'
MSTA',AL1(RRE2),AL1(0),AL1(0),XL2'0002'                       DC    XL2'B248',CL
5'PALB',AL1(RRE3),AL1(PR),AL1(0),XL2'0000'                    DC    XL2'B249',CL
5'EREG',AL1(RRE1),AL1(0),AL1(0),XL2'0000'                     DC    XL2'B24A',CL
5'ESTA',AL1(RRE1),AL1(0),AL1(1),XL2'0002'                       DC    XL2'B24B',
CL5'LURA',AL1(RRE1),AL1(PR),AL1(0),XL2'0000'                    DC    XL2'B24C',
CL5'TAR',AL1(RRE1),AL1(0),AL1(1),XL2'0000'                      DC    XL2'B24D',
CL5'CPYA',AL1(RRE1),AL1(0),AL1(0),XL2'0000'                     DC    XL 2'B24E
',CL5'SAR',AL1(RRE1),AL1(0),AL1(0),XL2'0000'                      DC    XL2'B24F
',CL5'EAR',AL1(RRE1),AL1(0),AL1(0),XL2'0000'                      DC    XL2'B252
',CL5'MSR',AL1(RRE1),AL1(0),AL1(0),XL2'0000'                         \
DC    XL2'B254',CL5'MVPG',AL1(RRE1),AL1(0),AL1(1),XL2'0010'
DC    XL2'B255',CL5'MVST',AL1(RRE1),AL1(0),AL1(1),XL2'0000'
DC    XL2'B257',CL5'CUSE',AL1(RRE1),AL1(0),AL1(4),XL2'0006'
  DC    XL2'B258',CL5'BSG',AL1(RRE1),AL1(0),AL1(0),XL2'0000'
  DC    XL2'B25A',CL5'BSA',AL1(RRE1),AL1(PR),AL1(0),XL2'0000'
  DC    XL2'B25D',CL5'CLST',AL1(RRE1),AL1(0),AL1(1),XL2'0000'
  DC      XL2'B25E',CL5'SRST',AL1(RRE1),AL1(0),AL1(1),XL2'0000'
    DC    XL2'B277',CL5'RP',AL1(S3),AL1(PR),AL1(1),XL2'0000'
    DC    XL2'B278',CL5'STCKE',AL1(S3),AL1(0),AL1(1),XL2'0000'
    DC    XL2'B279',CL  5'SACF',AL1(S3),AL1(PR),AL1(0),XL2'0000'
      DC    XL2'B27D',CL5'STSI',AL1(S3),AL1(PR),AL1(1),XL2'0000'
      DC    XL2'B299',CL5'SRNM',AL1(S3),AL1(FP),AL1(0),XL2'0000'
      DC    XL2'B29C',CL5'STFPC',AL1(  S3),AL1(FP),AL1(0),XL2'0000'
        DC    XL2'B29D',CL5'LFPC',AL1(S3),AL1(FP),AL1(0),XL2'0000'
        DC    XL2'B2A5',CL5'TRE',AL1(RRE1),AL1(0),AL1(1),XL2'8012'
        DC    XL2'B2A6',CL5'CUUTF',AL1(RRE1),AL1(0),  AL1(1),XL2'0016'
          DC    XL2'B2A7',CL5'CUTFU',AL1(RRE1),AL1(0),AL1(1),XL2'0000'
          DC    XL2'B2FF',CL5'TRAP4',AL1(S3),AL1(0),AL1(0),XL2'0000'
          DC    12X'FF'              END OF TABLE
   ***********************************************************************
   *TABLES OF TWO-BYTE INSTRUCTIONS WHOSE FIRST BYTE IS B3               *
   ***********************************************************************
              DS    0F
     OCTWOB3  DS    0XL12
              DC    XL2'B300',CL5'LPEBR',AL1(RRE1),AL1(FP),AL1(10),XL2'0000'
              DC      XL2'B301',CL5'LNEBR',AL1(RRE1),AL1(FP),AL1(7),XL2'0000'
                DC    XL2'B302',CL5'LTEBR',AL1(RRE1),AL1(FP),AL1(14),XL2'0000'
                DC    XL2'B303',CL5'LCEBR',AL1(RRE1),AL1(FP),AL1(14),XL2'0000'
                DC    XL2'B304',  CL5'LDEBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'
                  DC    XL2'B305',CL5'LXDBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0080'
                  DC    XL2'B306',CL5'LXEBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0080'
                  DC    XL2'B307',CL5'MXDBR',AL  1(RRE1),AL1(FP),AL1(0),XL2'0080
'                   DC    XL2'B308',CL5'KEBR',AL1(RRE1),AL1(FP),AL1(13),XL2'0000
'                   DC    XL2'B309',CL5'CEBR',AL1(RRE1),AL1(FP),AL1(13),XL2'0000
'                   DC    XL2'B30A',CL5'AEBR',AL1(RRE1),AL1(FP  ),AL1(14),XL2'00
00'                   DC    XL2'B30B',CL5'SEBR',AL1(RRE1),AL1(FP),AL1(14),XL2'00
00'                   DC    XL2'B30C',CL5'MDEBR',AL1(RRE1),AL1(FP),AL1(0),XL2'00
00'                   DC    XL2'B30D',CL5'DEBR',AL1(RRE1),AL1(FP),AL1(0),XL2'+ 0
000'                    DC    XL2'B30E',CL5'MAEBR',AL1(RRF1),AL1(FP),AL1(0)  ,XL
2'0000'                   DC    XL2'B30F',CL5'MSEBR',AL1(RRF1),AL1(FP),AL1(0),XL
2'0000'                   DC    XL2'B310',CL5'LPDBR',AL1(RRE1),AL1(FP),AL1(10),X
L2'0000'                  DC    XL2'B311',CL5'LNDBR',AL1(RRE1),AL1(FP),AL1(7),XL
2'0000'                     DC    XL2'B312',CL5'LTDBR',AL1(RRE1),AL1(FP),AL1(14)
,XL2'0000'                  DC    XL2'B313',CL5'LCDBR',AL1(RRE1),AL1(FP),AL1(14)
,XL2'0000'                  DC    XL2'B314',CL5'SQEBR',AL1(RRE1),AL1(FP),AL1(0),
XL2'0000'                     DC    XL2'B315',CL5'SQDBR',AL1(RRE1),AL1(FP),AL1(0
),XL2'0000'                   DC    XL2'B316',CL5'SQXBR',AL1(RRE1),AL1(FP),AL1(0
),XL2'0180'                   DC    XL2'B317',CL5'MEEBR',AL1(RRE1),AL1(FP),AL1(0
),XL2'0000'                   DC    XL2'  B318',CL5'KDBR',AL1(RRE1),AL1(FP),AL1(
13),XL2'0000'                   DC    XL2'B319',CL5'CDBR',AL1(RRE1),AL1(FP),AL1(
13),XL2'0000'                   DC    XL2'B31A',CL5'ADBR',AL1(RRE1),AL1(FP),AL1(
14),XL2'0000'                   DC    XL2'B31B',CL5'SDB  R',AL1(RRE1),AL1(FP),AL
1(14),XL2'0000'                   DC    XL2'B31C',CL5'MDBR',AL1(RRE1),AL1(FP),AL
1(0),XL2'0000'                    DC    XL2'B31D',CL5'DDBR',AL1(RRE1),AL1(FP),AL
1(0),XL2'0000'                    DC    XL2'B31E',CL5'MADBR',AL1(RRF1)  ,AL1(FP)
,AL1(0),XL2'0000'                   DC    XL2'B31F',CL5'MSDBR',AL1(RRF1),AL1(FP)
,AL1(0),XL2'0000'                   DC    XL2'B324',CL5'LDER',AL1(RRE1),AL1(FP),
AL1(0),XL2'0000'                    DC    XL2'B325',CL5'LXDR',AL1(RRE1),AL1(FP),
AL1(0  ),XL2'0080'                    DC    XL2'B326',CL5'LXER',AL1(RRE1),AL1(FP
),AL1(0),XL2'0080'                    DC    XL2'B336',CL5'SQXR',AL1(RRE1),AL1(FP
),AL1(0),XL2'0180'                    DC    XL2'B337',CL5'MEER',AL1(RRE1),AL1(FP
),AL1(0),XL2'0000'                      DC    XL2'B340',CL5'LPXBR',AL1(RRE1),AL1
(FP),AL1(10),XL2'0180'                  DC    XL2'B341',CL5'LNXBR',AL1(RRE1),AL1
(FP),AL1(7),XL2'0180'                   DC    XL2'B342',CL5'LTXBR',AL1(RRE1),AL1
(FP),AL1(14),XL2'0180'                    DC    XL2'B343',CL5'LCXBR',AL1(RRE1),A
L1(FP),AL1(14),XL2'0180'                  DC    XL2'B344',CL5'LEDBR',AL1(RRE1),A
L1(FP),AL1(0),XL2'0000'                   DC    XL2'B345',CL5'LDXBR',AL1(RRE1),A
L1(FP),AL1(0),XL2'0180'                   DC    XL 2'B346',CL5'LEXBR',AL1(RRE1)
,AL1(FP),AL1(0),XL2'0180'                   DC    XL2'B347',CL5'FIXBR',AL1(RRF2)
,AL1(FP),AL1(0),XL2'01C0'                   DC    XL2'B348',CL5'KXBR',AL1(RRE1),
AL1(FP),AL1(13),XL2'0180'                      \         DC    XL2'B349',CL5'CX
BR',AL1(RRE1),AL1(FP),AL1(13),XL2'0180'                   DC    XL2'B34A',CL5'AX
BR',AL1(RRE1),AL1(FP),AL1(14),XL2'0180'                   DC    XL2'B34B',CL5'SX
BR',AL1(RRE1),AL1(FP),AL1(14),XL2'0180'                     DC    XL2'B34C',CL5'
MXBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0180'                    DC    XL2'B34D',CL5'
DXBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0180'                    DC    XL2'B350',CL5'
TBEDR',AL1(RRF2),AL1(FP),AL1(14),XL2'0040'                  DC      XL2'B351',CL
5'TBDR',AL1(RRF2),AL1(FP),AL1(14),XL2'0040'                   DC    XL2'B353',CL
5'DIEBR',AL1(RRF3),AL1(FP),AL1(1),XL2'8040'                   DC    XL2'B357',CL
5'FIEBR',AL1(RRF2),AL1(FP),AL1(0),XL2'0040'                   DC    XL2'B358',CL
  5'THDER',AL1(RRE1),AL1(FP),AL1(14),XL2'0000'                  DC    XL2'B359',
CL5'THDR',AL1(RRE1),AL1(FP),AL1(14),XL2'0000'                   DC    XL2'B35B',
CL5'DIDBR',AL1(RRF3),AL1(FP),AL1(1),XL2'8040'                   DC    XL2'B35F',
CL5'FIDBR',AL1(  RRF2),AL1(FP),AL1(0),XL2'0040'                   DC    XL2'B360
',CL5'LPXR',AL1(RRE1),AL1(FP),AL1(10),XL2'0180'                   DC    XL2'B361
',CL5'LNXR',AL1(RRE1),AL1(FP),AL1(7),XL2'0180'                    DC    XL2'B362
',CL5'LTXR',AL1(RRE1),AL1(FP),  AL1(8),XL2'0180'                    DC    XL2'B3
63',CL5'LCXR',AL1(RRE1),AL1(FP),AL1(8),XL2'0180'                    DC    XL2'B3
65',CL5'LXR',AL1(RRE1),AL1(FP),AL1(0),XL2'0180'                     DC    XL2'B3
66',CL5'LEXR',AL1(RRE1),AL1(FP),AL1(0),XL2'01  00'                    DC    XL2'
B367',CL5'FIXR',AL1(RRE1),AL1(FP),AL1(0),XL2'0180'                    DC    XL2'
B369',CL5'CXR',AL1(RRE1),AL1(FP),AL1(2),XL2'0180'                     DC    XL2'
B374',CL5'LZER',AL1(RRE2),AL1(FP),AL1(0),XL2'0000'                      DC    XL
2'B375',CL5'LZDR',AL1(RRE2),AL1(FP),AL1(0),XL2'0000'                    DC    XL
2'B376',CL5'LZXR',AL1(RRE2),AL1(FP),AL1(0),XL2'0080'                    DC    XL
2'B377',CL5'FIER',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'                    DC
XL2'B37F',CL5'FIDR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'                    DC
XL2'B384',CL5'SFPC',AL1(RRE2),AL1(FP),AL1(0),XL2'0000'                    DC
XL2'B38C',CL5'EFPC',AL1(RRE2),AL1(FP),AL1(0),XL2'0000'                    DC
XL2'B394',  CL5'CEFBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'                   DC
  XL2'B395',CL5'CDFBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'                   DC
  XL2'B396',CL5'CXFBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0080'                   DC
  XL2'B398',CL5'CFEBR',AL  1(RRF2),AL1(FP),AL1(14),XL2'0040'                  DC
    XL2'B399',CL5'CFDBR',AL1(RRF2),AL1(FP),AL1(14),XL2'0040'                  DC
    XL2'B39A',CL5'CFXBR',AL1(RRF2),AL1(FP),AL1(14),XL2'0100'                  DC
    XL2'B3B4',CL5'CEFR',AL1(RRE1),AL1(FP  ),AL1(0),XL2'0000'
DC    XL2'B3B5',CL5'CDFR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'
DC    XL2'B3B6',CL5'CXFR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'
DC    XL2'B3B8',CL5'CFER',AL1(RRF2),AL1(FP),AL1(14),XL2+ '0040'
  DC    XL2'B3B9',CL5'CFDR',AL1(RRF2),AL1(FP),AL1(14)  ,XL2'0040'
    DC    XL2'B3BA',CL5'CFXR',AL1(RRF2),AL1(FP),AL1(14),XL2'0140'
    DC    12X'FF'              END OF TABLE                                *****
******************************************************************           *TA
BLES OF TWO-BYTE INSTRUCTIONS WHOSE FIRST BYTE IS E5               *         ***
********************************************************************
      DS    0F                                                               OCT
WOE  5  DS    0XL12
        DC    XL2'E500',CL5'LASP',AL1(SSE1),AL1(PR),AL1(1),XL2'0000'
        DC    XL2'E501',CL5'TPROT',AL1(SSE1),AL1(PR),AL1(1),XL2'0000'
        DC    XL2'  E50E',CL5'MVCSK',AL1(SSE1),AL1(PR),AL1(0),XL2'0000'
          DC    XL2'E50F',CL5'MVCDK',AL1(SSE1),AL1(PR),AL1(0),XL2'0000'
          DC    12X'FF'              END OF TABLE
 ********************************  ***************************************
   *TABLES OF TWO-BYTE INSTRUCTIONS WHOSE FIRST BYTE IS ED               *
   ***********************************************************************
            DS    0F
     OCTWOED  DS    0XL12
              DC    XL2'ED04',CL5'LDEB',AL1(RXE1),AL1(FP),AL1(0),XL2'0000'
              DC    XL2'ED05',CL5'LXDB',AL1(RXE1),AL1(FP),AL1(0  ),XL2'0080'
                DC    XL2'ED06',CL5'LXEB',AL1(RXE1),AL1(FP),AL1(0),XL2'0080'
                DC    XL2'ED07',CL5'MXDB',AL1(RXE1),AL1(FP),AL1(0),XL2'0080'
                DC    XL2'ED08',CL5'KEB',AL1(RXE1),AL1(FP),AL1(13),XL2'0000'
                  DC    XL2'ED09',CL5'CEB',AL1(RXE1),AL1(FP),AL1(13),XL2'0000'
                  DC    XL2'ED0A',CL5'AEB',AL1(RXE1),AL1(FP),AL1(14),XL2'0000'
                  DC    XL2'ED0B',CL5'SEB',AL1(RXE1),AL1(FP),AL1(14),XL2'0000'
                    DC    XL2'ED0C',CL5'MDEB',AL1(RXE1),AL1(FP),AL1(0),XL2'0000'
                    DC    XL2'ED0D',CL5'DEB',AL1(RXE1),AL1(FP),AL1(0),XL2'0000'
                    DC    XL2'ED0E',CL5'MAEB',AL1(RXF1),AL1(FP),AL1(0),XL2'0000'
                    DC    XL 2'ED0F',CL5'MSEB',AL1(RXF1),AL1(FP),AL1(0),XL2'000
0'                    DC    XL2'ED10',CL5'TCEB',AL1(RXE1),AL1(FP),AL1(1),XL2'000
0'                    DC    XL2'ED11',CL5'TCDB',AL1(RXE1),AL1(FP),AL1(1),XL2'000
0'                       \         DC    XL2'ED12',CL5'TCXB',AL1(RXE1),AL1(FP),
AL1(1),XL2'0080'                    DC    XL2'ED14',CL5'SQEB',AL1(RXE1),AL1(FP),
AL1(0),XL2'0000'                    DC    XL2'ED15',CL5'SQDB',AL1(RXE1),AL1(FP),
AL1(0),XL2'0000'                      DC    XL2'ED17',CL5'MEEB',AL1(RXE1),AL1(FP
),AL1(0),XL2'0000'                    DC    XL2'ED18',CL5'KDB',AL1(RXE1),AL1(FP)
,AL1(13),XL2'0000'                    DC    XL2'ED19',CL5'CDB',AL1(RXE1),AL1(FP)
,AL1(13),XL2'0000'                    DC      XL2'ED1A',CL5'ADB',AL1(RXE1),AL1(F
P),AL1(14),XL2'0000'                    DC    XL2'ED1B',CL5'SDB',AL1(RXE1),AL1(F
P),AL1(14),XL2'0000'                    DC    XL2'ED1C',CL5'MDB',AL1(RXE1),AL1(F
P),AL1(0),XL2'0000'                     DC    XL2'ED1D',CL  5'DDB',AL1(RXE1),AL1
(FP),AL1(0),XL2'0000'                     DC    XL2'ED1E',CL5'MADB',AL1(RXF1),AL
1(FP),AL1(0),XL2'0000'                    DC    XL2'ED1F',CL5'MSDB',AL1(RXF1),AL
1(FP),AL1(0),XL2'0000'                    DC    XL2'ED24',CL5'LDE',AL1(RX  E1),A
L1(FP),AL1(0),XL2'0000'                     DC    XL2'ED25',CL5'LXD',AL1(RXE1),A
L1(FP),AL1(0),XL2'0080'                     DC    XL2'ED26',CL5'LXE',AL1(RXE1),A
L1(FP),AL1(0),XL2'0080'                     DC    XL2'ED34',CL5'SQE',AL1(RXE1),A
L1(FP),A  L1(0),XL2'0000'                     DC    XL2'ED35',CL5'SQD',AL1(RXE1)
,AL1(FP),AL1(0),XL2'0000'                     DC    XL2'ED37',CL5'MEE',AL1(RXE1)
,AL1(FP),AL1(0),XL2'0000'                     DC    12X'FF'              END OF
TABLE                                  *
                                       *****************************************
******************************         *     ***** CONDITION CODE TABLE ENTRIES
FOR THE CC COLUMN *****      *           * IN THE TABLE, NON-NUMERIC ENTRIES GIV
E THE INSTRUCTION MNEMONIC TO  *         * BE USED WHEN THE MASK IN THE INSTRUCT
ION MATCHES THE COLUMN NUMBER. *         * WHEN THE ENTRY IS NUMERIC, IT IS THE
CONDITION TO BE USED, AND THE  *         * MNEMONIC W  ILL BE BC OR BCR.
                                 *         *************************************
**********************************         *            0  1  2  3  4  5  6  7
8  9  A  B  C  D  E  F           *         *************************  **********
************************************         CC01 DC CL48'NOP1  2  3  4  5  6  7
  8  9  10 11 12 13 14 B  '                  CC02 DC CL48'NOP1  BH 3  BL 5  6  B
NEBE 9  10 BNL12 BNH14 B  '                  CC03 DC CL48'NOP1  2  3  4  5  6  B
NZB  Z 9  10 11 12 13 14 B  '                  CC04 DC CL48'NOP1  2  3  4  5  6
 BNEBE 9  10 11 12 13 14 B  '                  CC05 DC CL48'NOP1  BH 3  BL 5  6
 BNEBE 9  10 BNL12 13 14 B  '                  CC06 DC CL48'NOPBO BP 3  4  5  6
 BNZBZ 9  10 11 12   13 14 B  '                  CC07 DC CL48'NOP1  2  3  BM 5
6  BNZBZ 9  10 11 12 13 14 B  '                  CC08 DC CL48'NOP1  BP 3  BM 5
6  BNZBZ 9  10 BNM12 BNP14 B  '                  CC09 DC CL48'NOPBO BP 3  BM 5
6  BNZBZ 9  10 BNM12 BNPBNOB  '  +                 CC0A DC CL48'NOP1  BP 3  4  5
  6  BNZBZ 9  10 11 12 13 14 B    '                  CC0B DC CL48'NOPBO 2  3  BM
 5  6  BNZBZ 9  10 BNM12 13 BNOB  '                  CC0C DC CL48'NOPBO 2  3  4
 5  6  BNZBZ 9  10 11 12 13 BNOB  '                  CC0D DC CL48'NOP1  BH 3  BL
 5  6  BNEBE 9  10 11 12 13 14 B  '                    CC0E DC CL48'NOP1  BP 3
BM 5  6  BNZBZ 9  10 11 12 13 14 B  '                  *************************
**********************************************         *  ***** MACHINE AND CODI
NG FORMATS FOR THE FMT COLUMN                *         ******  *****************
************************************************         * THE FORMAT TABLE BELO
W SHOWS FOR EACH FMT NUMBER THE INSTRUCTION    *         * FORMAT NAME, MACHINE
INSTRUCTION FORMAT, AND CODING FORMAT. THE     *         * MACHINE INSTRUCTI  ON
 SHOWS HOW THE INSTRUCTION IS FORMATTED IN MEMORY*         * DURING EXECUTION, W
HILE THE CODING FORMAT SHOWS HOW THE INSTRUCTION *         * IS CODED BY THE ASS
EMBLER PROGRAMMER.                               *         * MACHINE INSTRUCTION
 FORMATS SH  OW EACH NYBBLE (HALF-BYTE) OF THE     *         * INSTRUCTION, AND
THE DATA CONTAINED IN THAT NYBBLE. DATA CONTENT    *         * ABBREVIATIONS ARE
: OC=OP-CODE, R1-R4 ARE REGISTER OPERANDS, M1-M4   *         * ARE MASK OPERANDS
, I1-I4 ARE IMMEDIATE OPER  ANDS, LL IS A SINGLE     *         * INSTRUCTION LEN
GTH, L1 AND L2 ARE OPERAND (1 AND 2) LENGTHS.        *         *****************
******************************************************         FP       EQU  64
    FLOATING POINT INSTRUCTION                                   PR       EQU  3
2     PRIVILEGED INSTRUCTION                                     E1       EQU  1
      OCOCOCOC                 <==> (NONE)                       RI1      EQU  2
      OCOCR1OCI2I2I2I2         <==> R1,I2                          RR1      EQU
 3      OCOCR1R2                 <==> R1,R2                        RR2      EQU
 4      OCOCI1I1                 <==> I1                           RR3      EQU
 5      OCOCR1--                 <==> R1                           RR4        EQ
U  29     OCOCM1R2                 <==> M1,R2                        RRE1     EQ
U  6      OCOCOCOC----R1R2         <==> R1,R2                        RRE2     EQ
U  7      OCOCOCOC----R1--         <==> R1                           RRE3     EQ
U  8       OCOCOCOC--------         <==> (NONE)                       RRF1
EQU  9      OCOCOCOCR1--R3R2         <==> R1,R3,R2                     RRF2
EQU  10     OCOCOCOCM3--R1R2         <==> R1,M3,R2                            
    \RRF3     EQU  11     OCOCOCOCR3M4R1R2         <==> R1,R3,R2,M4
     RS1      EQU  12     OCOCR1R3B2D2D2D2         <==> R1,R3,D2(B2)
     RS2      EQU  13     OCOCR1--B2D2D2D2         <==> R1,D2(B2)
     R  S3      EQU  14     OCOCR1M3B2D2D2D2         <==> R1,M3,D2(B2)
       RSI1     EQU  15     OCOCR1R3I2I2I2I2         <==> R1,R3,I2
       RX1      EQU  16     OCOCR1X2B2D2D2D2         <==> R1,D2(X2,B2)
       RX2      EQU    17     OCOCM1X2B2D2D2D2         <==> M1,D2(X2,B2)
         RXE1     EQU  18     OCOCR1X2B2D2D2D2----OCOC <==> R1,D2(X2,B2)
         RXF1     EQU  19     OCOCR3X2B2D2D2D2R1--OCOC <==> R1,R3,D2(X2,B2)
         S1       EQU  20     OCOC--  --B2D2D2D2         <==> D2(B2)
           S2       EQU  21     OCOCOCOC--------         <==> (NONE)
           S3       EQU  30     OCOCOCOCB2D2D2D2         <==> D2(B2)
           SI1      EQU  22     OCOCI2I2B1D1D1D1           <==> D1(B1),I2
             SS1      EQU  23     OCOCLLLLB1D1D1D1B2D2D2D2 <==> D1(LL,B1),D2(B2)
             SS2      EQU  24     OCOCL1L2B1D1D1D1B2D2D2D2 <==> D1(L1,B1),D2(L2,
B2)          SS3      EQU  25     OCOCR1R3B2D2D2D2B4D4D4D4 <==> R1  ,D2(B2),R3,D
4(B4)          SS4      EQU  26     OCOCR1R3B1D1D1D1B2D2D2D2 <==> D1(R1,B1),D2(B
2),R3          SS5      EQU  27     OCOCL1I3B1D1D1D1B2D2D2D2 <==> D1(L1,B1),D2(B
2),I3          SSE1     EQU  28     OCOCOCOCB1D1D1D1B2D2D2D2 <==> D1(B1),D2(B2)
                 ***************************************************************
********         *  PARAMETER AREA PASSED TO THE READLMOD SUBROUTINE
       *         ***************************************************************
********           PARMAREA DS    0F          READLMOD PARAMETER AREA
                   PRMDDNAM DC    CL8'SYSLIB'    DDNAME FOR LOADLIB CONTAINING M
EMBER              PRMEMBER DC    CL8' '         MEMBER NAME
                   PRMCSECT DC      CL8' '         CSECT NAME
                     PRMREQST DC    CL8' '         NAME OF DATA TO BE RETRIEVED:
 ESD, RLD,           *                                TEXT, SYM, IDRU, IDRL, IDR
Z, IDRB,             *                                  NAME, OR MAP
                       PRMCURSR DC    F'0'        CURSOR VALUE. CALLER SETS THIS
 TO ZERO               *                             BEFORE A FIRST CALL FOR A S
ET OF DATA,            *                             THEN LEA  VES IT AS-IS WHEN
 RETURNING FOR           *                             ADDITIONAL DATA UNTIL IT
HAS ALL BEEN             *                             RETURNED. CURRENT VALUE I
S RETURNED BY            *                             THIS SUBROUTINE AFTER   E
ACH CALL.                  PRMRETCD DC    F'0'        RETURN CODE FROM IEWBIND (
S/B ZERO)                  PRMRSNCD DC    F'0'        REASON CODE FROM IEWBIND (
ZERO MEANS                 *                             MORE DATA OF THIS TYPE
IS AVAILABL+ E AND           *                             WILL BE RETURNED IN S
UBSEQUENT   CALLS.             *                             4 MEANS THE DATA IN
 THE BUFFER IS ALL             *                             THAT IS AVAILABLE O
F THE REQUESTED TYPE           PRMCOUNT DC    F'0'        NUMBER ELEMENTS AVAILA
BLE IN THE BUFFER                PRMBUFAD DC    A(0)        ADDRESS OF THE DATA
BUFFER HEADER. THE               *                             HEADER IS 32 BYTE
S LONG, FOLLOWED BY              *                             THE DATA ELEMENTS
.                                PRMERR  OR DS    CL1         ERROR INDICATOR ON
 RETURN:                           PRMOK    EQU   C' '           SUCCESSFUL READ
LMOD CALL                          PRMPRMER EQU   C'P'           PARAMETER ERROR
                                   PRMACERR EQU   C'E'             IEWBIND MACRO
 ERROR OCCURRED                      *******************************************
**************************           *             DCB'S
                         *           ********************************  *********
****************************           SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=S
YSPRINT,                      X                       RECFM=FBA,LRECL=133
                                       SYSOUT   DCB   DSORG=PS,MACRF=PM,DDNAME=S
YSOU  T,                        X                       RECFM=FB,LRECL=80
                                         SYSIN    DCB   DSORG=PS,MACRF=GM,DDNAME
=SYSIN,EODAD=RCEOF,             X                       RECFM=FB,LRECL=80
                                                    LTORG
                                           RESOURCE CSECT
                                           *************************************
********************************             *             REGISTER EQUATES
                                 *           ***********************************
**********************************           R0       EQU   0
                                             R1         EQU   1
                                               R2       EQU   2
                                               R3       EQU   3
                                               R4       EQU   4 
                                                 R5       EQU   5
                                                 R6       EQU   6
                                                             \R7       EQU   7
                                                               R8       EQU   8
                                                               R9       EQU   9
                                                               R  10      EQU
10                                                               R11      EQU
11                                                               R12      EQU
12                                                               R13      EQU
  13                                                               R14      EQU
  14                                                               R15      EQU
  15                                                               *************
**************  ********************************************         * THE TWO F
OLLOWING DSECTS DESCRIBE THE CONTENT OF AN IEWBUFF         *         * EXTERNAL
SYMBOL DICTIONARY (ESD) BUFFER:                            *         *    ESDHEA
DR DESCRIBES THE BUFFER HEADE  R.                            *         *    ESDE
NTRY DESCRIBES EACH ESD ENTRY THAT FOLLOWS THE HEADER.       *         *********
**************************************************************         ESDHEADR
DSECT ,    DESCRIBE THE IEWBUFF ESD BUFFER H  EADER              01-IEWBUESDHBUF
I DS    CL8  BUFFER EYECATCHER.                                  02-00073ESDHBUF
L DS    F    TOTAL BUFFER LENGTH INCLUDING THIS                  02-00074ESDHVER
S DS    AL1  VERSION OF BUFFER.                                    02-00077
    DS    AL3  RESERVED. MUST BE ZERO.                             02-00078ESDHE
NTL DS    F    LENGTH OF EACH BUFFER ENTRY.                        02-00079ESDHE
NTC DS    F    NUMBER ESDENTRY ELEMENTS CONTAINED IN THIS BUFFER   02-0008  0ESD
HNAMO DS    F    OFFSET OF NAME IN NAMES LIST AREA.                  02-00081ESD
HSTRP DS    F    ADDRESS OF BINDER NAMES LIST AREA.                  02-00082ESD
HEND  DS    0F   BEGINNING OF 1ST BUFFER ENTRY.                      02-00083*
                                                                               E
SDENTRY DSECT ,    DESCRIBE ESDENTRY. OCCURS ESDHENTC TIMES            01-IEWBUE
SDTYPE  DS    CL2  TYPE OF ESD ENTRY.                                  01-IEWBUE
SDTYPEQ DS    CL2  ESD R  ECORD TYPE QUALIFIER                           01-IEWB
UESDNAMES DS    CL1  NAME SPACE OF SYMBOL                                01-IEWB
UESDSCOPE DS    CL1  SCOPE OF THE SYMBOL                                 01-IEWB
UESDNAME  DS    0CL6 SYMBOL REPRESENTED   BY ESD RECORD                    01-IE
WBUESDNAMEC DS    H      LENGTH OF THE NAME.                               01-IE
WBUESDNAMEP DS    A      POINTS TO THE NAME OF THE SYMBOL (BLANK = $PRIV)  01-IE
WBUESDSYMAT DS    BL1  SYMBOL ATTRIBUTE FLAGS                                01-
IEWBUESDSTRNG EQU   X'80'  ON=STRONG REFERENCE OR DEFINITION                 01-
IEWBUESDRNMBL EQU   X'40'  ON=THIS SYMBOL IS MAPPED,NOT RENAMED              01-
IEWBUESDDESCL EQU   X'20'  ON=SYMBOL DEFINES OR REFERENCES A LINKAGE + BLOCK   0
1-IEWBUESDMNGLD EQU   X'10'  ON=NAME MAY BE MANGLED
 01-IEWBUESDXPLNK EQU   X'08'  ON=USES XPLINK LINKAGE CONVENTIONS
 01-IEWBU         DS    CL1
 01-IEWBUESDRESCS DS    0CL6 NAME OF OWNING OR CONTAINING SECTION
 0  1-IEWBUESDRESCL DS    H       LENGTH OF THE RESIDENT SECTION NAME
   01-IEWBUESDRESCP DS    A       POINTER TO NAME OF SECTION WHERE THIS SPEC. OF
   01-IEWBU*                        THE SYMBOL RESIDES. FOR LD, PR.
           ESDLEN  G  DS    F    LENGTH OF DEFINED ELEMENT
     01-IEWBUESDALIGN DS    XL1  ALIGNMENT SPECIFICATION FOR SD, PR
     01-IEWBUESDUSBLT DS    XL1  REUSABILITY OF SD
     01-IEWBUESDAMODE DS    XL1    ADDRESSING MODE OF SD
       01-IEWBUESDRMODE DS    XL1  RMODE OF SD
       01-IEWBUESDRECFM DS    H    RECORD FORMAT FOR CLASS
       01-IEWBUESDLOADF DS    BL1  LOAD ATTRIBU  TES
         01-IEWBUESDRO    EQU   X'80'   READ-ONLY
         01-IEWBUESDNL    EQU   X'40'   DO NOT LOAD WITH MODULE
         01-IEWBUESDMOVE  EQU   X'20'   MOVEABLE
           01-IEWBUESDSHR   EQU   X'10'   SHAREABLE
           01-IEWBUESDDEFER EQU   X'08'   DEFERRED LOAD
           01-IEWBUESDBINDF DS    BL1  BIND ATTRIBUTES
             01-IEWBUESDGEND  EQU   X'80'   BINDER-GENERATED
             01-IEWBUESDNOCLS EQU   X'40'   NO CLASS DATA AVAILABLE
             01-IEWBUESDVL    EQU   X'20'   VARIABLE LENGTH RECORDS
               01-IEWBUESDDESCD EQU   X'10'   DESCRIPTIVE DATA
               01-IEWBUESDINIT  EQU   X'08'   HAS PART INITIALIZERS
               01-IEWBUESDFILLX EQU   X'04'   ILL HAS BEEN SET
               01-IEWBUESDP  ADST EQU   X'02'   CLASS HAS PADDING AT START
                 01-IEWBUESDBINDC DS    BL1  TYPE OF PROGRAM CODE DESCRIBED BY S
YMBOL            01-IEWBUESDMETH  EQU   X'30'   BINDING METHOD
                 01-IEWBU*                         '00'B = CATENATE
                           *                        '01'B = MERGE
                           *                        '1-'B = RESERVED
                                       \ESDTXTTY EQU   X'0F'   TEXT TYPE
                                 01-IEWBU*                        '0000'B = UNSP
ECIFIED                                  *                        '0001'B = INST
RUCTIONS                                 *                          '0010'B = DA
TA                                         *                        '0011'B = TR
ANSLATOR DEFN                                       DS    XL1
                                   01-IEWBUESDXATCL DS      H    LENGTH OF XATTR
 CLASS NAME                          01-IEWBUESDXATCP DS    A    PTR TO EXTENDED
 ATTRIBUTES CLASS NAME               01-IEWBUESDXATOF DS    F    EXTENDED ATTRIB
UTES OFFSET                          01-IEWBUESDSEGMN DS    H    OVERLAY   SEGME
NT NUMBER OF SECTION                   01-IEWBUESDREGN  DS    H    OVERLAY REGIO
N NUMBER OF SECTION                    01-IEWBUESDSIGN  DS    CL8  INTERFACE SIG
NATURE                                 01-IEWBUESDAUTOC DS    BL1  AUTOCALL SPEC
. APPLI  ES TO REFERENCES                01-IEWBUESDNVRCL EQU   X'80'      NEVER
CALL WAS SPECIFIED                       01-IEWBUESDMINOR EQU   X'40'      AUTOC
ALLED FROM LPA                           01-IEWBUESDSTAT  DS    BL1  STATUS
                                           01-IEWBUESDRESLV EQU   X'80'      SYM
BOL IS RESOLVED                            01-IEWBUESDACPRC EQU   X'40'      PRO
CESSED BY AUTOCALL                         01-IEWBUESDINCLD EQU   X'20'      INC
LUDE ATTEMPTED                               01-IEWBUESDNOTFD EQU   X'10'      M
EMBER NOT FOUND                              01-IEWBUESDEXTRN EQU   X'08'      R
ESOLVED OUTSIDE MODULE                       01-IEWBUESDNOCAL EQU   X'04'      N
OCALL/NEVERCALL                              01-IEWB  UESDNOREF EQU   X'02'
 NO STRONG REFERENCES                          01-IEWBUESDLIBRY EQU   X'01'
 SPECIAL CALL LIBRARY REQUESTED                01-IEWBUESDTGTL  DS    H    LENGT
H OF THE TARGET.                               01-IEWBUESDTGTP  DS      A    POI
NTS TO NAME OF SECTION WHERE SYMBOL RESIDES. FOR 01-IEWBU*
EXTERNAL REFERENCES.                                              DS    H
                                                 01-IEWBUESDCNTCL DS    H    LEN
GT  H OF THE CLASS                                 01-IEWBUESDCNTCP DS    A    P
OINTS TO NAME OF CONTAINING CLASS                  01-IEWBUESDELOFF DS    F    O
FFSET WITHIN THE CLASS ELEMENT                     01-IEWBUESDCLOFF DS    F    O
FFSET WITHIN THE   CLASS SEGMENT                     01-IEWBU         DS    H
                                                     01-IEWBUESDADAL  DS    H
 ASSOCIATED DATA LENG                                01-IEWBUESDADAP  DS    A
 POINTS TO ASSOCIATED DATA                             01-IEWBU         DS    F
                                                       01-IEWBUESDPRTY  DS    F
   BINDING SEQUENCE                                    01-IEWBUESDNTEND DS    0F
                                               +         01-IEWBU***************
*********************************************  ***********         * THE TWO FOL
LOWING DSECTS DESCRIBE THE CONTENT OF AN IEWBUFF NAME    *         * BUFFER:
                                                         *         *    BNLHEADR
 DESCRIBES THE BUFFER HEADER.                            *           *    BNLENT
RY DESCRIBES EACH ENTRY THAT FOLLOWS THE HEADER.           *         ***********
************************************************************         BNLHEADR DS
ECT ,    DESCRIBES THE HEADER FOR THE IEWBUFF NAME BUFFER    01-IEWBUBNLHBU  FI
DS    CL8  BUFFER EYECATCHER.                                  02-00073BNLHBUFL
DS    F    TOTAL BUFFER LENGTH, INCLUDING THIS                 02-00074BNLHVER
DS    AL1  VERSION OF BUFFER.                                  02-00077
DS    AL3                                                        02-00078BNLHENT
L DS    F    LENGTH OF EACH BUFFER ENTRY.                        02-00079BNLHENT
C DS    F    NUMBER BNLENTRY ELEMENTS CONTAINED IN THIS BUFFER   02-00080HNAMO D
S    F    OFFSET OF NAME   IN NAMES LIST AREA.                     02-00081BNLHS
TRP DS    F    ADDRESS OF BINDER NAMES LIST AREA.                  02-00082BNLHE
ND  DS    0F   BEGINNING OF 1ST BUFFER ENTRY.                      02-00083*
                                                                     02-00121BNL
ENTRY DSECT ,    DESCRIBES NAME BUFFER ENTRY. OCCURS BNLHENTC TIMES  01-IEWBUBNL
CLSL  DS    F    CLASS LENGTH (FOR CLASS NAMES)                      01-IEWBUBNL
BINDF DS    XL1  FLAG BITS                                             01-IEWBUB
NLBFGEN EQU   X'80'  GENERATED BY BINDER                               01-IEWBUB
NLBFEMP EQU   X'40'  NO DATA PRESENT                                   01-IEWBUB
NLBFVL  EQU   X'20'  VARYING LENGTH RECORDS                              01-IEWB
UBNLBFDES EQU   X'10'  DESCRIPTIVE DATA (NON-TEXT)                       01-IEWB
UBNLBFINI EQU   X'08'  CLASS HAS INITIAL DATA                            01-IEWB
UBNLBFFIL EQU   X'04'  FILL CHARACTER SPECIFIED                          01-IEWB
UBNLB  FERR EQU   X'01'  CLASS VALIDATION ERROR                            01-IE
WBUBNLPAD1  DS    XL1  1 BYTE PAD FOR BOUNDARY ALIGNMENT                   01-IE
WBUBNLNAMEL DS    H    NBR SIGNIFICANT CHARS IN CLASS/SECTION NAME         01-IE
WBUBNLNAMEP DS    AL 4  POINTER TO CLASS OR SECTION NAME                    01-
IEWBUBNLELEMC DS    F    NUMBER ELEMENTS IN CLASS OR SECT                    01-
IEWBUBNLEND   DS    0F                                                       01-
IEWBU            \*************************************************************
**********         * THE TWO FOLLOWING DSECTS DESCRIBE THE CONTENT OF AN IEWBUFF
         *         * RELOCATION DICTIONARY (RLD) BUFFER:
         *         *      RLDHEADR DESCRIBES THE BUFFER HEADER.
           *         *    RLDENTRY DESCRIBES EACH RLD ENTRY THAT FOLLOWS THE HEA
DER.       *         ***********************************************************
************         RLDHEADR DSECT   ,    DESCRIBE IEWBUFF RLD BUFFER HEADER
               01-IEWBURLDHBUFI DS    CL8  BUFFER EYECATCHER.
               02-00073RLDHBUFL DS    F    TOTAL BUFFER LENGTH, INCLUDING THIS
               02-00074RLDHVER  DS    AL1  VERSION   OF BUFFER.
                 02-00077         DS    XL3
                 02-00078RLDHENTL DS    F    LENGTH OF EACH BUFFER ENTRY.
                 02-00079RLDHENTC DS    F    NUMBER RLDENTRY ELEM  ENTS CONTAINE
D IN THIS BUFFER   02-00080RLDHNAMP DS    F    OFFSET OF NAME IN NAMES LIST AREA
.                  02-00081RLDHSTRP DS    F    ADDRESS OF BINDER NAMES LIST AREA
.                  02-00082RLDHEND  DS    0F   BEGINNING OF 1ST BUFFER ENTRY.
                     02-00083*
                             RLDENTRY DSECT ,    DESCRIBE RLD BUFFER ENTRY. OCCU
RS RLDHENTC TIMES    01-IEWBURLDTYPE  DS    XL1  ADCON TYPE.
                       01-IEWBURLDSTAT  DS    XL1  ADCON RELOCATION STATUS.
                       01-IEWBURLDRESNL DS    H    LENGTH OF THE RESIDENT.
                       01-IEWBURLDRESNP DS    A    POINTS TO NAME OF SECTION WHE
RE ADCON RESIDES       01-IEWB  URLDADCNL DS    H    LENGTH OF THE ADCON.
                         01-IEWBURLDRESCL DS    H    LENGTH OF THE RESIDENT CLAS
S NAME                   01-IEWBURLDRESCP DS    A    POINTS TO NAME OF CLASS WHE
RE ADCON RESIDES         01-IEWBURLDRESOF DS      F    OFFSET OF ADDRESS CONSTAN
T IN ELEMENT OR PART:      01-IEWBU*                      RLDRESPL=0: ELEMENT; R
LDRESPL>0: PART                    RLDCLOF  DS    F    OFFSET OF THE ADDRESS WIT
HIN CLASS SEGMENT          01-IEWBURLDADCNB DS    XL1  ADCON   BOUNDARY SPECIFIC
ATION.                       01-IEWBURLDBNDAT DS    BL1  ADCON BOUNDARY STATUS
                             01-IEWBURLDDIR   EQU   X'80'   RELOCATION SIGN: '0'
 = POS; '1' = NEG            01-IEWBURLDHOBST EQU   X'40'   SET HIGH ORDER   BIT
 FROM AMODE OF TARGET          01-IEWBURLDINTXT EQU   X'20'   INTERNAL/EXTERNAL:
 '0' = INT; '1' = EXT          01-IEWBURLDHOBCH EQU   X'10'   HIGH ORDER BIT CHA
NGED BY BINDER                 01-IEWBURLDPARTR EQU   X'08'   ADCON LOCATED IN P
ART                              01-IEWBURLDXATCL DS    H    LENGTH OF EXTENDED
ATTR CLASS NAME                  01-IEWBURLDXATCP DS    A    POINTER TO EXTENDED
 ATTRIBUTES CLASS NAME           01-IEWBURLDXATOF DS    F    OFFSET OF EXTENDED
ATTRIBUTES IN THE ELEMENT+         01-IEWBURLDNAMSP DS    XL1  NAME SPACE OF REF
ERENCE                               01-IEWBU         DS    XL1
                                     01-IEWBURLDTGTNL DS    H    LENGTH OF THE T
ARGET NAME                           01-IEWBURLDTGTNP DS    A    POINTER TO NAME
 OF SYMBOL TO WHICH ADCON POINTS     0  1-IEWBU         DS    XL2
                                       01-IEWBURLDRESPL DS    H    RESIDENT PART
 LENGTH                                01-IEWBURLDRESPP DS    A    RESIDENT PART
 POINTER                               01-IEWBURLDEND     DS    0F
                                         01-IEWBU*******************************
****************************************         * THE TWO FOLLOWING DSECT DESCR
IBES THE CONTENT OF AN IEWBUFF         *         * TEXT BUFFER
                                         *         *****************************
******************************************         TXTHEADR DSECT ,    DESCRIBE
THE IEWBUFF TEXT BUFFER HEADER             01-IEWBUTXTHBUFI DS    CL8  BUFFER EY
ECA  TCHER.                                  02-00073TXTHBUFL DS    F    TOTAL B
UFFER LENGTH, INCLUDING THIS                 02-00074TXTHVER  DS    AL1  VERSION
 OF BUFFER.                                  02-00077         DS    AL3
                                               02-00078TXTHENTL DS    F    LENGT
H OF EACH BUFFER ENTRY.                        02-00079TXTHENTC DS    F    NUMBE
R TEXT BYTES CONTAINED IN THIS BUFFER          02-00080TXTHNAMO DS    F    OFFSE
T OF NAME IN NAMES LIST AREA.                    02-00081TXTHSTRP DS    F    ADD
RESS OF BINDER NAMES LIST AREA.                  02-00082TXTHEND  DS    0F   BEG
INNING OF TEXT AREA                              02-00083*
                                                           TXTENTRY DSECT ,    D
ESCRIBES TEXT AREA                                         TXTBYTE  DS    0C   T
EXT BYTE. OCCURS TXTHENTC TIMES                    02-00083*********************
**************************************************         * TH  E TWO FOLLOWING
 DSECTS DESCRIBE THE CONTENT OF AN IEWBUFF IDRL    *         * BUFFER:
                                                   *         *    IDLHEADR DESCR
IBES THE BUFFER HEADER.                            *         *    IDLENTRY DES
CRIBES EACH ENTRY THAT FOLLOWS THE HEADER.           *         *****************
******************************************************         IDLHEADR DSECT ,
   DESCRIBE THE IEWBUFF IDRL BUFFER HEADER             01-IEWBU            \IDL
HBUFI DS    CL8  BUFFER EYECATCHER.                                  02-00073IDL
HBUFL DS    F    TOTAL BUFFER LENGTH, INCLUDING THIS                 02-00074IDL
HVER  DS    AL1  VERSION OF BUFFER.                                  02-00077
        DS    AL3                                                      02-00078I
DLHENTL DS    F    LENGTH OF EACH BUFFER ENTRY.                        02-00079I
DLHENTC DS    F    NUMBER IDLENTRY ELEMENTS CONTAINED IN THIS BUFFER   02-00080I
DLHNAMO DS      F    OFFSET OF NAME IN NAMES LIST AREA.                  02-0008
1IDLHSTRP DS    F    ADDRESS OF BINDER NAMES LIST AREA.                  02-0008
2IDLHEND  DS    0F   BEGINNING OF 1ST BUFFER ENTRY.                      02-0008
3*                                                                         02-00
121IDLENTRY DSECT ,    DESCRIBE IDRLENTRY. OCCURS IDLHENTC TIMES           01-IE
WBUIDLPIDID DS    CL10 PROCESSOR IDENTIFICATION (PID ORDER NUMBER)         01-IE
WBUIDLVER   DS    CL2  PROCESSOR VERSION  N  UMBER.                          01-
IEWBUIDLMODLV DS    CL2  PROCESSOR MODIFICATION LEVEL.                       01-
IEWBUIDLDATPR DS    CL7  DATE OF COMPILATION OR ASSEMBLY (YYYYDDD)           01-
IEWBU         DS    XL1                                                        0
1-IEWBUIDLRESNL DS    H    LENGTH OF THE RESIDENT.                             0
1-IEWBUIDLRESNP DS    AL4  POINTS TO NAME OF SECTION TO WHICH THIS APPLIES     0
1-IEWBUIDLEND   DS    0F
 01-IEWBU***********************************************************************
         * THIS DSECT DESCRIBES AN ENTRY IN THE LABEL TABLE                    *
         * THE TABLE ADDRESSES ARE LOCATED AT LBLTBADR, LBLTBEND, AND CURRLABL *
           * IF THE LENGTH OF LBLENTRY CHANGES, CHANGE HOLDLABL, AS WELL.
 *         *********************************************************************
**         LBLDSECT DSECT ,                       DESCRIBES A LABEL TABLE ENTRY
           LBLENTRY DS      0CL16                   LABEL TABLE ENTRY
             LBLOFSET DS    F                           CSECT OFFSET TO THE LABE
L            LBLTYPE  DS    X                           ENTRY TYPE: 0C=DROP,10=U
SING         *                                              18=DATA START, 1C=DA
TA END         *                                            30=LABEL,40=ADCON,50
=VCON          LBLUREG  DS    X                           USING REGISTER
               LBLRLDLN DS    H                             LENGTH IF RLD ENTRY
ELSE 0           LBLLABEL DS    0CL8                        LABEL
                 LBLINITU DS    XL4                         INITIAL REG VALUE FO
R USING                   DS    XL4
                   *************************************************************
**********         * DESCRIBES AN ENTRY IN AN OP-CODE TABLE
         *         *************************************************************
***+ *******         OPCODES  DSECT ,                       DESCRIBES AN OP-CODE
   TABLE ENTRY         OPCENTRY DS    0XL12                   OP-CODE TABLE ENTR
Y                      OPCODE1  DS    XL1                        OP-CODE BYTE 1
                       OPCODE2  DS    XL1                        OP-CODE BYTE 2
OR ZERO                  OPCMNEM  DS    0CL5                       MNEMONIC -OR-
                         OPCTWO2  DS    CL1                          '2' FOR 2-B
YTE OP-CODES             *                                           X'00' IF NO
T AN OP-CODE             OPCSRC  H2 DS    AL4                          SRCH ADDR
ESS FOR 2-BYTE O-C         OPCFORMT DS    XL1                        INSTRUCTION
 FORMAT CODE               OPCFLAGS DS    XL1                        FLAGS: 40=F
LOATING POINT INST         *                                                  20
=PRIVILEGED                  OPCNDCOD DS    XL1                        CONDITION
 CODE TABLE LINE             OPCFLAG1 DS    XL1                        FLAG BYTE
                             OPCFLAG2 DS    XL1              K           FLAG BY
TE                             RESOURCE CSECT
                                        END
                                {                       \         TITLE '*** B
UILD ASSEMBLER SOURCE FROM A LOAD MODULE ***'              RESOURCE CSECT
                                                           RESOURCE AMODE 31
                                                           R  ESOURCE RMODE 24
                                                             *******************
**************************************************           * BUILDS AN ASSEMBL
ER LANGUAGE SOURCE PROGRAM FROM A LOAD MODULE IN *           * A PDS OR A P  DSE
. LOAD MODULE DATA IS OBTAINED USING THE READLMOD  *           * SUBROUTINE, WHI
CH USES THE IEWBUFF AND IEWBIND MACROS. INITIAL    *           * PROCESSING IS P
ERFORMED HERE INCLUDING OPENING FILES, GETTING     *           * STORAGE FOR TAB
LES AND WO  RK AREAS, PROCESSING THE PARM FIELD ON   *           * THE EXEC STAT
EMENT, PROCESSING CONTROL STATEMENTS, AND LOADING THE*           * TEXT FOR THE
CSECT TO BE DISASSEMBLED INTO MEMORY. WHEN INITIAL   *           * PROCESSING IS
 COMPLETE, THE REBUILD PR  OGRAM IS CALLED WITH THE    *           * STAGE SET T
O 1 FOR LABEL HANDLING, AND THEN A SECOND TIME WITH    *           * STAGE SET T
O 2 FOR FINAL DISASSEMBLY.                             *           *
                                                         *           * JCL DD ST
ATEMENTS ARE REQUIRED AS FOLLOWS:                        *           *   SYSIN:
   INPUT  RECFM=FB  LRECL=80   CONTROL STATEMENTS.       *           *   SYSPRIN
T: OUTPUT RECFM=FBA LRECL=133  PRINT LISTING.              *           *   SYSLI
B:   INPUT  PDS OR PDSE RECFM=U  LOAD MODULE TO DISASSEMBLE*           *   SYSOU
T:   OUTPUT RECFM=FB  LRECL=80   ASSEMBLER SOURCE PROGRAM  *           *
                                                           *             * CONTR
OL STATEMENTS ARE ENTERED FOR THE FOLLOWING PURPOSES:        *           *   1)
COMMENTS: AN ASTERISK IN COLUMN 1 IDENTIFIES COMMENTS        *           *   2)
MEMBER AND CSECT NAME RECORD: THIS CONTROL STATEMENT MUST BE *           *
THE F  IRST NON-COMMENT RECORD IN THE CONTROL FILE. IT MUST    *           *
  CONTAIN MEMBER NAME IN COL 1-8 AND CSECT NAME IN COL 10-17.  *           *   3
) DATA ONLY RECORD (OPTIONAL): IDENTIFIES AREAS WITHIN THE TEXT*           *
  THAT CONTAIN NO IN  STRUCTIONS, ONLY DATA. MULTIPLE DATA-ONLY  *           *
    RECORDS CAN BE ENTERED, IN ANY ORDER. FORMAT IS:             *           *
       COL 1-5 = 'DATA '                                         *           *
       COL 6-11 = OFFSET TO START O  F DATA-ONLY AREA              *           *
         COL 12   = BLANK                                          *           *
         COL 13-18 = OFFSET TO END OF DATA-ONLY AREA               *           *
   4) USING RECORD (OPTIONAL): PROVIDES INFORMATIO  N NEEDED TO      *
 *      TO CREATE USING AND DROP STATEMENTS. FORMAT IS:              *
 *         COL  1-6  = 'USING '                                      *
 *         COL  7-12 = HEX OFFSET TO WHERE THE USING STATEMENT WI+ LL  *
   *                     BE PLACED (IT WILL OCCUR BEFORE THIS O  FFSET). *
     *         COL  13   = BLANK                                         *
     *         COL 14-19 = HEX OFFSET TO WHERE THE DROP STATEMENT WILL   *
     *                     BE PLACED (IT WILL OCCUR BEFORE THIS OFFSET). *
       *                     IF BLANK, NO DROP WILL BE CREATED.            *
       *         COL  20   = BLANK                                         *
       *         COL  21   = REGISTER USED WITH THIS USING, 0-9 OR A-F     *
       *           COL  22   = BLANK                                         *
         *         COL 23-28 = INITIAL OFFSET VALUE IN THE USING REGISTER.   *
         *                                                                   *
         *   5) USER LABEL R  ECORD (OPTIONAL): DEFINE USER LABELS TO BE PLACED*
           *      ON STATEMENTS WITHIN THE PROGRAM. IF PROGRAM BASE REGISTERS  *
           *      ARE SET UP WITH USING CARDS, THESE WILL ALSO BE GENERATED AS *
           *      SYMBOLIC OPERANDS ON INST  RUCTIONS. FORMAT IS:
 *           *         COL  1-5   = LITERAL 'ULABL'
 *           *         COL   6    = BLANK
 *           *         COL  7-14  = LABEL NAME
   *           *         COL  15    : BLANK
   *           *         COL 16-21  : OFFSET TO LEFT END OF FIELD, IN HEX.
   *           *         COL  22    : BLANK
     *           *         COL 23-25  : LENGTH OF FIELD IN DECIMAL. 256 IS MAX.
     *           *
     *           * NOTE: THE BAS R9,TESTPRNT AT THE EOJ LABEL IS FOR TESTING ONL
Y    *             *       AND CAN BE COMMENTED OUT FOR NORMAL USE. IT PROVIDES
A      *           *       PRINTOUT OF THE LABEL TABLE THAT CAN BE HELPFUL WHEN
TESTING*           *       CHANGES.
       *           *
         *           * AUTHOR R THORNTON FEB 2002
         *           ***********************************************************
**********           *                
                       *********************************************************
************           *        SAVE REGISTERS, SET UP BASE REGS, CHAIN SAVE ARE
AS         *                       \*******************************************
**************************                    USING RESOURCE,R3,R4,R5,R6
                                              STM   R14,R12,12(R13)         SAVE
 CALLER'S REGS                                  LR    R3,R15                  SE
T UP BASE FIRST BASE REG                        LA    R4,4095(R3)             SE
T UP SECOND                                     LA    R4,1(R4)
  BASE REGISTER                                 LA      R5,4095(R4)
SET UP THIRD                                      LA    R5,1(R5)
    BASE REGISTER                                 LA    R6,4095(R5)
SET UP THIRD                                      LA    R6,1(R6)
      BASE REGISTER                                 LA    R15,MYSAVE
  POINT TO MY REGISTER SAVE AREA                    ST    R15,8(R13)
  SET LSA IN CALLER'S SAVE                          ST    R13,4(R15)
  S  ET HSA IN MY SAVE AREA                           LR    R13,R15
    SET UP SAVE AREA POINTER                          B     PARMS
    BRANCH AROUND CONSTANTS                           DC    CL8'RESOURCE'
    PROGRAM NAME I  DENTIFIER                           DC    CL8'&SYSDATE'
      ASSEMBLY DATE                                     DC    CL8'&SYSTIME'
      ASSEMBLY TIME                            MYSAVE   DS    18F
      MY REGISTER SAVE AREA                      *******************************
**************************************           * PROCESS THE PARM STATEMENT: D
EFAULT IS TO IGNORE ALL FLOATING     *           * POINT AND PRIVILEGED INSTRUCT
IONS. IF PARM CONTAINS 'FLTPT' THEN  *             * FLOATING POINT INSTRUCTIONS
 WILL BE INCLUDED AND/OR IF PARM       *           * CONTAINS 'SUPVR' THEN PRIVI
LEGED INSTRUCTIONS WILL BE INCLUDED.   *           *****************************
****************************************           PARMS    L       R2,0(R1)
            GET PARM FIELD ADDR                               CLC   0(2,R2),H0
            ANY PARM DATA?                                    BE    TBLMODS
            NO, CONTINUE                                      CLC   0(2,R2),H5
              VALID PARM LENGTH?                                BL    BADPARM
              NO                                                BH    PMCK11
              MAYBE, TEST MORE ...                              CLC   2(5,R2),FL
TPT             FLOATING POINT SPECIFIED?                         BNE   PM5CK2
                NO                                                NI    UNWANTED
,X'BF'          YES, TURN OFF '40' BIT                            B     TBLMODS
                CONTINUE                                   PM5CK2   CLC   2(5,R2
),SUPVR           SUPVR SPECIFIED?                                  BNE   BADPAR
M                 NO, ERROR                                         NI    UNWANT
ED,X'DF'          YES, TURN OFF '20' BIT   +                          B     TBLM
ODS                 CONTINUE                                   PMCK11   CLC   0(
2,R2),H11             VALID PARM LENGTH?                                BNE   BA
DPARM                 NO, ERROR                                         CLC   2(
5,R2),FLTPT           FLOATING POINT SPECIFIED?                           BNE
PM11CK2                 NO                                                NI
UNWANTED,X'BF'          YES, TURN OFF '40' BIT                            B
PM11CK3                 CONTINUE                                 PM11CK  2  CLC
  2(5,R2),=CL5'SUPVR'     SUPVR SPECIFIED?                                  BNE
  BADPARM                 NO, ERROR                                         NI
  UNWANTED,X'DF'          YES, TURN OFF '20' BIT                   PM11CK3  CLC
  2(5,  R2),8(R2)           BOTH PARMS SAME?                                  BE
    BADPARM                 YES, ERROR                                        CL
I   7(R2),C','              COMMA SEPARATES?                                  BN
E   BADPARM                   NO, ERROR
CLC   8(5,R2),FLTPT           FLOATING POINT SPECIFIED?
BNE   PM11CK4                 NO
NI    UNWANTED,X'BF'          YES, T  URN OFF '40' BIT
  B     TBLMODS                 CONTINUE                                 PM11CK4
  CLC   8(5,R2),SUPVR           SUPVR SPECIFIED?
  BNE   BADPARM                 NO, ERROR
    NI    UNWANTED,X'DF'          YES, TURN OFF '20' BIT
    B     TBLMODS                 CONTINUE                                 BADPA
RM  WTO   'RESOURCE: INVALID PARM ON EXEC STATEMENT',ROUTCDE=11
      ABEND 111,DUMP                                                         ***
******************************************************************           * T
HIS ROUTINE MODIFIES THE OP-CODE TABLES TO ELIMINATE ENTRIES FOR *           * U
N  WANTED FLOATING POINT AND/OR PRIVILEGED INSTRUCTIONS.           *           *
********************************************************************           T
BLMODS  CLI   UNWANTED,0              FLOATING POINT/SUPVR WANTED?
        BE    GE TSTOR                 YES, BOTH. NO MOD NEEDED
 TSSTART  LA    R11,TABLTABL-4          POINT TO FIRST TABLE ADDRESS -4
          LA    R12,OPCODTBL            POINT TO FIRST TABLE
             \TSNEXT   SR    R10,R10                 CLEAR FOR INSERT
                        IC    R10,UNWANTED            PICK UP UNWANTED MASK
               TSCHKEND CLC   0(4,R12),HEXFFS         END OF TABLE?
                          BE    TSSTEP                  YES, GO TO NEXT
                          USING OPCODES,R12
                          EX    R10,TSCHKWNT            THIS INSTRUCTION WANTED?
                          BZ      TSENTSTP                YES
                            MVC   OPCENTRY,XZROS          CLEAR THE ENTRY
                   TSENTSTP LA    R12,L'OPCENTRY(R12)     STEP TO NEXT TABLE ENT
RY                          B     TSCHKEND                  CONTINUE
                     TSSTEP   LA    R11,4(R11)              STEP TO NEXT TABLE A
DDRESS                        CLC   0(4,R11),HEXFFS         END OF ADDRESS TABLE
?                             BE    TBLCMPRS                Y  ES, GO COMPRESS T
ABLES                           L     R12,0(R11)              POINT TO NEXT TABL
E                               B     TSCHKEND                GO MODIFY NEXT TAB
LE                     TSCHKWNT TM    OPCFLAGS,0              EXECUTED INSTR  UC
TION                              DROP  R12
                         *******************************************************
**************           * COMPRESS THE OP-CODE TABLES AFTER CLEARING ENTRIES FO
R UNWANTED     *           * INSTRUCTIONS. THE GENERAL INSTRUCTION TABLE, OPCODT
BL, IS NOT     *           * COMPRESSED, AS IT CONTAINS 256 ENTRIES, AND IS ACCE
SSED DIRECTLY  *           * USING THE FIRST BYTE OF OP-CODE AS AN INDEX.
               *             ***************************************************
******************           TBLCMPRS LA    R10,TABLTABL            POINT TO FIR
ST TABLE ADDRESS             TCNEX10  CLC   0(4,R10),HEXFFS         END OF ADDRE
SS TABLE?                             BE      GETSTOR                 YES, ALL T
HRU HERE                                L     R11,0(R10)              POINT TO O
P-CODE TABLE                            USING OPCODES,R11
                               TCNEX11  CLC   0(4,R11),H  EXFFS         END OF O
P-CODE TABLE?                             BE    TCSTEP10                YES, STE
P TO NEXT TABLE                           CLI   OPCMNEM,0               THIS A W
ANTED INSTRUCTION?                        BNE   TCSTEP11                  YES
                                            LA    R12,L'OPCENTRY(R11)     NO, ST
EP TO NEXT ENTRY                   TCNEX12  CLC   0(4,R12),HEXFFS         END OF
 OP-CODE TABLE?                             BNE   TCCHKWNT                NO, CH
ECK FO  R WANTED INSTRUCTION                  MVC   OPCENTRY(4),HEXFFS      YES,
 SET TABLE END                                B     TCSTEP10                GO T
O NEXT TABLE                         TCCHKWNT CLI   OPCMNEM-OPCENTRY(R12),0 THIS
 A WANTED INSTRUCTION+ ?                        BE    TCSTEP12                NO
, KEEP GOING                                      MVC   0(L'OPCENTRY,R11),0(R12)
 MOVE WANTED ENTRY BACK                           XC    1(L'OPCENTRY-1,R12),1(R1
2) CLEAR THE ENTRY MOVED                          B     TCSTEP11
CONTINUE IN TABLE                          TCSTEP12 LA    R12,L'OPCENTRY(R12)
  YES, STEP TO NEXT ENTRY                           B     TCNEX12
  CONTINUE COMPRESSION                     TCSTEP11 LA    R11,L'OPCENTRY(R11)
  STEP TO NEXT TABLE ENTRY                            B     TCNEX11
    CONTINUE                                 TCSTEP10 LA    R10,4(R10)
    STEP TO NEXT TABLE ADDRESS                        B     TCNEX10
    GO COMPRESS NEXT TABLE                            DROP  R11
                                               *********************************
************************************           * PREPARE REGS BEFORE ISSUING STO
RAGE OBTAIN                        *           ********************************
 *************************************           GETSTOR  ST    R10,LBLTBR10
         SAVE R10 BEFORE OBTAIN                           ST    R11,LBLTBR11
         SAVE R11 BEFORE OBTAIN                           L     R10,LBLTBXXX
         MAX L  ENGTH IN R10                                L     R11,LBLTBEND
           MIN LENGTH IN R11                       *****************************
****************************************           * GET STORAGE FOR TABLES AND
OPEN FILES FOR PROCESSING                *           ***************************
******************************************           XETSTOR  STORAGE OBTAIN,LOC
=ANY,RTCD=MYRC,COND=NO,CHECKZERO=YES,       X                       LENGTH=((R10
),(R11))                                                        ST    R0,LBLTBZZ
Z             SAVE THE LENGTH OF GOTTEN                         ST    R1,LBLTBYY
Y             SAVE THE GOTTEN ADDRESS                           ST    R1,LBLTBAD
R             SAVE THE GOTTEN ADDRESS                             A     R1,LBLTB
END             SAVE THE                                          ST    R1,LBLTB
END                  TABLE END ADDRESS                   ***********************
**********************************************           * RESTORE REGS AF TER
ISSUING STORAGE OBTAIN                         *           *********************
************************************************                    L     R10,LB
LTBR10             RESTORE R10                                         \
  L     R11,LBLTBR11             RESTORE R11
  OPEN  (SYSPRINT,OUTPUT,SYSOUT,OUTPUT,SYSIN) OPEN FILES                 *******
**************************************************************           *   REA
D CONTROL CARD FILE AND PROCESS THE STATEMENTS                 *           *****
****************************************************************           IIREA
D   BAS   R9,READCNTL             READ NEXT CONTROL RECORD
    CLI     MORECNTL,C'Y'           GOT A CONTROL RECORD?
      BE    IIGOT1                  YES
      CLI   GOTMCREC,C'Y'           NO, GOT A MEMBER/CSECT CARD?
      BE    EXEC                      YES, EXIT
        MVC   PRT(36),=CL36'*** NO CONTROL RECORDS IN SYSIN FILE'
        BAS   R9,PRINT                PRINT ERROR MESSAGE
        WTO   '*** NO CONTROL RECORDS I  N SYSIN FILE',ROUTCDE=11
          MVC   RETCODE+2(2),H8         SET RETURN CODE = 8
          ABEND 111,DUMP                TERMINATE IN ERROR
 IIGOT1   CLI   GOTMCREC,C'Y'           ALREADY HAD ME  MBER/CSECT?
            BE    IIGOT2                  YES
            BAS   R9,MEMBCSEC             NO, GO PROCESS MEMBER/CSECT
            B     IIREAD                  GO READ NEXT CONTROL RECORD
     IIGOT2   CLC   CNTLCARD(5),=CL5'DATA ' THIS A DATA-ONLY RECORD?
              BNE   IIGOT3                  NO
              BAS   R9,DATAONLY             YES, GO PROCESS IT
                B     IIREAD                  CONTINUE
       IIGOT3   CLC   CNTLCARD(6),=CL6'ULABL ' THIS A USER LABEL CARD?
                BNE   IIGOT4                  NO
                BAS     R9,ULABEL               YES, GO PROCESS ULABL
                  B     IIREAD                  CONTINUE
         IIGOT4   CLC   CNTLCARD(6),=CL6'USING ' THIS A USING RECORD?
                  BNE   IIBADCRD                  NO
                    BAS   R9,USINGCRD             YES, GO PROCESS USING
                    B     IIREAD                  CONTINUE
           IIBADCRD MVC   PRT(39),=CL39'INVALID C  ONTROL RECORD ABOVE IS DROPPE
D'                    BAS   R9,PRINT                PRINT MESSAGE
                      MVC   RETCODE+2(2),H8         SET RETURN CODE = 8
                      WTO   'DROPPED AN INVALID CONTROL RECORD',  ROUTCDE=11
                        B     IIREAD                  CONTINUE
               *****************************************************************
****           * INITIALIZATION FINISHED. LOAD THE DISASSEMBLY ROUTINE. CALL ON+
 CE  *           * FOR LABEL TABLE BUILD, THEN A SECOND TIME FOR THE FINAL OU  T
PUT    *           *************************************************************
********           EXEC     LOAD  EP=REBUILD              GET THE DISASSEMBLY MO
DULE                        ST    R0,REBLDEP              SAVE ENTRY POINT ADDRE
SS                            LA    R1,REBLDPRM             POINT TO PARAMETERS
                              L     R15,REBLDEP             POINT TO DISASSEMBLY
 MODULE                       BASR  R14,R15                 PERFORM LABEL TABLE
BUILD                           MVI   STAGE,2                 SET STAGE 2 INDICA
TOR                             LA    R1,REBLDPRM             POINT TO PARAMETER
S                               L     R15,REBLDEP             POINT TO DISASSEMB
LY MODULE                       BASR  R14,  R15                 PERFORM DISASSEM
BLY                      *******************************************************
**************           *        TERMINATE PROCESSING
             *           ********************************  *********************
****************           EOJ      EQU   *
                                    BAS   R9,TESTPRNT             ????TESTING DI
SPLAYS?????                         CLOSE (SYSPRINT,,SYSIN,,SYSOUT) CLOS  E FILE
S                                     L     R13,4(R13)              POINT TO CAL
LER'S SAVE AREA                       L     R14,12(R13)             RESTORE RETU
RN REG: R14                           L     R15,RETCODE             SET RETURN C
ODE                                     LM    R0,R12,20(R13)          RESTORE CA
LLER'S REGS 0-12                        BR    R14                     RETURN
                               *************************************************
********************             *        READ NEXT CONTROL RECORD
                     *           ***********************************************
**********************           READCNTL ST    R9,RC9                  SAVE RET
URN ADDRESS                      RCGE  T    GET   SYSIN,CNTLCARD          READ C
ONTROL CARD                                 MVC   PRT(21),=CL21'CONTROL RECORD R
EAD: '                                      MVC   PRT+21(59),CNTLCARD     MOVE C
ONTROL RECORD                               BAS   R9 ,PRINT                PRIN
T IT                                          CLI   CNTLCARD,C'*'           COMM
ENT?                                          BE    RCGET                   YES
                                                 \RCXIT    L     R9,RC9
          GET RETURN ADDRESS                                BR    R9
          EXIT                                     RCEOF    MVI   MORECNTL,C'N'
          SET EOF INDICATOR                                   B     RCXIT
            AND EXIT                                 RC9      DC    A(0)
            RETURN ADDRESS                           ***************************
******************************************           *        PROCE  SS MEMBER/C
SECT CONTROL RECORD                        *           *************************
********************************************           MEMBCSEC ST    R9,MC9
              SAVE RETURN ADDRESS                               XC    CURRINFO(C
UR  REND-CURRINFO),CURRINFO CLEAR CURRENT INFO                    XC    TEXTENDA
,TEXTENDA       SAVE TEXT LENGTH                                  MVC   PRMEMBER
,CCMEMBER       MOVE REQUESTED MEMBER NAME                        MVC   CURRMEMB
,CCMEMBER       S  AVE REQUESTED MEMBER NAME                        MVC   PRMCSE
CT,CCCSECT        MOVE REQUESTED CSECT NAME                         MVC   CURRCS
CT,CCCSECT        SAVE REQUESTED CSECT NAME                         MVC   PRT(29
),=CL29'CONTROL CARD READ HAS ME  MBER='                              MVC   PRT+
29(8),CCMEMBER      MOVE MEMBER NAME                                  MVC   PRT+
39(6),=CL6'CSECT='                                                    MVC   PRT+
45(8),CCCSECT       MOVE CSECT NAME        DRK   JUN07                  BAS   R9
,PRINT                PRINT CONTROL CARD INFO                           L     R1
,LBLTBADR             POINT TO 1ST LABEL TABLE ENTRY                    ST    R1
,CURRLABL             SET CURRENT LABEL ADDRESS                           MVI
0(R1),X'FF'             SET TABLE END ADDRESS                             BAS
R9,GETESD               PROCESS ESD'S FOR THE CSECT                       BAS
R9,GETRLD               PROCESS RLD'S FOR THE CSECT                       BAS
  R9,GETTEXT              GET TEXT FOR THE CSECT                            MVI
  GOTMCREC,C'Y'           INDICATE MEMBER/CSECT REC DONE           MCXIT    L
  R9,MC9                  GET RETURN ADDRESS                                BR
  R9                        EXIT                                     MC9      DC
    A(0)                    RETURN ADDRESS                           ***********
**********************************************************           * PROCESS D
ATA-ONLY CONTROL RECORDS: V  ALIDATE THE START AND END     *           * OFFSETS
, THEN BUILD LABEL TABLE ENTRIES FOR THE START OF THE      *           * AREA AN
D FOR THE END OF THE AREA.                                 *           *********
******************************************  ******************           DATAONL
Y ST    R9,DO9                  SAVE RETURN ADDRESS
  TRT   CNTLCARD+5(6),CHECKHEX  IS START OFFSET VALID HEX?
  BNZ   DOBADCRD                NO, ERROR                +
    TRT   CNTLCARD+12(6),CHECKHEX IS END OFFSET VALID H  EX?
      BNZ   DOBADCRD                NO, ERROR
      L     R1,CURRLABL             POINT TO CURRENT LABEL AREA
      USING LBLDSECT,R1
        TR    CNTLCARD+5(6),TRHEX     MAKE C1=FA, C2=FB, ... ETC
        PACK  LBLOFSET(5),CNTLCARD+5(7) PACK TO MAKE HEX
        MVI   LBLOFSET+4,C' '         CLEAR TRASH
          MVC   HOLDSTRT,LBLOFSET       SAVE START OFFSET
          MVI   LBLTYPE,X'18'           TYPE IS DATA-ONLY START
          XC    LBLUREG(11),LBLUREG     REST IS N/A
          BAS   R9,A  DDLABEL             GO PUT IT IN THE TABLE
            L     R1,CURRLABL             POINT TO CURRENT LABEL AREA
            TR    CNTLCARD+12(6),TRHEX    MAKE C1=FA, C2=FB, ... ETC
            PACK  LBLOFSET(5),CNTLC  ARD+12(7) PACK TO MAKE HEX
              MVI   LBLOFSET+4,C' '         CLEAR TRASH
              CLC   HOLDSTRT,LBLOFSET       IS START LESS THAN END?
              BNL   DOBADCRD                NO, ER  ROR
                MVI   LBLTYPE,X'1C'           TYPE IS DATA-ONLY END
                XC    LBLUREG(11),LBLUREG     REST IS N/A
                BAS   R9,ADDLABEL             GO PUT IT IN THE TA  BLE
                  B     DOXIT                   AND EXIT
                  DROP  R1
         DOBADCRD MVC   PRT(41),=CL41'INVALID DATA-ONLY RECORD ABOVE IS DROPPED'
                    BAS   R9,PRINT                PRINT MESSAGE
                    MVC   RETCODE+2(2),H8         SET RETURN CODE = 8
                    WTO   'DROPPED AN INVALID DATA-ONLY CONTROL RECORD',ROUTCDE=
11         DOXI  T    L     R9,DO9                  GET RETURN ADDRESS
                      BR    R9                      EXIT
             DO9      DC    A(0)                    RETURN ADDRESS
             ***************** ************************************************
****           * PROCESS USING CONTROL RECORDS: FIRST VALIDATE THE HEX OFFSET AN
D  *           * FIELDS. FORMAT A LABEL ENTRY FOR THE USING AND ADD IT TO THE LA
BEL*                       \* TABLE. IF A DROP LOCATION IS PROVIDED, BUILD A DR
OP ENTRY AND ADD *           * IT TO THE LABEL TABLE.
                 *           ***************************************************
******************           U  SINGCRD ST    R9,UC9                  SAVE RETUR
N ADDRESS                               TRT   CNTLCARD+6(6),CHECKHEX  IS USING O
FFSET VALID HEX?                        BNZ   UCBADCRD                NO, ERROR
                                        TRT     CNTLCARD+20(1),CHECKHEX IS REGIS
TER VALID HEX?                            BNZ   UCBADCRD                NO, ERRO
R                                         TRT   CNTLCARD+22(6),CHECKHEX  IS USIN
G INITIAL VALUE HEX?                      BNZ   UCBADCRD                  NO, ER
ROR                                         CLC   CNTLCARD+13(6),BLANKS   ANY DR
OP OFFSET ENTERED?                          BE    UCFORMAT                NO
                                            TRT   CNTLCARD+13(6),CHECKHEX    IS
USING INITIAL VALUE HEX?                      BNZ   UCBADCRD                NO,
ERROR                                UCFORMAT L     R1,CURRLABL             POIN
T TO CURRENT LABEL AREA                       USING LBLDSECT,R1
                                                TR    CNTLCARD+6(6),TRHEX     MA
KE C1=FA, C2=FB, ... ETC                        PACK  LBLOFSET(5),CNTLCARD+6(7)
PACK TO MAKE HEX                                MVI   LBLOFSET+4,C' '         CL
EAR TRASH                                         MVC   HOLDSTRT,LBLOFSET
SAVE START OFFSET                                 MVI   LBLTYPE,X'10'
TYPE IS USING                                     TR    CNTLCARD+20(1),TRHEX
MAKE C1=FA, C2=FB,... ETC                           MVC   LBLUREG,CNTLCARD+20
  MOVE REGISTER                                     NI    LBLUREG,X'0F'
  CLEAR ZONE NYBBLE                                 MVC   HOLDREG,LBLUREG
  SAVE REGISTER VALUE                               XC      LBLRLDLN(10),LBLRLDL
N   ZERO OUT REMAINDER                                TR    CNTLCARD+22(6),TRHEX
    MAKE C1=FA, C2=FB, ... ETC                        MVI   HOLDINIU,0
    CLEAR HIGH ORDER BYTE                             PACK  HOLDINIU+1  (4),CNTL
CARD+22(7) PACK TO MAKE HEX                             MVC   LBLINITU,HOLDINIU
      MOVE INITIAL USING REG VALUE                      BAS   R9,ADDLABEL
      GO PUT IT IN THE TABLE                            L     R1,CURRLABL
        POINT TO CURRENT LABEL AREA                       CLC   HOLDINIU,XZROS
        USING AT LOCATION ZERO?                           BE    UCCKDROP
        YES, NO LABEL ENTRY NEEDED                        MVC   LBLOFSET,HOLDINI
U       COPY INITIAL   VALUE TO LOCATION                    MVI   LBLOFSET,0
          CLEAR 1ST BYTE OF OFFSET                          MVI   LBLTYPE,X'30'
          INDICATE SIMPLE LABEL ENTRY                       MVI   LBLUREG,0
          CLEAR USING REGISTER NBR +                          MVC   LBLRLDLN,XZR
OS          CLEAR RLD LENGTH                                    XC    LBLLABEL,L
BLLABEL       CLEAR LABEL NAME                                  BAS   R9,ADDLABE
L             GO PUT IT IN THE TABLE                   UCCKDROP CLC   CNTLCARD+1
3(6),BLANKS   ANY DROP OFFSET ENTERED?                            BE    UCXIT
                NO                                                L     R1,CURRL
ABL             POINT TO CURRENT LABEL AREA                       TR    CNTLCARD
+13(6),TRHEX    MAKE C1=FA, C2=FB, ... ETC                          PACK  LBLOFS
ET(5),CNTLCARD+13(7) PACK TO MAKE HEX                               MVI   LBLOFS
ET+4,C' '         CLEAR TRASH                                       CLC   HOLDST
RT,LBLOFSET       IS DROP AFTER USING?                              BNL   UCBA
DCRD                NO, ERROR                                         MVI   LBLT
YPE,X'0C'           TYPE IS DROP                                      MVC   LBLU
REG,HOLDREG         MOVE IN REGISTER NBR                              XC    LBLR
LDLN(10),LBLR  LDLN   ZERO OUT REST                                     BAS   R9
,ADDLABEL             GO PUT IT IN THE TABLE                            B     UC
XIT                   AND EXIT                                          DROP  R1
                                                                 UCBADCRD MVC
PRT(37),=CL37'INVALID USING RECORD ABOVE IS DROPPED'                      BAS
R9,PRINT                PRINT MESSAGE                                     MVC
RETCODE+2(2),H8         SET RETURN CODE = 8                                 WTO
  'DROPPED AN INVALID USING CONTROL RECORD',ROUTCDE=11             UCXIT    L
  R9,UC9                  GET RETURN ADDRESS                                BR
  R9                      EXIT                                       UC9      DC
    A(0)                    RETURN ADDRESS                           ***********
**********************************************************           * PROCESS U
SER LABEL RECORDS: FIRST VALIDATE THE HEX OFFSET, DECIMAL*           * LE  NGTH,
 AND CHARACTER LABEL FIELDS. FORMAT A LABEL ENTRY FOR THE  *           * LABEL A
ND ADD IT TO THE LABEL TABLE.                              *           *********
************************************************************           ULABEL
ST    R9 ,UL9                  SAVE RETURN ADDRESS
  TRT   CNTLCARD+15(6),CHECKHEX IS LABEL OFFSET VALID HEX?
  BNZ   ULBADCRD                NO, ERROR
     \         TRT   CNTLCARD+22(3),CHECKZON IS LENGTH VALID DECIMAL?
                BNZ   ULBADCRD                NO, ERROR
                CLI   CNTLCARD+6,C' '         ANY LABEL ENTERED?
                  BE    ULBADCRD                NO
                  CLI   CNTLCARD+6,C'Z'         FIRST CHARACTER VALID?
                  BH    ULBADCRD                NO
                  TRT     CNTLCARD+6(8),CHECKLBL  IS USER LABEL VALID CHARS?
                    BNZ   ULBADCRD                NO, ERROR
           ULFORMAT L     R1,CURRLABL             POINT TO CURRENT LABEL AREA
                    USING LBLDSECT,R1
                      TR    CNTLCARD+15(6),TRHEX     MAKE C1=FA, C2=FB, ... ETC
                      PACK  LBLOFSET(5),CNTLCARD+15(7) PACK TO MAKE HEX
                      MVI   LBLOFSET+4,C' '         C  LEAR TRASH
                        MVI   LBLTYPE,X'30'           TYPE IS USING
                        MVI   LBLUREG,0               REGISTER NOT USED
                        PACK  DBLWD,CNTLCARD+22(3)    PACK LENGTH VA  LUE
                          CVB   R15,DBLWD               CONVERT TO PACKED
                          STCM  R15,3,LBLRLDLN          SAVE LENGTH
                          MVC   LBLLABEL,CNTLCARD+6     MOVE IN LABEL NAME
                            BAS   R9,ADDLABEL             GO PUT IT IN THE TABLE
                            B     ULXIT                   AND THEN EXIT
                            DROP  R1
                     ULBADCRD MVC   PRT(37),=CL37'INVALID ULABL RECORD ABOVE IS
DROPPED'                      BAS   R9,PRINT                PRINT MESSAGE
                              MVC   RETCODE+2(2),H8         SET RETURN CODE = 8
                              WTO     'DROPPED AN INVALID ULABL CONTROL RECORD',
ROUTCDE=11             ULXIT    L     R9,UL9                  GET RETURN ADDRESS
                                BR    R9                      EXIT
                       UL9      DC    A(0)                      RETURN ADDRESS
                         *******************************************************
**************           * PROCESS THE ESD RECORDS FOR THIS CSECT: LOOP THROUGH
ALL THE ESD  *           * ENTRIES RETURNED BY THE READLMOD SUB  ROUTINE. THE FI
RST THREE ARE  *           * NORMALLY FOR THE CSECT ITSELF (AN SD, AN ED, AND AN
 LD). THESE    *           * WILL BE FOLLOWED BY OTHER ESD ELEMENTS OF WHICH ONL
Y THE LD TYPES *           * ARE USED. THE FIRST SD ELEMENT CONTAINS THE AMODE
 AND RMODE VALUES*           * THE ED CONTAINS THE CSECT LENGTH, AND THE LD FOR
THE CSECT        *           * PROVIDES LABEL INFORMATION FOR THE CSECT ITSELF.
ANY REMAINING    *           * LD ENTRIES REPRESENT LABELS IDENTIFIED WITH ENTRY
 STATEMENTS. +     *           *************************************************
***********  *********           GETESD   ST    R9,GE9                  SAVE RET
URN ADDRESS                               XC    PRMCURSR,PRMCURSR       CLEAR CU
RSOR FOR FIRST CALL              GEGETIT  MVC   PRMREQST,=CL8'ESD'      SHOW REQ
UEST IS FOR ESD DATA                        BAS   R9,READLMOD             GO REA
D THE ESD DATA                              CLC   PRMCOUNT,ZERO           ANY DA
TA RETURNED?                                BE    GEXIT                   NO
                                              L     R10,PRMCOUNT            GET
NUMBER ELEMENTS FOUND                         L     R11,PRMBUFAD            POIN
T TO BUFFER HEADER                            USING ESDHEADR,R11
                                              LA    R12,  ESDHEND             PO
INT TO FIRST ELEMENT                            USING ESDENTRY,R12
                                       GENEXT   STM   R10,R12,WORKSAVE        SA
VE WORK REGISTERS                               MVC   ESDSYMB,BLANKS
CLEAR SYMBOL NAME                                 LH    R1,ESDNAMEC
GET LENGTH OF SYMBOL                              LTR   R1,R1
ANY LENGTH?                                       BZ    GEMVOWBK
NO                                                  BCTR  R1,0
  COMPUTE LENGTH CODE                               CH    R1,H8
  EXCESSIVE LENGTH?                                 BL    GEMVNAM2
  NO                                                  LA    R1,7
    YES, SET MAX LENGTH                      GEMVNAM2 L     R2,ESDNAMEP
    POINT TO THE SYMBOL                               EX    R1,GEMVSYMX
    MOVE SYMBOL NAME                           GEMVOWBK MVC   ESDOWNER,BLANKS
      PRE-CLEAR OWNER NAME                              LH    R1,ESDRESCL
      GET OWNER NAME LENGTH                             LTR   R1,R1
      ANY LENGTH?                                         BZ    GECKTYPE
        NO                                                BCTR  R1,0
        COMPUTE LENGTH CODE                               CH    R1,H8
        EXCESSIVE LENGTH?                                 BL    GE MVOWN2
          NO                                                LA    R1,7
          YES, SET MAX LENGTH                      GEMVOWN2 L     R2,ESDRESCP
          POINT TO OWNING NAME                                 \         EX
R1,GEMVOWNX             MOVE IN OWNING NAME                      GECKTYPE CLC
ESDTYPE,=CL2'SD'        IS THIS AN SD (CSECT)?                            BNE
GECKTYP2                NO                                                  CLC
  CURRCSCT,ESDSYMB        SYMBOL SAME AS REQUESTED CSECT?                   BNE
  GECKTYP2                NO                                                CLC
  CURRCSCT,ESDOWNER       OWNER SAME AS REQUESTED CSECT?                    BNE
    GECKTYP2                NO                                                TM
    ESDSYMAT,X'80'          STRONG REFERENCE/DEFINITION?                      BO
    GECKTYP2                YES                                               MV
C   CURRAMOD,ESD  AMODE       NO, SAVE AMODE
MVC   CURRRMOD,ESDRMODE          AND RMODE
B     GESTEP                  CONTINUE WITH NEXT ESD ENTRY             GECKTYP2
CLC   ESDTYPE,=CL2'ED'        T  HIS AN ED?
  BNE   GECKTYP3                NO
  CLC   ESDSYMB,=CL8'B_TEXT'    SYMBOL NAME IS B_TEXT?
  BNE   GECKTYP3                NO
    CLC   CURRCSCT,ESDOWNER       OWNER SAME AS REQUESTED CSECT?
    BNE   GECKTYP3                NO
    TM    ESDSYMAT,X'80'          STRONG REFERENCE/DEFINITION  ?
      BO    GECKTYP2                YES
      MVC   TEXTENDA,ESDLENG        NO, SAVE TEXT LENGTH
      MVC   TEXTLENG,ESDLENG           TWICE
        B     GESTEP                  CONTINUE WITH NEXT ESD ENTRY             G
ECKTYP3 CLC   ESDTYPE,=CL2'LD'        THIS AN LD?
        BNE   GESTEP                  NO
        CLC     CURRCSCT,ESDOWNER       OWNER SAME AS REQUESTED CSECT?
          BNE   GESTEP                  NO
          TM    ESDSYMAT,X'80'          STRONG REFERENCE/DEFINITION?
          BZ    GESTEP                    NO
            L     R1,CURRLABL             POINT TO CURRENT LABEL ENTRY
            USING LBLDSECT,R1
            MVC   LBLOFSET,ESDELOFF         OFFSET TO LABEL
              MVI   LBLTYPE,X'30'           TYPE = LABEL
              MVI   LBLUREG,0               NO USING REGISTER
              XC    LBLRLDLN,LBLRLDLN       CLEAR LENGTH   FOR RLD CONSTANT
                MVC   LBLLABEL,ESDSYMB        MOVE SYMBOL NAME TO ENTRY
                DROP  R1
                BAS   R9,ADDLABEL             GO ADD LABEL ENTRY TO TAB+ LE
         GESTEP   LM    R10,R12,WORKSAVE        GET WORK REGISTERS
                    A     R12,ESDHENTL            POINT TO NEXT ELEMENT
                    BCT   R10,GENEXT              LOOP THRU ESD ENTRIES
                    CLC   PRMRETCD,ZERO           ANY MORE ESD ENTRIES?
                      BE    GEGETIT                 YES, GO READ NEXT ESD BUFFER
             GEXIT    L     R9,GE9                  GET RETURN ADDRESS
                      BR    R9                      EXIT
             GE9        DC    A(0)                    RETURN ADDRESS
               GEMVSYMX MVC   ESDSYMB(1),0(R2)        EXECUTED MOVE
               GEMVOWNX MVC   ESDOWNER(1),0(R2)       EXECUTED MOVE
                        DROP  R11
                          DROP  R12
                 ***************************************************************
******           *        PROCESS THE RLD RECORDS   FOR THIS CSECT
       *           *************************************************************
********           GETRLD   ST    R9,GR9                  SAVE RETURN ADDRESS
                            MVC   PRMREQST,=CL8'RLD'      SHOW R  EQUEST IS FOR
RLD DATA             GRGET2   BAS   R9,READLMOD             GO READ THE RLD DATA
                              L     R10,PRMCOUNT            GET NUMBER ELEMENTS
FOUND                         LTR   R10,R10                 ANY RLD ELEMENTS RE
 AD?                            BZ    GRXIT                   NO
                                L     R11,PRMBUFAD            POINT TO BUFFER HE
ADER                            USING RLDHEADR,R11
                                  LA    R12,RLDHEND             POINT TO FIRST E
LEMENT                            USING RLDENTRY,R12
                         GRNEXT   STM   R10,R12,WORKSAVE        SAVE WORK REGIST
ERS                                 MVC   RESIDENT,BLANKS         PRE-CLEAR TO B
LANKS                               LH    R1,RLDRESNL             GET LENGTH OF
RES CSECT NAME                      LTR   R1,R1                   ANY LENGTH?
                                    BZ    GR DMVAC                 NO
                                      BCTR  R1,0                    COMPUTE LENG
TH CODE                               CH    R1,H8                   EXCESSIVE LE
NGTH?                                    \         BL    GRDMVRES
  NO                                                LA    R1,7
  YES, SET MAX LENGTH                      GRDMVRES L     R2,RLDRESNP
  POINT TO THE SYMBOL                                 EX    R1,GRDMVREX
    MOVE SYMBOL NAME                         GRDMVAC  MVC   SYMBPTS2,BLANKS
    PRE-CLEAR TO BLANKS                               LH    R1,RLDTGTNL
    GET LENGTH OF SYMBOL POINTED TO                   LTR     R1,R1
      ANY LENGTH?                                       BZ    GRDCKIT
      NO                                                BCTR  R1,0
      COMPUTE LENGTH CODE                               CH    R1,H8
        EXCESSIVE LENGTH?                                 BL    GRDMVTGT
        NO                                                LA    R1,7
        YES, SET MAX LENGTH                      GRDMVTGT L     R2,RLDTGTNP
        P  OINT TO THE SYMBOL                               EX    R1,GRDTGTNX
          MOVE SYMBOL NAME                         GRDCKIT  CLC   RESIDENT,CURRC
SCT       ENTRY RESIDES IN CURRENT CSECT?                   BNE   GRSTEP
          NO                                                  L     R1,CURRLABL
            POINT TO LABEL TABLE                              USING LBLDSECT,R1
                                                     GRLBLOK  MVC   LBLOFSET,RLD
RESOF       OFFSET TO LABEL                                     MVI   LBLTYPE,X'
40'           ASSUME ADCON                                      CLI   RLDSTAT,X'
02'           IS IT AN ADCON?                                   BE    GRCLRU
              YES                                                 MVI   LBLTYPE,
X'50'           NO, ASSUME VCON                                   CLI   RLDSTAT,
X'01'           IS IT A VCON?                                     BNE   GRSTEP
                NO, DROP IT                              GRCLRU   MVI     LBLURE
G,0               CLEAR USING REG NBR                               MVC   LBLRLD
LN,RLDADCNL       LENGTH OF ADCON                                   MVC   LBLLAB
EL,BLANKS         CLEAR SYMBOL NAME FIELD                           CLC   SYMBPT
S2,C  URRCSCT       SYMBOL = CURRENT CSECT?                           BE    GRLB
ADD                 YES                                               MVC   LBLL
ABEL,SYMBPTS2       MOVE SYMBOL NAME TO ENTRY                GRLBADD  BAS   R9,A
DDLABEL               GO ADD LABEL TO TABLE.                            DROP  R1
                                                               GRSTEP   LM    R1
0,R12,WORKSAVE        GET WORK REGISTERS                                A     R1
2,RLDHENTL            POINT TO NEX  T ELEMENT                             BCT
R10,GRNEXT              LOOP THRU ESD ENTRIES                             CLC
PRMRETCD,ZERO           ANY MORE RLD ENTRIES?                             BE
GRGET2                  YES                      +                 GRXIT    L
  R9,GR9                  GET RETURN ADDRESS                                  BR
    R9                      EXIT                                     GRDMVREX MV
C   RESIDENT(1),0(R2)       EXECUTED MOVE                            GRDTGTNX MV
C   SYMBPTS2(1),0(R2)       EXECUTED MOVE                              GR9
DC    A(0)                    RETURN ADDRESS                           *********
************************************************************           *
OBTAIN THE TEXT FOR THIS CSECT: ISSUE A STORAGE OBTAIN     *           *
  FOR A STORAGE AREA ABOVE THE 16M LINE LARGE ENOUGH TO      *           *
  CONTAIN THE TEXT, THEN LOAD ALL THE TEXT INTO IT.          *           *******
**************************************************************           GETTEXT
  ST    R9,G  T9                  SAVE RETURN ADDRESS
    MVC   PRMCURSR,ZERO           SET CURSOR=0 TO START
    L     R0,TEXTENDA             GET TEXT LENGTH SET BY ESD
    LTR   R0,R0                     HAS TEXT LENGTH BEEN SET?
      BZ    GTNOTXAD                NO, ERROR
      AH    R0,H32                  INSURE SUFFICIENT STORAGE
      B     GTSTOBTN                YES                                        G
TNOTXAD MVC   PRT(39),=CL39'NO STORAGE SIZE WAS FOUND FOR THE CSECT'
        BAS   R9,PRINT                PRINT THE ERROR MESSAGE
        WTO   'MISSING TEXT STORAGE SIZE, ABENDING',ROUTC  DE=11
          ABEND 555,DUMP                TERMINATE IN ERROR
 GTSTOBTN STORAGE OBTAIN,LENGTH=(0),LOC=ANY GET TEXT STORAGE
          ST    R1,TEXTADDR             SAVE THE GOTTEN ADDRESS
            ST    R1,CURRTEXT             SET CURRENT TEXT ADDRESS
            A     R1,TEXTENDA             SAVE THE ADDRESS OF THE
            ST    R1,TEXTENDA                 END OF THE TEXT AREA
              MVC   PRMREQST,=CL8'TEXT'     SHOW REQUEST IS FOR ESD DATA
     GTNEXT   BAS   R9,READLMOD             GO READ THE TEXT DATA
              CLC   PRMCOUNT,ZERO           ANY DATA RETURNED?
              BE    GT XIT                   NO
                L     R11,PRMCOUNT            GET NUMBER BYTES IN BUFFER
                L     R10,PRMBUFAD            POINT TO BUFFER HEADER
                   \         USING TXTHEADR,R10
                              LA    R10,TXTHEND             POINT TO FIRST TEXT
BYTE                          DROP  R10
                                L     R0,PRMCURSR             GET STARTING
                                S     R0,PRMCOUNT                 TEXT
                                A     R0,TEXTADDR                    ADDRESS
                                LR      R1,R11                  COPY TEXT LENGTH
                                  MVCL  R0,R10                  MOVE TEXT
                                  CLC   PRMRETCD,ZERO           ANY MORE TEXT?
                                  BE    GTNEXT                    YES
                           GTXIT    L     R9,GT9                  GET RETURN ADD
RESS                                BR    R9                      EXIT
                           GT9      DC    A(0)                    R  ETURN ADDRE
SS                           ***************************************************
******************           *        CALL READLMOD TO OBTAIN DATA FROM THE LOAD
 MODULE          *           ***************************************************
**  ****************           READLMOD ST    R9,RL9                  SAVE RETUR
N ADDRESS                      RLCALL   CALL  READLMOD,PARMAREA       CALL READL
MOD FOR REQUESTED DATA                  CLI   PRMERROR,C' '           WAS THERE
AN ERROR?                                 BE    RLXIT                   NO
                                          MVC   PRTREQST,PRMREQST       MOVE REQ
UESTED DATA TYPE                          MVC   PRTERROR,PRMERROR       AND THE
ERROR CODE                         RLCURS   UNPK  PRTCURSR(9),PRMCURSR(5) CURSOR
 TO PRINT                                   TR    PRTCURSR,TRCHAR         MAKE I
T PRINTABLE                                 MVI   PRTCURSR+8,C' '         CLEAR
TRASH                                       UNP  K  PRTRETCD(9),PRMRETCD(5) RETU
RN CODE TO PRINT                              TR    PRTRETCD,TRCHAR         MAKE
 IT PRINTABLE                                 MVI   PRTRETCD+8,C' '         CLEA
R TRASH                                       UNPK  PRTRSNCD(9  ),PRMRSNCD(5) RE
ASON CODE TO PRINT                              TR    PRTRSNCD,TRCHAR         MA
KE IT PRINTABLE                                 MVI   PRTRSNCD+8,C' '         CL
EAR TRASH                                       UNPK  PRTCOUNT(9),PRMCOUNT(5)
COUNT TO PRINT                                    TR    PRTCOUNT,TRCHAR
MAKE IT PRINTABLE                                 MVI   PRTCOUNT+8,C' '
CLEAR TRASH                                       MVC   PRT(80),PRTRETRN
DATA LINE                                           BAS   R9,PRINT
  PRINT THE LINE                                    WTO   'RESOURCE FOUND ERROR
RETURNED BY READLMOD CALL',       X                       ROUTCDE=11
                           +                          ABEND 111,DUMP
    TERMINATE IN ERROR                         RLXIT    L     R9,RL9
      GET RETURN ADDRESS                                BR    R9
      EXIT                                     RL9      DC    A(0)
      RETURN ADDRESS                             *******************************
**************************************           *             PRINT SUBROUTINE
                                     *           *******************************
**************************************           PRINT      PUT   SYSPRINT,PRTLI
NE        WRITE PRINT LINE                                  MVC   PRTLINE,BLANKS
          CLEAR PRINT LINE                                  BR    R9
          RETURN                                   *******************  ********
******************************************           * ADD AN ENTRY TO THE LABEL
 TABLE. THE NEW ENTRY HAS BEEN PLACED    *           * IN THE NEXT AVAILABLE TAB
LE SLOT THAT IS POINTED TO BY CURRLABL.  *           * THE NEW ENTRY IS INSERTED
 INTO   THE TABLE IN ADDRESS-TYPE ORDER.   *           *************************
********************************************           ADDLABEL ST    R9,AL9
              SAVE RETURN ADDRESS                               L     R1,LBLTBAD
R             POINT   TO FIRST TABLE ENTRY                        USING LBLDSECT
,R1                                                               L     R2,CURRL
ABL             POINT TO NEW ENTRY                       ALCHKEND CR    R1,R2
                PRESENTLY AT NEW EN  TRY?                           BNL   ALADVA
NC                YES                                               CLC   0(5,R2
),LBLENTRY        AT INSERTION POINT?                               BL    ALINSR
T                 YES                                                 LA    R1,L
'LBLENTRY(R1)       NO, ADVANCE TO NEXT ENTRY                         B     ALCH
KEND                LOOP TO FIND INSERTION POINT             ALINSRT  MVC   HOLD
LABL,LBLENTRY       HOLD PRESENT ENTRY                                  MVC   LB
LENTRY,0(R2)          MOVE IN NEW ENTRY                                 MVC   0(
L'LBLENTRY,R2),HOLDLABL PREVIOUS ENTRY TO END                           LA    R1
,L'LBLENTRY(R1)       STEP TO NEXT ENTRY                                CR    R1
 ,R2                   PRESENTLY AT LAST ENTRY?                          BL
ALINSRT                 NO, CONTINUE INSERTION LOOP              ALADVANC LA
R2,L'LBLENTRY(R2)       STEP TO NEXT AVAILABLE SLOT                          \
        ST    R2,CURRLABL             SAVE UPDATED TABLE ADDRESS
        C     R2,LBLTBEND             PAST END OF TABLE?
        BL    ALXIT                   NO
          MVC   PRT(37),=CL37'LABEL TABLE OF 32,768 ENTRIES IS FULL'
          BAS   R9,PRINT                PRINT ERROR MESSAGE
          WTO   'LABEL TABLE OVERFLOW, ABENDING',ROUTCDE=11
          ABEND   666,DUMP                TERMINATE IN ERROR
   ALXIT    L     R9,AL9                  GET RETURN ADDRESS
            BR    R9                      EXIT
            DROP  R1
     AL9      DC    A(0)                    RETURN ADDRESS
     *********************************************************************
     *        TESTPRNT PRINTS THE LABEL TABLE   AND TEXT AREAS AT END OF   *
       *        JOB FOR TESTING.                                           *
       *********************************************************************
       TESTPRNT ST    R9,TP9                  SAVE RETURN AD  DRESS
                  MVC   PRT(8),=CL8'LBLOFSET'
                  MVC   PRT+9(4),=CL4'TYPE'
                  MVC   PRT+14(4),=CL4'UREG'
                    MVC   PRT+19(4),=CL4'LENG'
                    MVC   PRT+24(8),=CL8'LABEL'
                    BAS   R9,PRINT
                      L     R12,LBLTBADR            POINT TO LABEL TABLE
                      USING LBLDSECT,R12
             TPNEXTLB UNPK  PRT(9),LBLOFSET(5)
                      MVI     PRT+8,C' '
                        TR    PRT(8),TRCHAR
                        UNPK  PRT+10(3),LBLTYPE(2)
                        MVI   PRT+12,C'   '
                          TR    PRT+10(2),TRCHAR
                          UNPK  PRT+15(3),LBLUREG(2)
                          MVI   PRT+17,C' '
                            TR    PRT+15(3),TRCHAR
                            UNPK  PRT+19(5),LBLRLDLN(3)
                            MVI   PRT+23,C' '
                              CLI   LBLTYPE,X'10'
                              BNE   TPLBL
                              UNPK  PRT+24(7),LBLINITU+1(4)
     +                          MVI   PRT+30,C' '
                                  TR    PRT+24(6),TRCHAR
                                  B     TPDESCR
                         TPLBL    MVC   PRT+24(8),LBLLABEL
                           TPDESCR  CLI   LBLTYPE,X'0C'
                                    BNE   TPDESC2
                                    MVC   PRT+36(4),=CL4'DROP'
                                      MVI   PRT+42,C'R'
                                      MVC   PRT+43(1),LBLUREG
                                      OI    PRT+43,X'F0'
                                      CLI   LBLU  REG,X'0A'
                                        BL    TPPRINT
                                        MVI   PRT+43,C'1'
                                        IC    R1,LBLUREG
                                          LA    R1,6(R1)
                                          STC   R1,PRT+44
                                          OI    PRT+44,X'F0'
                                            B     TPPRINT
                                   TPDESC2  CLI   LBLTYPE,X'10'
                                            BNE   TPDESC3
                                              MVC   PRT+36(5),=CL5'USING'
                                              MVC   PRT+42(6),PRT+24
                                              MVI   PRT+48,C','
                                                MVI   PRT+49,C'R'
                                                MVC   PRT+50(1),LBLUREG
                                                OI    PRT+50,X'F0'
                                                  CLI   LBLUREG,X'0A'
                                                  BL    TPPRINT
                                                  MVI   PRT+50,C'1'
                                                  IC    R1 ,LBLUREG
                                                    LA    R1,6(R1)
                                                    STC   R1,PRT+51
                                                       \         OI    PRT+51,X
'F0'                                                              B     TPPRINT
                                                         TPDESC3  CLI   LBLTYPE,
X'18'                                                               BNE   TPDESC
4                                                                   MVC   PRT+36
(10),=CL10'DATA START'                                              B     TPPRIN
T                                                          TPDESC4  CLI     LBLT
YPE,X'1C'                                                             BNE   TPDE
SC5                                                                   MVC   PRT+
36(8),=CL8'DATA END'                                                  B     TPPR
INT                                                            TPDESC5  CLI   LB
LTYPE,X'30'                                                             BNE   TP
DESC6                                                                   MVC   PR
T+36(5),=CL5'LABEL'                                                       B
TPPRINT                                                          TPDESC6  CLI
LBLTYPE,X'40'                                                             BNE
TPDESC7                                                                     MVC
  PRT+36(5),=CL5'ADCON'                                                     B
  TPPRINT                                                          TPDESC7  CLI
  LBLTYPE,X'50'                                                               BN
E   TPPRINT                                                                   MV
C   PRT+36(5),=CL5'V-CON'                                                     B
    TPPRINT                                                            TPPRINT
BAS   R9,PRINT
LA    R12,L'LBLENTRY(R12)
C     R12,CURRLABL
BL      TPNEXTLB
  BAS   R9,PRINT
  UNPK  PRT(9),TEXTLENG(5)
  MVI   PRT+8,C' '
    TR    PRT(8),TRCHAR
    MVC   PRT+9(22),=CL22' BYTES OF TEXT FOLLOW:'
    BAS   R9,PRINT
      L     R12,TEXTADDR            POINT TO TEXT AREA START                 TPN
EXTT  UNPK  PRT(9),TPOFF(5)
      MVI   PRT+8,C' '
        TR    PRT(8),TRCHAR
        UNPK  PRT+9(9),0(5,R12)
        MVI   PRT+17,C' '                                      +
          UNPK  PRT+18(9),4(5,R12)
            MVI   PRT+26,C' '
            UNPK  PRT+27(9),8(5,R12)
            MVI   PRT+35,C' '
              UNPK  PRT+36(9),12(5,R12)
              MVI   PRT+44,C' '
              UNPK  PRT+46(9),16(5,R12)
                MVI   PRT+54,C' '
                UNPK  PRT+55(9),20(5,R12)
                MVI   PRT+63,C' '
                UNPK  PRT+  64(9),24(5,R12)
                  MVI   PRT+72,C' '
                  UNPK  PRT+73(9),28(5,R12)
                  MVI   PRT+81,C' '
                    TR    PRT+9(74),TRCHAR
                    MVC   PRT+83(32),0(R12)
                    TR    PRT+83(32),PRTCHAR      TRANSL  ATE TO PRINTABLE DRK J
UN07                  BAS   R9,PRINT
                      L     R1,TPOFF
                      LA    R1,32(R1)
                        ST    R1,TPOFF
                        LA    R12,32(R12)
                        C     R12,TEXTENDA
                          BL    TPNEXTT
                 TPXIT    L     R9,TP9                  GET RETURN ADDRESS
                          BR    R9                      EXIT
                 TP9        DC    A(0)                    RETURN ADDRESS
                   TPOFF    DC    A(0)                    TEXT OFFSET
                   *************************************************************
********           *        STORAGE  AND FILE AREAS
         *           ***********************************************************
**********           DBLWD    DS    D                       DOUBLEWORD WORK AREA
                                 \XZROS    DC    16X'00'                 CONSTA
ND HEX ZEROES                      REBLDEP  DC    A(0)                    E.P. A
DDRESS FOR REBUILD                 WORKSAVE DS    3F                      SAVE A
REA FOR WORK REGS 10-12            Z  ERO     DC    F'0'                    CONS
TANT ZEROS                           RETCODE  DC    F'0'                    RETU
RN CODE                              H0       DC    H'0'                    CONS
TANT 0                               H5       DC      H'5'                    CO
NSTANT 5                               H11      DC    H'11'                   CO
NSTANT 11                              H8       DC    H'8'                    CO
NSTANT 8                               H32      DC    H'32'
CONSTANT 32                              RESIDENT DC    CL8' '
RLD RESIDENT CSECT NAME                  SYMBPTS2 DC    CL8' '
RLD SYMBOL POINTED TO                    ESDSYMB  DC    CL8' '
E  SD SYMBOL NAME                          ESDOWNER DC    CL8' '
  ESD OWNING CSECT NAME                    UNWANTED DC    XL1'60'
  40=NO FLTPT, 20=NO PRIV INST             SUPVR    DC    CL5'SUPVR'
  LITERAL CONSTA  NT                         FLTPT    DC    CL5'FLTPT'
    LITERAL CONSTANT                         BLANKS   DC    CL133' '
    BLANKS                                   MORECNTL DC    CL1'Y'
    N=NO MORE CONTROL RECORDS                  GOTMCREC DC    CL1'N'
      Y=MEMBER/CSECT RECORD PROCESSED          HOLDLABL DS    CL16
      HOLD AREA FOR LABEL ENTRY SORTS          HOLDINIU DS    XL4,XL1
      HOLD INITIAL USING REG VALUE               HOLDSTRT DS    XL4
        WORK FIELD                               HOLDREG  DS    XL1
        WORK FIELD                               STAGE    DC    XL1'1'
        STAGE NUMBER FOR REBUILD                 HEXFFS   DC      X'FFFFFFFF'
          HEX FF'S                                 WORK1    DC    C' '
          WORK FIELD                               MYRC     DS    F
          DOUBLEWORD WORK AREA                     LBLTBXXX DC    A(32800*L'  LB
LENTRY)        SIZE OF 32,800 ENTRIES                LBLTBYYY DS    F
            ADDR   OF GOTTEN AREA                    LBLTBZZZ DS    F
            LENGTH OF GOTTEN AREA                    LBLTBR10 DS    F
              SAVE AREA FOR R10K REGS 10-12            LBLTBR11 DS    F
              SAVE AREA FOR R11                        *
                                                       REBLDPRM DS    0A
              REBUILD PARA  METER LIST                            DC    A(STAGE)
                   STAGE INDICATOR POINTER                        DC    A(CURRCS
CT)                CSECT NAME POINTER                    LBLTBADR DC    A(0)
                   LABEL TABLE STARTING A+ DDRESS          CURRLABL DC    A(0)
                  ADDRESS OF CURRENT LA  BEL ENTRY           LBLTBEND DC    A(32
768*L'LBLENTRY)        SIZE OF 32,768 ENTRIES                TEXTADDR DC    A(0)
                       ADDRESS OF CSECT TEXT                 TEXTENDA DC    A(0)
                       ADDRESS OF LAST BYTE OF TEXT            TEXTLENG DC    A(
0)                       TOTAL TEXT LENGTH                     TBLTBLAD DC    A(
OPCODTBL)                OP-CODE TABLE POINTER                 PRNTDCBA DC    A(
SYSPRINT)                SYSPRINT DCB ADDRESS                  OUTDCB  A  DC
A(SYSOUT)                  SYSOUT DCB ADDRESS                    *
                                                                 TABLTABL DS
0A                      TABLE OF OP-CODE TABLE ADDRESSES                  DC
A(OC  TWO01)                  01XX OP-CODE TABLE                            DC
  A(OCTWOA7)                  A7X OP-CODE TABLE                             DC
  A(OCTWOB2)                  B2XX OP-CODE TABLE                            DC
  A(OCTWOB3)                    B3XX OP-CODE TABLE                            DC
    A(OCTWOE5)                  E5XX OP-CODE TABLE                            DC
    A(OCTWOED)                  EDXX OP-CODE TABLE                            DC
    XL4'FFFFFFFF'              END   OF TABLE ENTRY                    *
                                                                       ISINST
DC    X'00'                   01=TEXT MAY BE AN INSTRUCTION            INSTFLAG
DS    XL1                     INSTRUCTION FLAGS                          INSTMNE
M DS    XL5                     INSTRUCTION MNEMONIC                     INSTLEN
G DS    XL1                     INSTRUCTION LENGTH                       INSTFMT
  DS    XL1                     INSTRUCTION LENGTH                         INSTT
EXT DS    XL6                     INSTRUCTION TEXT                         *
                                                                           CURRI
NFO DS    0F                      CURRENT PROCESSING INFO                  CURR
 MEMB DC    CL8' '                     MEMBER NAME                           CUR
RCSCT DC    CL8' '                     CSECT NAME                            CUR
RTEXT DC    A(0)                    ADDRESS OF CURRENT TEXT BYTE             CUR
RAMOD DS    XL 1                        REQUESTED CSECT AMODE                 C
URRRMOD DS    XL1                        REQUESTED CSECT RMODE                 C
URREND  EQU   *
           \*
             PRTLINE  DS    0CL133                  PRINT LINE
             PRTCC    DC    CL1'1'                     CARRIAGE CONTROL BYYTE
             P  RT      DC    CL132' '                   PRINT DATA LINE
               *
               PRTRETRN DS    0CL80                   PRINT READLMOD RETURNED DA
TA                      DC      CL5' REQ='
                 PRTREQST DS    CL5                        REQUESTED DATA TYPE
                 PRTRERR  DC    CL5' ERR='
                 PRTERROR DS    CL1                          ERROR INDICATOR
                            DC    CL8' CURSOR='
                   PRTCURSR DS    CL8                        IEWBIND CURSOR
                            DC    CL8' RETCOD='
                     PRTRETCD DS    CL8                        IEWBIND RETURN CO
DE                            DC    CL8' RSNCOD='
                     PRTRSNCD DS    CL8                        IEWBIND REA  SON
CODE                            DC    CL7' COUNT='
                       PRTCOUNT DS    CL8                        IEWBIND COUNT
                                DC    CL1' '
                         *
                         CNTLCARD DS    0CL80              CONTROL STATEMENT
                         CCMEMBER DS    CL8                   MEMBER NAME
                                    DS    CL1
                           CCCSECT  DS    CL8                   CSECT NAME
                                    DS    CL63
                           *
                             TRCHAR   DC    256C' '            TRANSLATE HEX TO
PRINTABLE CHARS                       ORG   TRCHAR+C'0'
                                      DC    C'01234567  89ABCDEF'
                                        ORG
                               *
                               CHECKHEX DC    256X'FF'           TRT   TABLE TO
CHECK FOR VALID HEX                       ORG   CHECKHEX+C'A'
                                          DC    6X'00'
                                          ORG   CHECKHEX+C'0'
                                            DC    10X'00'
                                            ORG
                                   *
                   +                 CHECKZON DC    256X'FF'           TRT TABLE
 TO CHECK FOR ZON  ED DECIMAL                   ORG   CHECKZON+C'0'
                                                DC    10X'00'
                                                ORG
                                         *
                                         CHECKLBL DC    256X'FF'           TRT T
ABLE TO CHECK LABEL CHARS                         ORG   CHECKLBL+C'@'
                                                    DC    X'00'
                                                    ORG   CHECKLBL+C'$'
                                                    DC    X'00'
                                                    ORG   CHEC  KLBL+C'#'
                                                      DC    X'00'
                                                      ORG   CHECKLBL+C' '
                                                      DC    X'00'
                                                        ORG   CHECKLBL+C'A'
                                                        DC    9X'00'
                                                        ORG   CHECKLBL+C'J'
                                                          DC    9X'00'
                                                          ORG   CHECKLBL+C'S'
                                                          DC    8X'00'
                                                            ORG   CHECKLBL+C'0'
                                                            DC    10X'00'
                                                            ORG
                                                     *
                                                     TRHEX    DC    256C' '
            TRANSLATE TO MAKE REAL HEX                        ORG   TRHEX+C'A'
                                                                DC    X'FAFBFCFD
FEFF'                                                           ORG   TRHEX+C'0'
                                                                DC    C'
89'                                                             ORG     
                                                         *
                                                         PRTCHAR  DC    256C'.'
                CHARACTER TRANSLATE TABLE                            \
ORG   PRTCHAR+C' '                                   DRK JUN07
DC    C' '                                           DRK JUN07
ORG   PRTCHAR+C'A'                                   DRK JUN07
  DC    C'ABCDEFGHI'                                   DRK JUN07
  ORG   PRTCHAR+C'J'                                   DRK JUN07
  DC    C'JKLMNOPQR'                                   DRK JUN07
  ORG     PRTCHAR+C'S'                                   DRK JUN07
    DC    C'STUVWXYZ'                                    DRK JUN07
    ORG   PRTCHAR+C'0'                                   DRK JUN07
    DC    C'0123456789  '                                  DRK JUN07
      ORG   ,                                              DRK JUN07         ***
********************************************************************         *TA
BLES OF INSTRUCTION OP-CODES. THE FIR  ST TABLE CONTAINS 256 ENTRIES,*         *
ONE FOR EACH POSSIBLE SINGLE-BYTE OP-CODE. FOLLOWING TABLES ARE FOR  *         *
THE INSTRUCTIONS HAVING MORE THAN A ONE-BYTE OP-CODE. EACH TABLE     *         *
ENTRY IS 10 BYTES LONG AAND CONTAINS:                                  *
 *  BYTE  0   OP-CODE FIRST OR ONLY BYTE                               *
 *  BYTE  1   FOR 1.5 AND 2 BYTE OPCODES, THE SECOND OP-CODE BYTE      *
 *  BYTES 2-6 INSTRUCTION MNEMONIC FOR SINGLE-BYTE OP-CODES              *
   *  BYTE  2   '2' FOR 1.5 AND 2 BYTE OP-CODE INSTRUCTIONS              *
   *  BYTES 3-6 ADDRESS OF THE 1.5 OR 2 BYTE OP-CODE TABLE TO USE        *
   *  BYTE  7   INSTRUCTION FORMAT IDENTIFIER. THIS IDENTIFIES THE MEMORY*
     *            FORMAT AND CODING SYNTAX FOR THE INSTRUCTION (SEE THE EQU*
     *            INSTRUCTIONS FOR THE FORMAT NAMES)                       *
     *  BYTE  8   FLAGS: X'40'=FLOATING POINT INSTRUCTION, X'20'=PRIVILEGED*
     *  BYTE  9     IF THE INSTRUCTION SETS THE CONDITION CODE, THIS BYTE    *
       *            WILL CONTAIN THE NUMBER OF THE CONDITION CODE TABLE ENTRY*
       *            TO BE USED FOR FOLLOWING CONDITIONAL BRANCHES.           *
       *  BYTE 10   FLAG BYTE 1:   X'80'=ODD TEST REQUIRED                     *
         *                         X'01'=R2 MUST BE 0,1,4,5,8,9,12, OR 13      *
         *  BYTE 11   FLAG BYTE 2: X'80'=R1 MUST BE 0,1,4,5,8,9,12, OR 13      *
         *                         X'40'=M3 MUS  T BE 0,1,4,5,6, OR 7
 *         *                         X'20'=INSTRUCTION BITS 16-25 MUST BE 0'S
 *         *                         X'10'=R1 MUST NOT EQUAL R2
 *         *                         X'08'=R3 MUST BE AN EVEN   NUMBERED REGISTE
R  *         *                         X'04'=R2 MUST BE AN EVEN NUMBERED REGISTE
R  *         *                         X'02'=R1 MUST BE AN EVEN NUMBERED REGISTE
R  *         *                         X'01'=IF R2=0, OUTPUT 0, NOT R0       +
     *         ************************************************************  ***
********                  DS    0F
                 OPCODTBL DS    0XL12
                          DC    XL2'0000',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
                            DC    XL2'0100',CL1'2',AL4(OCTWO01),XL5'0000000000'
                            DC    XL2'0200',XL5'00',AL1(0),AL1(0),AL1(0),XL2'000
0'                          DC    XL2'0300',XL5'00',AL1(0),AL1(0),AL1(0),XL2'000
0'                            DC    XL2'0400',CL5'SPM',AL1(RR3),AL1(0),AL1(1),XL
2'0000'                       DC    XL2'0500',CL5'BALR',AL1(RR1),AL1(0),AL1(0),X
L2'0001'                      DC    XL2'0600',CL5'BCTR',AL1(RR1),AL1(0),AL1(0),X
L2'0001'                      DC    XL2'  0700',CL5'BCR',AL1(RR4),AL1(0),AL1(0),
XL2'0001'                       DC    XL2'0800',XL5'00',AL1(0),AL1(0),AL1(0),XL2
'0000'                          DC    XL2'0900',XL5'00',AL1(0),AL1(0),AL1(0),XL2
'0000'                          DC    XL2'0A00',CL5'SVC  ',AL1(RR2),AL1(0),AL1(0
),XL2'0000'                       DC    XL2'0B00',CL5'BSM',AL1(RR1),AL1(0),AL1(0
),XL2'0001'                       DC    XL2'0C00',CL5'BASSM',AL1(RR1),AL1(0),AL1
(0),XL2'0001'                     DC    XL2'0D00',CL5'BASR',AL1(RR1),A  L1(0),AL
1(0),XL2'0001'                      DC    XL2'0E00',CL5'MVCL',AL1(RR1),AL1(0),AL
1(1),XL2'0006'                      DC    XL2'0F00',CL5'CLCL',AL1(RR1),AL1(0),AL
1(2),XL2'0016'                      DC    XL2'1000',CL5'LPR',AL1(RR1),AL1(0),AL1
(6),X  L2'0000'                       DC    XL2'1100',CL5'LNR',AL1(RR1),AL1(0),A
L1(7),XL2'0000'                       DC    XL2'1200',CL5'LTR',AL1(RR1),AL1(0),A
L1(8),XL2'0000'                       DC    XL2'1300',CL5'LCR',AL1(RR1),AL1(0),A
L1(9),XL2'0000'                         DC    XL2'1400',CL5'NR',AL1(RR1),AL1(0),
AL1(3),XL2'0000'                        DC    XL2'1500',CL5'CLR',AL1(RR1),AL1(0)
,AL1(2),XL2'0000'                       DC    XL2'1600',CL5'OR',AL1(RR1),AL1(0),
AL1(3),XL2'0000'                          DC    XL2'1700',CL5'XR',AL1(RR1),AL1(0
),AL1(3),XL2'0000'                        DC    XL2'1800',CL5'LR',AL1(RR1),AL1(0
),AL1(0),XL2'0000'                        DC    XL2'1900',CL5'CR',AL1(RR1),AL1(0
),AL1(2),XL2'0000'                        DC    XL 2'1A00',CL5'AR',AL1(RR1),AL1
(0),AL1(9),XL2'0000'                        DC    XL2'1B00',CL5'SR',AL1(RR1),AL1
(0),AL1(9),XL2'0000'                        DC    XL2'1C00',CL5'MR',AL1(RR1),AL1
(0),AL1(0),XL2'0002'                           \         DC    XL2'1D00',CL5'DR
',AL1(RR1),AL1(0),AL1(0),XL2'0000'                        DC    XL2'1E00',CL5'AL
R',AL1(RR1),AL1(0),AL1(1),XL2'0000'                       DC    XL2'1F00',CL5'SL
R',AL1(RR1),AL1(0),AL1(1),XL2'0000'                         DC    XL2'2000',CL5'
LPDR',AL1(RR1),AL1(FP),AL1(10),XL2'0000'                    DC    XL2'2100',CL5'
LNDR',AL1(RR1),AL1(FP),AL1(7),XL2'0000'                     DC    XL2'2200',CL5'
LTDR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'                     DC      XL2'2300',CL
5'LCDR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'                     DC    XL2'2400',CL
5'HDR',AL1(RR1),AL1(FP),AL1(0),XL2'0000'                      DC    XL2'2500',CL
5'LDXR',AL1(RR1),AL1(FP),AL1(0),XL2'0100'                     DC    XL2'2600',CL
  5'MXR',AL1(RR1),AL1(FP),AL1(0),XL2'0000'                      DC    XL2'2700',
CL5'MXDR',AL1(RR1),AL1(FP),AL1(0),XL2'0080'                     DC    XL2'2800',
CL5'LDR',AL1(RR1),AL1(FP),AL1(0),XL2'0000'                      DC    XL2'2900',
CL5'CDR',AL1(RR  1),AL1(FP),AL1(2),XL2'0000'                      DC    XL2'2A00
',CL5'ADR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'                      DC    XL2'2B00
',CL5'SDR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'                      DC    XL2'2C00
',CL5'MDR',AL1(RR1),AL1(FP),AL  1(0),XL2'0000'                      DC    XL2'2D
00',CL5'DDR',AL1(RR1),AL1(FP),AL1(0),XL2'0000'                      DC    XL2'2E
00',CL5'AWR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'                      DC    XL2'2F
00',CL5'SWR',AL1(RR1),AL1(FP),AL1(8),XL2'0000  '                      DC    XL2'
3000',CL5'LPER',AL1(RR1),AL1(FP),AL1(10),XL2'0000'                    DC    XL2'
3100',CL5'LNER',AL1(RR1),AL1(FP),AL1(7),XL2'0000'                     DC    XL2'
3200',CL5'LTER',AL1(RR1),AL1(FP),AL1(8),XL2'0000'                       DC    XL
2'3300',CL5'LCER',AL1(RR1),AL1(FP),AL1(8),XL2'0000'                     DC    XL
2'3400',CL5'HER',AL1(RR1),AL1(FP),AL1(0),XL2'0000'                      DC    XL
2'3500',CL5'LEDR',AL1(RR1),AL1(FP),AL1(0),XL2'0000'                     DC
XL2'3600',CL5'AXR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'                      DC
XL2'3700',CL5'SXR',AL1(RR1),AL1(FP),AL1(8),XL2'0180'                      DC
XL2'3800',CL5'LER',AL1(RR1),AL1(FP),AL1(0),XL2'0000'                      DC
XL2'3900',  CL5'CER',AL1(RR1),AL1(FP),AL1(2),XL2'0000'                      DC
  XL2'3A00',CL5'AER',AL1(RR1),AL1(FP),AL1(8),XL2'0000'                      DC
  XL2'3B00',CL5'SER',AL1(RR1),AL1(FP),AL1(8),XL2'0000'                      DC
  XL2'3C00',CL5'MDER',AL1  (RR1),AL1(FP),AL1(0),XL2'0000'                     DC
    XL2'3D00',CL5'DER',AL1(RR1),AL1(FP),AL1(0),XL2'0000'                      DC
    XL2'3E00',CL5'AUR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'                      DC
    XL2'3F00',CL5'SUR',AL1(RR1),AL1(FP),  AL1(8),XL2'0000'
DC    XL2'4000',CL5'STH',AL1(RX1),AL1(0),AL1(0),XL2'0000'
DC    XL2'4100',CL5'LA',AL1(RX1),AL1(0),AL1(0),XL2'0000'
DC    XL2'4200',CL5'STC',AL1(RX1),AL1(0),AL1(0),XL2'000+ 0'
  DC    XL2'4300',CL5'IC',AL1(RX1),AL1(0),AL1(0),XL2'  0000'
    DC    XL2'4400',CL5'EX',AL1(RX1),AL1(0),AL1(0),XL2'8000'
    DC    XL2'4500',CL5'BAL',AL1(RX1),AL1(0),AL1(0),XL2'0000'
    DC    XL2'4600',CL5'BCT',AL1(RX1),AL1(0),AL1(0),XL2'0000'
      DC    XL2'4700',CL5'BC',AL1(RX2),AL1(0),AL1(0),XL2'0000'
      DC    XL2'4800',CL5'LH',AL1(RX1),AL1(0),AL1(0),XL2'0000'
      DC    XL2'4900',CL5'CH',AL1(RX1),AL1(0),AL1(2),XL2'0000'
        DC    XL2'4A00',CL5'AH',AL1(RX1),AL1(0),AL1(9),XL2'0000'
        DC    XL2'4B00',CL5'SH',AL1(RX1),AL1(0),AL1(9),XL2'0000'
        DC    XL2'4C00',CL5'MH',AL1(RX1),AL1(0),AL1(0),XL2'0000'
        DC    XL2'  4D00',CL5'BAS',AL1(RX1),AL1(0),AL1(0),XL2'0000'
          DC    XL2'4E00',CL5'CVD',AL1(RX1),AL1(0),AL1(0),XL2'0000'
          DC    XL2'4F00',CL5'CVB',AL1(RX1),AL1(0),AL1(0),XL2'0000'
          DC    XL2'5000',CL5'ST'  ,AL1(RX1),AL1(0),AL1(0),XL2'0000'
            DC    XL2'5100',CL5'LAE',AL1(RX1),AL1(0),AL1(0),XL2'0000'
            DC    XL2'5200',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
            DC    XL2'5300',XL5'00',AL1(0),AL1(0  ),AL1(0),XL2'0000'
              DC    XL2'5400',CL5'N',AL1(RX1),AL1(0),AL1(3),XL2'0000'
              DC    XL2'5500',CL5'CL',AL1(RX1),AL1(0),AL1(2),XL2'0000'
              DC    XL2'5600',CL5'O',AL1(RX1),AL1(0),AL1(3),XL2  '0000'
                DC    XL2'5700',CL5'X',AL1(RX1),AL1(0),AL1(3),XL2'0000'
                DC    XL2'5800',CL5'L',AL1(RX1),AL1(0),AL1(0),XL2'0000'
                DC    XL2'5900',CL5'C',AL1(RX1),AL1(0),AL1(2),XL2'0000'
                  DC    XL2'5A00',CL5'A',AL1(RX1),AL1(0),AL1(9),XL2'0000'
                  DC    XL2'5B00',CL5'S',AL1(RX1),AL1(0),AL1(9),XL2'0000'
                  DC    XL2'5C00',CL5'M',AL1(RX1),AL1(0),AL1(0),XL2'0002'
                    DC    XL2'5D00',CL5'D',AL1(RX1),AL1(0),AL1(0),XL2'0000'
                    DC    XL2'5E00',CL5'AL',AL1(RX1),AL1(0),AL1(1),XL2'0000'
                    DC    XL2'5F00',CL5'SL',AL1(RX1),AL1(0),AL1(1),XL2'0000'
                    DC    XL 2'6000',CL5'STD',AL1(RX1),AL1(FP),AL1(0),XL2'0000'
                      DC    XL2'6100',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
                      DC    XL2'6200',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
                         \         DC    XL2'6300',XL5'00',AL1(0),AL1(0),AL1(0)
,XL2'0000'                          DC    XL2'6400',XL5'00',AL1(0),AL1(0),AL1(0)
,XL2'0000'                          DC    XL2'6500',XL5'00',AL1(0),AL1(0),AL1(0)
,XL2'0000'                            DC    XL2'6600',XL5'00',AL1(0),AL1(0),AL1(
0),XL2'0000'                          DC    XL2'6700',CL5'MXD',AL1(RX1),AL1(FP),
AL1(0),XL2'0080'                      DC    XL2'6800',CL5'LD',AL1(RX1),AL1(FP),A
L1(0),XL2'0000'                       DC      XL2'6900',CL5'CD',AL1(RX1),AL1(FP)
,AL1(2),XL2'0000'                       DC    XL2'6A00',CL5'AD',AL1(RX1),AL1(FP)
,AL1(8),XL2'0000'                       DC    XL2'6B00',CL5'SD',AL1(RX1),AL1(FP)
,AL1(8),XL2'0000'                       DC    XL2'6C00',CL  5'MD',AL1(RX1),AL1(F
P),AL1(0),XL2'0180'                       DC    XL2'6D00',CL5'DD',AL1(RX1),AL1(F
P),AL1(0),XL2'0000'                       DC    XL2'6E00',CL5'AW',AL1(RX1),AL1(F
P),AL1(8),XL2'0000'                       DC    XL2'6F00',CL5'SW',AL1(RX1  ),AL1
(FP),AL1(8),XL2'0000'                       DC    XL2'7000',CL5'STE',AL1(RX1),AL
1(FP),AL1(0),XL2'0000'                      DC    XL2'7100',CL5'MS',AL1(RX1),AL1
(FP),AL1(0),XL2'0000'                       DC    XL2'7200',XL5'00',AL1(0),AL1(0
),AL1(0)  ,XL2'0000'                          DC    XL2'7300',XL5'00',AL1(0),AL1
(0),AL1(0),XL2'0000'                          DC    XL2'7400',XL5'00',AL1(0),AL1
(0),AL1(0),XL2'0000'                          DC    XL2'7500',XL5'00',AL1(0),AL1
(0),AL1(0),XL2'0000'                            DC    XL2'7600',XL5'00',AL1(0),A
L1(0),AL1(0),XL2'0000'                          DC    XL2'7700',XL5'00',AL1(0),A
L1(0),AL1(0),XL2'0000'                          DC    XL2'7800',CL5'LE',AL1(RX1)
,AL1(FP),AL1(0),XL2'0000'                         DC    XL2'7900',CL5'CE',AL1(RX
1),AL1(FP),AL1(2),XL2'0000'                       DC    XL2'7A00',CL5'AE',AL1(RX
1),AL1(FP),AL1(8),XL2'0000'                       DC    XL2'7B00',CL5'SE',AL1(RX
1),AL1(FP),AL1(8),XL2'0000'                       DC      XL2'7C00',CL5'MDE',AL1
(RX1),AL1(FP),AL1(0),XL2'0000'                      DC    XL2'7D00',CL5'DE',AL1(
RX1),AL1(FP),AL1(0),XL2'0000'                       DC    XL2'7E00',CL5'AU',AL1(
RX1),AL1(FP),AL1(8),XL2'0000'                       DC    XL2'7F00',  CL5'SU',AL
1(RX1),AL1(FP),AL1(8),XL2'0000'                       DC    XL2'8000',CL5'SSM',A
L1(S1),AL1(PR),AL1(0),XL2'0000'                       DC    XL2'8100',XL5'00',AL
1(0),AL1(0),AL1(0),XL2'0000'                          DC    XL2'8200',CL5'LPSW',
AL1  (S1),AL1(PR),AL1(1),XL2'0000'                      DC    XL2'8300',XL5'00',
AL1(0),AL1(0),AL1(0),XL2'0000'                          DC    XL2'8400',CL5'BRXH
',AL1(RSI1),AL1(0),AL1(0),XL2'0000'                     DC    XL2'8500',CL5'BRXL
E',AL1(RSI1),AL1(0  ),AL1(0),XL2'0000'                    DC    XL2'8600',CL5'BX
H',AL1(RS1),AL1(0),AL1(0),XL2'0000'                       DC    XL2'8700',CL5'BX
LE',AL1(RS1),AL1(0),AL1(0),XL2'0000'                      DC    XL2'8800',CL5'SR
L',AL1(RS2),AL1(0),AL1(0),XL2'002+ 0'                       DC    XL2'8900',CL5'
SLL',AL1(RS2),AL1(0),AL1(0),XL2  '0020'                       DC    XL2'8A00',CL
5'SRA',AL1(RS2),AL1(0),AL1(8),XL2'0020'                       DC    XL2'8B00',CL
5'SLA',AL1(RS2),AL1(0),AL1(9),XL2'0020'                       DC    XL2'8C00',CL
5'SRDL',AL1(RS2),AL1(0),AL1(0),XL2'0022'                        DC    XL2'8D00',
CL5'SLDL',AL1(RS2),AL1(0),AL1(0),XL2'0022'                      DC    XL2'8E00',
CL5'SRDA',AL1(RS2),AL1(0),AL1(8),XL2'0022'                      DC    XL2'8F00',
CL5'SLDA',AL1(RS2),AL1(0),AL1(9),XL2'0022'                        DC    XL2'9000
',CL5'STM',AL1(RS1),AL1(0),AL1(0),XL2'0000'                       DC    XL2'9100
',CL5'TM',AL1(SI1),AL1(0),AL1(11),XL2'0000'                       DC    XL2'9200
',CL5'MVI',AL1(SI1),AL1(0),AL1(0),XL2'0000'                       DC    XL2'  93
00',CL5'TS',AL1(S1),AL1(0),AL1(1),XL2'0000'                         DC    XL2'94
00',CL5'NI',AL1(SI1),AL1(0),AL1(3),XL2'0000'                        DC    XL2'95
00',CL5'CLI',AL1(SI1),AL1(0),AL1(2),XL2'0000'                       DC    XL2'96
00',CL5'OI'  ,AL1(SI1),AL1(0),AL1(3),XL2'0000'                        DC    XL2'
9700',CL5'XI',AL1(SI1),AL1(0),AL1(3),XL2'0000'                        DC    XL2'
9800',CL5'LM',AL1(RS1),AL1(0),AL1(0),XL2'0000'                        DC    XL2'
9900',CL5'TRACE',AL1(RS1),  AL1(PR),AL1(0),XL2'0000'                    DC    XL
2'9A00',CL5'LAM',AL1(RS1),AL1(0),AL1(0),XL2'0000'                       DC    XL
2'9B00',CL5'STAM',AL1(RS1),AL1(0),AL1(0),XL2'0000'                      DC    XL
2'9C00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'  0000'                          DC
XL2'9D00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'                          DC
XL2'9E00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'                          DC
XL2'9F00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'                            DC
  XL2'A000',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'                          DC
  XL2'A100',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'                          DC
  XL2'A200',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'                            DC
    XL2'A300',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'                          DC
    XL2'A400',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'                          DC
    XL2'A500',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'                          DC
    XL 2'A600',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
DC    XL2'A700',CL1'2',AL4(OCTWOA7),XL5'0000000000'
DC    XL2'A800',CL5'MVCLE',AL1(RS1),AL1(0),AL1(1),XL2'800A'                   
    \         DC    XL2'A900',CL5'CLCLE',AL1(RS1),AL1(0),AL1(13),XL2'800A'
              DC    XL2'AA00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
              DC    XL2'AB00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
                DC    XL2'AC00',CL5'STNSM',AL1(SI1),AL1(PR),AL1(0),XL2'0000'
                DC    XL2'AD00',CL5'STOSM',AL1(SI1),AL1(PR),AL1(0),XL2'0000'
                DC    XL2'AE00',CL5'SIGP',AL1(RS1),AL1(PR),AL1(1),XL2'0000'
                DC      XL2'AF00',CL5'MC',AL1(SI1),AL1(0),AL1(0),XL2'8000'
                  DC    XL2'B000',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
                  DC    XL2'B100',CL5'LRA',AL1(RX1),AL1(PR),AL1(1),XL2'0000'
                  DC    XL2'B200',CL  1'2',AL4(OCTWOB2),XL5'0000000000'
                    DC    XL2'B300',CL1'2',AL4(OCTWOB3),XL5'0000000000'
                    DC    XL2'B400',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
                    DC    XL2'B500',XL5'00',AL1(0),  AL1(0),AL1(0),XL2'0000'
                      DC    XL2'B600',CL5'STCTL',AL1(RS1),AL1(PR),AL1(0),XL2'000
0'                    DC    XL2'B700',CL5'LCTL',AL1(RS1),AL1(PR),AL1(0),XL2'0000
'                     DC    XL2'B800',XL5'00',AL1(0),AL1(0),AL1(0)  ,XL2'0000'
                        DC    XL2'B900',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
                        DC    XL2'BA00',CL5'CS',AL1(RS1),AL1(0),AL1(1),XL2'0000'
                        DC    XL2'BB00',CL5'CDS',AL1(RS1),AL1(0),AL1(1),XL2'000A
'                         DC    XL2'BC00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
                          DC    XL2'BD00',CL5'CLM',AL1(RS2),AL1(0),AL1(2),XL2'00
00'                       DC    XL2'BE00',CL5'STCM',AL1(RS3),AL1(0),AL1(0),XL2'0
000'                        DC    XL2'BF00',CL5'ICM',AL1(RS3),AL1(0),AL1(3),XL2'
0000'                       DC    XL2'C000',XL5'00',AL1(0),AL1(0),AL1(0),XL2'000
0'                          DC    XL2'C100',XL5'00',AL1(0),AL1(0),AL1(0),XL2'000
0'                          DC      XL2'C200',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0
000'                          DC    XL2'C300',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0
000'                          DC    XL2'C400',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0
000'                          DC    XL2'C500',  XL5'00',AL1(0),AL1(0),AL1(0),XL2
'0000'                          DC    XL2'C600',XL5'00',AL1(0),AL1(0),AL1(0),XL2
'0000'                          DC    XL2'C700',XL5'00',AL1(0),AL1(0),AL1(0),XL2
'0000'                          DC    XL2'C800',XL5'00',AL1(0  ),AL1(0),AL1(0),X
L2'0000'                          DC    XL2'C900',XL5'00',AL1(0),AL1(0),AL1(0),X
L2'0000'                          DC    XL2'CA00',XL5'00',AL1(0),AL1(0),AL1(0),X
L2'0000'                          DC    XL2'CB00',XL5'00',AL1(0),AL1(0),AL1(  0)
,XL2'0000'                          DC    XL2'CC00',XL5'00',AL1(0),AL1(0),AL1(0)
,XL2'0000'                          DC    XL2'CD00',XL5'00',AL1(0),AL1(0),AL1(0)
,XL2'0000'                          DC    XL2'CE00',XL5'00',AL1(0),AL1(0),AL1(0)
,XL2'0000' +                          DC    XL2'CF00',XL5'00',AL1(0),AL1(0),AL1(
0),XL2'00  00'                          DC    XL2'D000',XL5'00',AL1(0),AL1(0),AL
1(0),XL2'0000'                          DC    XL2'D100',CL5'MVN',AL1(SS1),AL1(0)
,AL1(0),XL2'0000'                       DC    XL2'D200',CL5'MVC',AL1(SS1),AL1(0)
,AL1(0),XL2'0000'                         DC    XL2'D300',CL5'MVZ',AL1(SS1),AL1(
0),AL1(0),XL2'0000'                       DC    XL2'D400',CL5'NC',AL1(SS1),AL1(0
),AL1(3),XL2'0000'                        DC    XL2'D500',CL5'CLC',AL1(SS1),AL1(
0),AL1(2),XL2'0000'                         DC    XL2'D600',CL5'OC',AL1(SS1),AL1
(0),AL1(3),XL2'0000'                        DC    XL2'D700',CL5'XC',AL1(SS1),AL1
(0),AL1(3),XL2'0000'                        DC    XL2'D800',XL5'00',AL1(0),AL1(0
),AL1(0),XL2'0000'                          DC    XL2'  D900',CL5'MVCK',AL1(SS4)
,AL1(PR),AL1(1),XL2'0000'                     DC    XL2'DA00',CL5'MVCP',AL1(SS4)
,AL1(PR),AL1(1),XL2'0000'                     DC    XL2'DB00',CL5'MVCS',AL1(SS4)
,AL1(PR),AL1(1),XL2'0000'                     DC    XL2'DC00',CL5'TR'  ,AL1(SS1)
,AL1(0),AL1(0),XL2'0000'                        DC    XL2'DD00',CL5'TRT',AL1(SS1
),AL1(0),AL1(3),XL2'0000'                       DC    XL2'DE00',CL5'ED',AL1(SS1)
,AL1(0),AL1(8),XL2'0000'                        DC    XL2'DF00',CL5'EDMK',AL1(SS
1),A  L1(0),AL1(8),XL2'0000'                      DC    XL2'E000',XL5'00',AL1(0)
,AL1(0),AL1(0),XL2'0000'                          DC    XL2'E100',XL5'00',AL1(0)
,AL1(0),AL1(0),XL2'0000'                          DC    XL2'E200',XL5'00',AL1(0)
,AL1(0),AL1(0),XL2'  0000'                          DC    XL2'E300',XL5'00',AL1(
0),AL1(0),AL1(0),XL2'0000'                          DC    XL2'E400',XL5'00',AL1(
0),AL1(0),AL1(0),XL2'0000'                          DC    XL2'E500',CL1'2',AL4(O
CTWOE5),XL5'0000000000'                               DC    XL2'E600',XL5'00',AL
1(0),AL1(0),AL1(0),XL2'0000'                          DC    XL2'E700',XL5'00',AL
1(0),AL1(0),AL1(0),XL2'0000'                          DC    XL2'E800',CL5'MVCIN'
,AL1(SS1),AL1(0),AL1(0),XL2'0000'                       DC    XL2'E900',XL5'00',
AL1(0),AL1(0),AL1(0),XL2'0000'                          DC    XL2'EA00',XL5'00',
AL1(0),AL1(0),AL1(0),XL2'0000'                          DC    XL2'EB00',XL5'00',
AL1(0),AL1(0),AL1(0),XL2'0000'                          DC    XL 2'EC00',XL5'00
',AL1(0),AL1(0),AL1(0),XL2'0000'                          DC    XL2'ED00',CL1'2'
,AL4(OCTWOED),XL5'0000000000'                             DC    XL2'EE00',CL5'PL
O',AL1(SS3),AL1(0),AL1(1),XL2'0000'                          \         DC    XL
2'EF00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'                          DC    XL
2'F000',CL5'SRP',AL1(SS5),AL1(0),AL1(9),XL2'0000'                       DC    XL
2'F100',CL5'MVO',AL1(SS2),AL1(0),AL1(0),XL2'0000'                         DC
XL2'F200',CL5'PACK',AL1(SS2),AL1(0),AL1(0),XL2'0000'                      DC
XL2'F300',CL5'UNPK',AL1(SS2),AL1(0),AL1(0),XL2'0000'                      DC
XL2'F400',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'                          DC
  XL2'F500',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'                          DC
  XL2'F600',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'                          DC
  XL2'F700',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'                          DC
  XL2'F800',CL  5'ZAP',AL1(SS2),AL1(0),AL1(9),XL2'0000'                       DC
    XL2'F900',CL5'CP',AL1(SS2),AL1(0),AL1(2),XL2'0000'                        DC
    XL2'FA00',CL5'AP',AL1(SS2),AL1(0),AL1(9),XL2'0000'                        DC
    XL2'FB00',CL5'SP',AL1(SS2  ),AL1(0),AL1(9),XL2'0000'
DC    XL2'FC00',CL5'MP',AL1(SS2),AL1(0),AL1(0),XL2'0000'
DC    XL2'FD00',CL5'DP',AL1(SS2),AL1(0),AL1(0),XL2'0000'
DC    XL2'FE00',XL5'00',AL1(0),AL1(0),AL1(0)  ,XL2'0000'
  DC    XL2'FF00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'
  DC    12X'FF'              END OF TABLE                                *******
***********************************************************  *****         *TABL
ES OF TWO-BYTE INSTRUCTIONS WHOSE FIRST BYTE IS 01               *         *****
******************************************************************
    DS    0F                                                                 OCT
WO01  DS    0XL12
      DC    XL2'0101',CL5'PR',AL1(E1),AL1(0),AL1(1),XL2'0000'
      DC    XL2'0102',CL5'UPT',AL1(E1),AL1(0),AL1(4),XL2'0000'
      DC      XL2'0107',CL5'SCKPF',AL1(E1),AL1(PR),AL1(0),XL2'0000'
        DC    XL2'01FF',CL5'TRAP2',AL1(E1),AL1(0),AL1(0),XL2'0000'
        DC    12X'FF'              END OF TABLE                                *
************************  **********************************************
 *TABLES OF 1.5-BYTE INSTRUCTIONS WHOSE FIRST BYTE IS A7               *
 ***********************************************************************
          DS    0F
   OCTWOA7  DS    0XL12
            DC    XL2'A700',CL5'TMH',AL1(RI1),AL1(0),AL1(12),XL2'0000'
            DC    XL2'A710',CL5'TML',AL1(RI1),AL1(0),A  L1(12),XL2'0000'
              DC    XL2'A740',CL5'BRC',AL1(RI1),AL1(0),AL1(0),XL2'0000'
              DC    XL2'A750',CL5'BRAS',AL1(RI1),AL1(0),AL1(0),XL2'0000'
              DC    XL2'A760',CL5'BRCT',AL1(RI1),AL1(0),AL1(0),XL2'00+ 00'
                DC    XL2'A780',CL5'LHI',AL1(RI1),AL1(0),AL1(0),XL2  '0000'
                  DC    XL2'A7A0',CL5'AHI',AL1(RI1),AL1(0),AL1(9),XL2'0000'
                  DC    XL2'A7C0',CL5'MHI',AL1(RI1),AL1(0),AL1(0),XL2'0000'
                  DC    XL2'A7E0',CL5'CHI',AL1(RI1),AL1(0),AL1(2),XL2'0000'
                    DC    12X'FF'              END OF TABLE
           *********************************************************************
**         *TABLES OF TWO-BYTE INSTRUCTIONS WHOSE FIRST BYTE IS B2
 *         ******  *************************************************************
****                  DS    0F
             OCTWOB2  DS    0XL12
                      DC    XL2'  B202',CL5'STIDP',AL1(S3),AL1(PR),AL1(0),XL2'00
00'                     DC    XL2'B204',CL5'SCK',AL1(S3),AL1(PR),AL1(1),XL2'0000
'                       DC    XL2'B205',CL5'STCK',AL1(S3),AL1(0),AL1(1),XL2'0000
'                       DC    XL2'B206',CL5'SCK  C',AL1(S3),AL1(PR),AL1(0),XL2'0
000'                      DC    XL2'B207',CL5'STCKC',AL1(S3),AL1(PR),AL1(0),XL2'
0000'                     DC    XL2'B208',CL5'SPT',AL1(S3),AL1(PR),AL1(0),XL2'00
00'                       DC    XL2'B209',CL5'STPT',AL1(S3),AL  1(PR),AL1(0),XL2
'0000'                      DC    XL2'B20A',CL5'SPKA',AL1(S3),AL1(PR),AL1(0),XL2
'0000'                      DC    XL2'B20B',CL5'IPK',AL1(S2),AL1(PR),AL1(0),XL2'
0000'                       DC    XL2'B20D',CL5'PTLB',AL1(S2),AL1(PR),AL1(0),  X
L2'0000'                      DC    XL2'B210',CL5'SPX',AL1(S3),AL1(PR),AL1(0),XL
2'0000'                       DC    XL2'B211',CL5'STPX',AL1(S3),AL1(PR),AL1(0),X
L2'0000'                      DC    XL2'B212',CL5'STAP',AL1(S3),AL1(PR),AL1(0),X
L2'0000'                        DC    XL2'B218',CL5'PC',AL1(S3),AL1(PR),AL1(0),X
L2'0000'                        DC    XL2'B219',CL5'SAC',AL1(S3),AL1(PR),AL1(0),
XL2'0000'                       DC    XL2'B21A',CL5'CFC',AL1(S3),AL1(0),AL1(4),X
L2'8000'                          DC    XL2'B221',CL5'IPTE',AL1(RRE1),AL1(PR),AL
1(0),XL2'0000'                    DC    XL2'B222',CL5'IPM',AL1(RRE2),AL1(0),AL1(
0),XL2'0000'                      DC    XL2'B223',CL5'IVSK',AL1(RRE1),AL1(PR),AL
1(0),XL2'0000'                    DC    XL 2'B224',CL5'IAC',AL1(RRE2),AL1(PR),A
L1(1),XL2'0000'                     DC    XL2'B225',CL5'SSAR',AL1(RRE2),AL1(0),A
L1(0),XL2'0000'                     DC    XL2'B226',CL5'EPAR',AL1(RRE2),AL1(PR),
AL1(0),XL2'0000'                       \         DC    XL2'B227',CL5'ESAR',AL1(
RRE2),AL1(PR),AL1(0),XL2'0000'                    DC    XL2'B228',CL5'PT',AL1(RR
E1),AL1(PR),AL1(0),XL2'0000'                      DC    XL2'B229',CL5'ISKE',AL1(
RRE1),AL1(PR),AL1(0),XL2'0000'                      DC    XL2'B22A',CL5'RRBE',AL
1(RRE1),AL1(PR),AL1(1),XL2'0000'                    DC    XL2'B22B',CL5'SSKE',AL
1(RRE1),AL1(PR),AL1(0),XL2'0000'                    DC    XL2'B22C',CL5'TB',AL1(
RRE1),AL1(PR),AL1(1),XL2'0000'                      DC      XL2'B22D',CL5'DXR',A
L1(RRE1),AL1(FP),AL1(0),XL2'0180'                     DC    XL2'B230',CL5'CSCH',
AL1(S2),AL1(PR),AL1(1),XL2'0000'                      DC    XL2'B231',CL5'HSCH',
AL1(S2),AL1(PR),AL1(1),XL2'0000'                      DC    XL2'B232',CL  5'MSCH
',AL1(S3),AL1(PR),AL1(1),XL2'0000'                      DC    XL2'B233',CL5'SSCH
',AL1(S3),AL1(PR),AL1(1),XL2'0000'                      DC    XL2'B234',CL5'STSC
H',AL1(S3),AL1(PR),AL1(1),XL2'0000'                     DC    XL2'B235',CL5'TSCH
',AL1(S  3),AL1(PR),AL1(1),XL2'0000'                      DC    XL2'B236',CL5'TP
I',AL1(S3),AL1(PR),AL1(1),XL2'0000'                       DC    XL2'B237',CL5'SA
L',AL1(S2),AL1(PR),AL1(0),XL2'0000'                       DC    XL2'B238',CL5'RS
CH',AL1(S2),AL1(PR),AL  1(1),XL2'0000'                      DC    XL2'B239',CL5'
STCRW',AL1(S3),AL1(PR),AL1(1),XL2'0000'                     DC    XL2'B23A',CL5'
STCPS',AL1(S3),AL1(PR),AL1(0),XL2'0000'                     DC    XL2'B23B',CL5'
RCHP',AL1(S2),AL1(PR),AL1(1),XL2'0000  '                      DC    XL2'B23C',CL
5'SCHM',AL1(S2),AL1(PR),AL1(0),XL2'0000'                      DC    XL2'B240',CL
5'BAKR',AL1(RRE1),AL1(0),AL1(0),XL2'0000'                     DC    XL2'B241',CL
5'CKSM',AL1(RRE1),AL1(0),AL1(1),XL2'8014'                       DC    XL2'B244',
CL5'SQDR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'                    DC    XL2'B245',
CL5'SQER',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'                    DC    XL2'B246',
CL5'STURA',AL1(RRE1),AL1(PR),AL1(0),XL2'0000'                   DC      XL2'B247
',CL5'MSTA',AL1(RRE2),AL1(0),AL1(0),XL2'0002'                     DC    XL2'B248
',CL5'PALB',AL1(RRE3),AL1(PR),AL1(0),XL2'0000'                    DC    XL2'B249
',CL5'EREG',AL1(RRE1),AL1(0),AL1(0),XL2'0000'                     DC    XL2'B24A
',  CL5'ESTA',AL1(RRE1),AL1(0),AL1(1),XL2'0002'                     DC    XL2'B2
4B',CL5'LURA',AL1(RRE1),AL1(PR),AL1(0),XL2'0000'                    DC    XL2'B2
4C',CL5'TAR',AL1(RRE1),AL1(0),AL1(1),XL2'0000'                      DC    XL2'B2
4D',CL5'CPYA',AL1  (RRE1),AL1(0),AL1(0),XL2'0000'                     DC    XL2'
B24E',CL5'SAR',AL1(RRE1),AL1(0),AL1(0),XL2'0000'                      DC    XL2'
B24F',CL5'EAR',AL1(RRE1),AL1(0),AL1(0),XL2'0000'                      DC    XL2'
B252',CL5'MSR',AL1(RRE1),AL1(0),  AL1(0),XL2'0000'                      DC    XL
2'B254',CL5'MVPG',AL1(RRE1),AL1(0),AL1(1),XL2'0010'                     DC    XL
2'B255',CL5'MVST',AL1(RRE1),AL1(0),AL1(1),XL2'0000'                     DC    XL
2'B257',CL5'CUSE',AL1(RRE1),AL1(0),AL1(4),XL2'0+ 006'                     DC
XL2'B258',CL5'BSG',AL1(RRE1),AL1(0),AL1(0),XL  2'0000'                      DC
  XL2'B25A',CL5'BSA',AL1(RRE1),AL1(PR),AL1(0),XL2'0000'                     DC
  XL2'B25D',CL5'CLST',AL1(RRE1),AL1(0),AL1(1),XL2'0000'                     DC
  XL2'B25E',CL5'SRST',AL1(RRE1),AL1(0),AL1(1),XL2'0000'                       DC
    XL2'B277',CL5'RP',AL1(S3),AL1(PR),AL1(1),XL2'0000'                        DC
    XL2'B278',CL5'STCKE',AL1(S3),AL1(0),AL1(1),XL2'0000'                      DC
    XL2'B279',CL5'SACF',AL1(S3),AL1(PR),AL1(0),XL2'0000'
DC    XL2'B27D',CL5'STSI',AL1(S3),AL1(PR),AL1(1),XL2'0000'
DC    XL2'B299',CL5'SRNM',AL1(S3),AL1(FP),AL1(0),XL2'0000'
DC    XL2'B29C',CL5'STFPC',AL1(S3),AL1(FP),AL1(0),XL2'0000'
DC    XL2'  B29D',CL5'LFPC',AL1(S3),AL1(FP),AL1(0),XL2'0000'
  DC    XL2'B2A5',CL5'TRE',AL1(RRE1),AL1(0),AL1(1),XL2'8012'
  DC    XL2'B2A6',CL5'CUUTF',AL1(RRE1),AL1(0),AL1(1),XL2'0016'
  DC    XL2'B2A7',CL5'CUT  FU',AL1(RRE1),AL1(0),AL1(1),XL2'0000'
    DC    XL2'B2FF',CL5'TRAP4',AL1(S3),AL1(0),AL1(0),XL2'0000'
    DC    12X'FF'              END OF TABLE                                *****
****************************************  **************************         *TA
BLES OF TWO-BYTE INSTRUCTIONS WHOSE FIRST BYTE IS B3               *         ***
********************************************************************
      DS    0F                                                                 O
CTWOB3  DS    0XL12
        DC    XL2'B300',CL5'LPEBR',AL1(RRE1),AL1(FP),AL1(10),XL2'0000'
        DC    XL2'B301',CL5'LNEBR',AL1(RRE1),AL1(FP),AL1(7),XL2'0000'
          DC    XL2'B302',CL5'LTEBR',AL1(RRE1),AL1(FP),AL1(14),XL2'0000'
          DC    XL2'B303',CL5'LCEBR',AL1(RRE1),AL1(FP),AL1(14),XL2'0000'
          DC    XL2'B304',CL5'LDEBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'
            DC    XL2'B305',CL5'LXDBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0080'
            DC    XL2'B306',CL5'LXEBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0080'
            DC    XL2'B307',CL5'MXDBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0080'
            DC    XL 2'B308',CL5'KEBR',AL1(RRE1),AL1(FP),AL1(13),XL2'0000'
              DC    XL2'B309',CL5'CEBR',AL1(RRE1),AL1(FP),AL1(13),XL2'0000'
              DC    XL2'B30A',CL5'AEBR',AL1(RRE1),AL1(FP),AL1(14),XL2'0000'
                 \         DC    XL2'B30B',CL5'SEBR',AL1(RRE1),AL1(FP),AL1(14),
XL2'0000'                   DC    XL2'B30C',CL5'MDEBR',AL1(RRE1),AL1(FP),AL1(0),
XL2'0000'                   DC    XL2'B30D',CL5'DEBR',AL1(RRE1),AL1(FP),AL1(0),X
L2'0000'                      DC    XL2'B30E',CL5'MAEBR',AL1(RRF1),AL1(FP),AL1(0
),XL2'0000'                   DC    XL2'B30F',CL5'MSEBR',AL1(RRF1),AL1(FP),AL1(0
),XL2'0000'                   DC    XL2'B310',CL5'LPDBR',AL1(RRE1),AL1(FP),AL1(1
0),XL2'0000'                  DC      XL2'B311',CL5'LNDBR',AL1(RRE1),AL1(FP),AL1
(7),XL2'0000'                   DC    XL2'B312',CL5'LTDBR',AL1(RRE1),AL1(FP),AL1
(14),XL2'0000'                  DC    XL2'B313',CL5'LCDBR',AL1(RRE1),AL1(FP),AL1
(14),XL2'0000'                  DC    XL2'B314',CL  5'SQEBR',AL1(RRE1),AL1(FP),A
L1(0),XL2'0000'                   DC    XL2'B315',CL5'SQDBR',AL1(RRE1),AL1(FP),A
L1(0),XL2'0000'                   DC    XL2'B316',CL5'SQXBR',AL1(RRE1),AL1(FP),A
L1(0),XL2'0180'                   DC    XL2'B317',CL5'MEEBR',AL1(  RRE1),AL1(FP)
,AL1(0),XL2'0000'                   DC    XL2'B318',CL5'KDBR',AL1(RRE1),AL1(FP),
AL1(13),XL2'0000'                   DC    XL2'B319',CL5'CDBR',AL1(RRE1),AL1(FP),
AL1(13),XL2'0000'                   DC    XL2'B31A',CL5'ADBR',AL1(RRE1),AL1(FP),
  AL1(14),XL2'0000'                   DC    XL2'B31B',CL5'SDBR',AL1(RRE1),AL1(FP
),AL1(14),XL2'0000'                   DC    XL2'B31C',CL5'MDBR',AL1(RRE1),AL1(FP
),AL1(0),XL2'0000'                    DC    XL2'B31D',CL5'DDBR',AL1(RRE1),AL1(FP
),AL1(0),XL2'00  00'                    DC    XL2'B31E',CL5'MADBR',AL1(RRF1),AL1
(FP),AL1(0),XL2'0000'                   DC    XL2'B31F',CL5'MSDBR',AL1(RRF1),AL1
(FP),AL1(0),XL2'0000'                   DC    XL2'B324',CL5'LDER',AL1(RRE1),AL1(
FP),AL1(0),XL2'0000'                      DC    XL2'B325',CL5'LXDR',AL1(RRE1),AL
1(FP),AL1(0),XL2'0080'                    DC    XL2'B326',CL5'LXER',AL1(RRE1),AL
1(FP),AL1(0),XL2'0080'                    DC    XL2'B336',CL5'SQXR',AL1(RRE1),AL
1(FP),AL1(0),XL2'0180'                    DC      XL2'B337',CL5'MEER',AL1(RRE1),
AL1(FP),AL1(0),XL2'0000'                    DC    XL2'B340',CL5'LPXBR',AL1(RRE1)
,AL1(FP),AL1(10),XL2'0180'                  DC    XL2'B341',CL5'LNXBR',AL1(RRE1)
,AL1(FP),AL1(7),XL2'0180'                   DC    XL2'B342',  CL5'LTXBR',AL1(RRE
1),AL1(FP),AL1(14),XL2'0180'                  DC    XL2'B343',CL5'LCXBR',AL1(RRE
1),AL1(FP),AL1(14),XL2'0180'                  DC    XL2'B344',CL5'LEDBR',AL1(RRE
1),AL1(FP),AL1(0),XL2'0000'                   DC    XL2'B345',CL5'LDXBR',AL  1(R
RE1),AL1(FP),AL1(0),XL2'0180'                   DC    XL2'B346',CL5'LEXBR',AL1(R
RE1),AL1(FP),AL1(0),XL2'0180'                   DC    XL2'B347',CL5'FIXBR',AL1(R
RF2),AL1(FP),AL1(0),XL2'01C0'                   DC    XL2'B348',CL5'KXBR',AL1(RR
E1),AL1(FP  ),AL1(13),XL2'0180'                   DC    XL2'B349',CL5'CXBR',AL1(
RRE1),AL1(FP),AL1(13),XL2'0180'                   DC    XL2'B34A',CL5'AXBR',AL1(
RRE1),AL1(FP),AL1(14),XL2'0180'                   DC    XL2'B34B',CL5'SXBR',AL1(
RRE1),AL1(FP),AL1(14),XL2+ '0180'                   DC    XL2'B34C',CL5'MXBR',AL
1(RRE1),AL1(FP),AL1(0),  XL2'0180'                    DC    XL2'B34D',CL5'DXBR',
AL1(RRE1),AL1(FP),AL1(0),XL2'0180'                    DC    XL2'B350',CL5'TBEDR'
,AL1(RRF2),AL1(FP),AL1(14),XL2'0040'                  DC    XL2'B351',CL5'TBDR',
AL1(RRF2),AL1(FP),AL1(14),XL2'0040'                     DC    XL2'B353',CL5'DIEB
R',AL1(RRF3),AL1(FP),AL1(1),XL2'8040'                   DC    XL2'B357',CL5'FIEB
R',AL1(RRF2),AL1(FP),AL1(0),XL2'0040'                   DC    XL2'B358',CL5'THDE
R',AL1(RRE1),AL1(FP),AL1(14),XL2'0000'                    DC    XL2'B359',CL5'TH
DR',AL1(RRE1),AL1(FP),AL1(14),XL2'0000'                   DC    XL2'B35B',CL5'DI
DBR',AL1(RRF3),AL1(FP),AL1(1),XL2'8040'                   DC    XL2'B35F',CL5'FI
DBR',AL1(RRF2),AL1(FP),AL1(0),XL2'0040'                   DC    XL2'  B360',CL5'
LPXR',AL1(RRE1),AL1(FP),AL1(10),XL2'0180'                   DC    XL2'B361',CL5'
LNXR',AL1(RRE1),AL1(FP),AL1(7),XL2'0180'                    DC    XL2'B362',CL5'
LTXR',AL1(RRE1),AL1(FP),AL1(8),XL2'0180'                    DC    XL2'B363',CL5'
LCX  R',AL1(RRE1),AL1(FP),AL1(8),XL2'0180'                    DC    XL2'B365',CL
5'LXR',AL1(RRE1),AL1(FP),AL1(0),XL2'0180'                     DC    XL2'B366',CL
5'LEXR',AL1(RRE1),AL1(FP),AL1(0),XL2'0100'                    DC    XL2'B367',CL
5'FIXR',AL1(RRE1),  AL1(FP),AL1(0),XL2'0180'                    DC    XL2'B369',
CL5'CXR',AL1(RRE1),AL1(FP),AL1(2),XL2'0180'                     DC    XL2'B374',
CL5'LZER',AL1(RRE2),AL1(FP),AL1(0),XL2'0000'                    DC    XL2'B375',
CL5'LZDR',AL1(RRE2),AL1(FP),AL1(0  ),XL2'0000'                    DC    XL2'B376
',CL5'LZXR',AL1(RRE2),AL1(FP),AL1(0),XL2'0080'                    DC    XL2'B377
',CL5'FIER',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'                    DC    XL2'B37F
',CL5'FIDR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'                      DC    XL2'B3
84',CL5'SFPC',AL1(RRE2),AL1(FP),AL1(0),XL2'0000'                    DC    XL2'B3
8C',CL5'EFPC',AL1(RRE2),AL1(FP),AL1(0),XL2'0000'                    DC    XL2'B3
94',CL5'CEFBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'                     DC    XL2'
B395',CL5'CDFBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'                   DC    XL2'
B396',CL5'CXFBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0080'                   DC    XL2'
B398',CL5'CFEBR',AL1(RRF2),AL1(FP),AL1(14),XL2'0040'                  DC    XL
2'B399',CL5'CFDBR',AL1(RRF2),AL1(FP),AL1(14),XL2'0040'                  DC    XL
2'B39A',CL5'CFXBR',AL1(RRF2),AL1(FP),AL1(14),XL2'0100'                  DC    XL
2'B3B4',CL5'CEFR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'                       \
      DC    XL2'B3B5',CL5'CDFR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'
      DC    XL2'B3B6',CL5'CXFR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'
      DC    XL2'B3B8',CL5'CFER',AL1(RRF2),AL1(FP),AL1(14),XL2'0040'
        DC    XL2'B3B9',CL5'CFDR',AL1(RRF2),AL1(FP),AL1(14),XL2'0040'
        DC    XL2'B3BA',CL5'CFXR',AL1(RRF2),AL1(FP),AL1(14),XL2'0140'
        DC    12X'FF'              END OF TABLE                                *
*************  *********************************************************
 *TABLES OF TWO-BYTE INSTRUCTIONS WHOSE FIRST BYTE IS E5               *
 ***********************************************************************
          DS    0F
   OCTWOE5  DS    0XL12
            DC    XL2'E500',CL5'LASP',AL1(SSE1),AL1(PR),AL1(1),XL2'0000'
            DC    XL2'E501',CL5'TPROT',AL1(  SSE1),AL1(PR),AL1(1),XL2'0000'
              DC    XL2'E50E',CL5'MVCSK',AL1(SSE1),AL1(PR),AL1(0),XL2'0000'
              DC    XL2'E50F',CL5'MVCDK',AL1(SSE1),AL1(PR),AL1(0),XL2'0000'
              DC    12X'FF'              END OF TABLE
       ***********************************************************************
       *TABLES OF TWO-BYTE INSTRUCTIONS WHOSE FIRST BYTE IS ED               *
       ******************************************************************  *****
                  DS    0F
         OCTWOED  DS    0XL12
                  DC    XL2'ED04',CL5'LDEB',AL1(RXE1),AL1(FP),AL1(0),XL2'0000'
                    DC    XL2'ED05',CL5'LXDB',AL1(RXE1),AL1(FP),AL1(0),XL2'0080'
                    DC    XL2'ED06',CL5'LXEB',AL1(RXE1),AL1(FP),AL1(0),XL2'0080'
                    DC    XL2'ED07',CL5'MXDB',AL1(RXE1),AL1(FP),AL1(0),XL2'0080'
                    DC      XL2'ED08',CL5'KEB',AL1(RXE1),AL1(FP),AL1(13),XL2'000
0'                    DC    XL2'ED09',CL5'CEB',AL1(RXE1),AL1(FP),AL1(13),XL2'000
0'                    DC    XL2'ED0A',CL5'AEB',AL1(RXE1),AL1(FP),AL1(14),XL2'000
0'                    DC    XL2'ED0B',  CL5'SEB',AL1(RXE1),AL1(FP),AL1(14),XL2'0
000'                    DC    XL2'ED0C',CL5'MDEB',AL1(RXE1),AL1(FP),AL1(0),XL2'0
000'                    DC    XL2'ED0D',CL5'DEB',AL1(RXE1),AL1(FP),AL1(0),XL2'00
00'                     DC    XL2'ED0E',CL5'MAEB',AL1  (RXF1),AL1(FP),AL1(0),XL2
'0000'                    DC    XL2'ED0F',CL5'MSEB',AL1(RXF1),AL1(FP),AL1(0),XL2
'0000'                    DC    XL2'ED10',CL5'TCEB',AL1(RXE1),AL1(FP),AL1(1),XL2
'0000'                    DC    XL2'ED11',CL5'TCDB',AL1(RXE1),AL1(FP  ),AL1(1),X
L2'0000'                    DC    XL2'ED12',CL5'TCXB',AL1(RXE1),AL1(FP),AL1(1),X
L2'0080'                    DC    XL2'ED14',CL5'SQEB',AL1(RXE1),AL1(FP),AL1(0),X
L2'0000'                    DC    XL2'ED15',CL5'SQDB',AL1(RXE1),AL1(FP),AL1(0),X
L2'+ 0000'                    DC    XL2'ED17',CL5'MEEB',AL1(RXE1),AL1(FP),AL1(0)
,  XL2'0000'                    DC    XL2'ED18',CL5'KDB',AL1(RXE1),AL1(FP),AL1(1
3),XL2'0000'                    DC    XL2'ED19',CL5'CDB',AL1(RXE1),AL1(FP),AL1(1
3),XL2'0000'                    DC    XL2'ED1A',CL5'ADB',AL1(RXE1),AL1(FP),AL1(1
4),XL2'0000'                      DC    XL2'ED1B',CL5'SDB',AL1(RXE1),AL1(FP),AL1
(14),XL2'0000'                    DC    XL2'ED1C',CL5'MDB',AL1(RXE1),AL1(FP),AL1
(0),XL2'0000'                     DC    XL2'ED1D',CL5'DDB',AL1(RXE1),AL1(FP),AL1
(0),XL2'0000'                       DC    XL2'ED1E',CL5'MADB',AL1(RXF1),AL1(FP),
AL1(0),XL2'0000'                    DC    XL2'ED1F',CL5'MSDB',AL1(RXF1),AL1(FP),
AL1(0),XL2'0000'                    DC    XL2'ED24',CL5'LDE',AL1(RXE1),AL1(FP),A
L1(0),XL2'0000'                     DC    XL2'  ED25',CL5'LXD',AL1(RXE1),AL1(FP)
,AL1(0),XL2'0080'                     DC    XL2'ED26',CL5'LXE',AL1(RXE1),AL1(FP)
,AL1(0),XL2'0080'                     DC    XL2'ED34',CL5'SQE',AL1(RXE1),AL1(FP)
,AL1(0),XL2'0000'                     DC    XL2'ED35',CL5'SQD  ',AL1(RXE1),AL1(F
P),AL1(0),XL2'0000'                     DC    XL2'ED37',CL5'MEE',AL1(RXE1),AL1(F
P),AL1(0),XL2'0000'                     DC    12X'FF'              END OF TABLE
                               *
                                 ***********************************************
************************         *     ***** CONDITION CODE TABLE ENTRIES FOR TH
E CC COLUMN *****      *         * IN THE TABLE, NON-NUMERIC ENTRIES GIVE THE IN
STRUCTION M  NEMONIC TO  *         * BE USED WHEN THE MASK IN THE INSTRUCTION MA
TCHES THE COLUMN NUMBER. *         * WHEN THE ENTRY IS NUMERIC, IT IS THE CONDIT
ION TO BE USED, AND THE  *         * MNEMONIC WILL BE BC OR BCR.
                         *           *******************************************
****************************         *            0  1  2  3  4  5  6  7  8  9
A  B  C  D  E  F           *         *******************************************
****************************         CC01   DC CL48'NOP1  2  3  4  5  6  7  8  9
  10 11 12 13 14 B  '                  CC02 DC CL48'NOP1  BH 3  BL 5  6  BNEBE 9
  10 BNL12 BNH14 B  '                  CC03 DC CL48'NOP1  2  3  4  5  6  BNZBZ 9
  10 11 12 13 14 B  '                  CC04 DC CL48'NOP1   2  3  4  5  6  BNEBE
 9  10 11 12 13 14 B  '                  CC05 DC CL48'NOP1  BH 3  BL 5  6  BNEBE
 9  10 BNL12 13 14 B  '                  CC06 DC CL48'NOPBO BP 3  4  5  6  BNZBZ
 9  10 11 12 13 14 B  '                              \CC07 DC CL48'NOP1  2  3
BM 5  6  BNZBZ 9  10 11 12 13 14 B  '                  CC08 DC CL48'NOP1  BP 3
BM 5  6  BNZBZ 9  10 BNM12 BNP14 B  '                  CC09 DC CL48'NOPBO BP 3
BM 5  6  BNZBZ 9  10 BNM12 BNPBNOB  '                  C  C0A DC CL48'NOP1  BP 3
  4  5  6  BNZBZ 9  10 11 12 13 14 B  '                  CC0B DC CL48'NOPBO 2  3
  BM 5  6  BNZBZ 9  10 BNM12 13 BNOB  '                  CC0C DC CL48'NOPBO 2  3
  4  5  6  BNZBZ 9  10 11 12 13 BNOB  '                  CC0D DC CL48'N  OP1  BH
 3  BL 5  6  BNEBE 9  10 11 12 13 14 B  '                  CC0E DC CL48'NOP1  BP
 3  BM 5  6  BNZBZ 9  10 11 12 13 14 B  '                  *********************
**************************************************         *  ***** MACHINE AND
CODING   FORMATS FOR THE FMT COLUMN                *         *******************
****************************************************         * THE FORMAT TABLE
BELOW SHOWS FOR EACH FMT NUMBER THE INSTRUCTION    *         * FORMAT NAME, MACH
INE INSTRUCTION FORMA  T, AND CODING FORMAT. THE     *         * MACHINE INSTRUC
TION SHOWS HOW THE INSTRUCTION IS FORMATTED IN MEMORY*         * DURING EXECUTIO
N, WHILE THE CODING FORMAT SHOWS HOW THE INSTRUCTION *         * IS CODED BY THE
 ASSEMBLER PROGRAMMER.                                 *         * MACHINE INSTR
UCTION FORMATS SHOW EACH NYBBLE (HALF-BYTE) OF THE     *         * INSTRUCTION,
AND THE DATA CONTAINED IN THAT NYBBLE. DATA CONTENT    *         * ABBREVIATIONS
 ARE: OC=OP-CODE, R1-R4 ARE REGISTER OPERANDS, M1-M  4   *         * ARE MASK OP
ERANDS, I1-I4 ARE IMMEDIATE OPERANDS, LL IS A SINGLE     *         * INSTRUCTION
 LENGTH, L1 AND L2 ARE OPERAND (1 AND 2) LENGTHS.        *         *************
**********************************************************           FP       EQ
U  64     FLOATING POINT INSTRUCTION                                 PR       EQ
U  32     PRIVILEGED INSTRUCTION                                     E1       EQ
U  1      OCOCOCOC                 <==> (NONE)                       RI1      EQ
U    2      OCOCR1OCI2I2I2I2         <==> R1,I2                        RR1
EQU  3      OCOCR1R2                 <==> R1,R2                        RR2
EQU  4      OCOCI1I1                 <==> I1                           RR3
EQU  5      OCOC  R1--                 <==> R1                           RR4
  EQU  29     OCOCM1R2                 <==> M1,R2                        RRE1
  EQU  6      OCOCOCOC----R1R2         <==> R1,R2                        RRE2
  EQU  7      OCOCOCOC----R1--           <==> R1                           RRE3
    EQU  8      OCOCOCOC--------         <==> (NONE)                       RRF1
    EQU  9      OCOCOCOCR1--R3R2         <==> R1,R3,R2                     RRF2
    EQU  10     OCOCOCOCM3--R1R2         <==>   R1,M3,R2                     RRF
3     EQU  11     OCOCOCOCR3M4R1R2         <==> R1,R3,R2,M4                  RS1
      EQU  12     OCOCR1R3B2D2D2D2         <==> R1,R3,D2(B2)                 RS2
      EQU  13     OCOCR1--B2D2D2D2         <==> R1,D2(B2)    +                 R
S3      EQU  14     OCOCR1M3B2D2D2D2         <==> R1,M3,D2(  B2)
 RSI1     EQU  15     OCOCR1R3I2I2I2I2         <==> R1,R3,I2
 RX1      EQU  16     OCOCR1X2B2D2D2D2         <==> R1,D2(X2,B2)
 RX2      EQU  17     OCOCM1X2B2D2D2D2         <==> M1,D2(X2,B2)
   RXE1     EQU  18     OCOCR1X2B2D2D2D2----OCOC <==> R1,D2(X2,B2)
   RXF1     EQU  19     OCOCR3X2B2D2D2D2R1--OCOC <==> R1,R3,D2(X2,B2)
   S1       EQU  20     OCOC----B2D2D2D2         <==> D2(B2)
   S2         EQU  21     OCOCOCOC--------         <==> (NONE)
     S3       EQU  30     OCOCOCOCB2D2D2D2         <==> D2(B2)
     SI1      EQU  22     OCOCI2I2B1D1D1D1         <==> D1(B1),I2
     SS1      EQU  23       OCOCLLLLB1D1D1D1B2D2D2D2 <==> D1(LL,B1),D2(B2)
       SS2      EQU  24     OCOCL1L2B1D1D1D1B2D2D2D2 <==> D1(L1,B1),D2(L2,B2)
       SS3      EQU  25     OCOCR1R3B2D2D2D2B4D4D4D4 <==> R1,D2(B2),R3,D4(B4)
       SS4      EQU  26     OCOCR1R3B1D  1D1D1B2D2D2D2 <==> D1(R1,B1),D2(B2),R3
         SS5      EQU  27     OCOCL1I3B1D1D1D1B2D2D2D2 <==> D1(L1,B1),D2(B2),I3
         SSE1     EQU  28     OCOCOCOCB1D1D1D1B2D2D2D2 <==> D1(B1),D2(B2)
         *********************************************  ************************
**         *  PARAMETER AREA PASSED TO THE READLMOD SUBROUTINE
 *         *********************************************************************
**         PARMAREA DS    0F          READLMOD PARAMETER AREA
             PRMDDNAM DC    CL8'SYSLIB'    DDNAME FOR LOADLIB CONTAINING MEMBER
             PRMEMBER DC    CL8' '         MEMBER NAME
             PRMCSECT DC    CL8' '         CSECT NAME
               PRMREQST DC    CL8' '         NAME OF DATA TO BE RETRIEVED: ESD,
RLD,           *                                TEXT, SYM, IDRU, IDRL, IDRZ, IDR
B,             *                                NAME, OR MAP
               PRMC  URSR DC    F'0'        CURSOR VALUE. CALLER SETS THIS TO ZE
RO               *                             BEFORE A FIRST CALL FOR A SET OF
DATA,            *                             THEN LEAVES IT AS-IS WHEN RETURNI
NG FOR           *                              ADDITIONAL DATA UNTIL IT HAS AL
L BEEN             *                             RETURNED. CURRENT VALUE IS RETU
RNED BY            *                             THIS SUBROUTINE AFTER EACH CALL
.                              \PRMRETCD DC    F'0'        RETURN CODE FROM IEW
BIND (S/B ZERO)                  PRMRSNCD DC    F'0'        REASON CODE FROM IEW
BIND (ZERO MEANS                 *                             MORE DATA OF THIS
 TYPE IS AVAILABLE AND           *                               WILL BE RETURNE
D IN SUBSEQUENT CALLS.             *                             4 MEANS THE DAT
A IN THE BUFFER IS ALL             *                             THAT IS AVAILAB
LE OF THE REQUESTED TYPE           PRMCOUNT DC      F'0'        NUMBER ELEMENTS
AVAILABLE IN THE BUFFER              PRMBUFAD DC    A(0)        ADDRESS OF THE D
ATA BUFFER HEADER. THE               *                             HEADER IS 32
BYTES LONG, FOLLOWED BY              *                               THE DATA EL
EMENTS.                                PRMERROR DS    CL1         ERROR INDICATO
R ON RETURN:                           PRMOK    EQU   C' '           SUCCESSFUL
READLMOD CALL                          PRMPRMER EQU   C'P'           PARAMETER
 ERROR                                   PRMACERR EQU   C'E'           IEWBIND M
ACRO ERROR OCCURRED                      ***************************************
******************************           *             DCB'S
                               *           *************************************
********************************           SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNA
ME=SYSPRINT,                      X                       RECFM=FBA,LRECL=133
                                             SYSOUT   DCB   DSORG=PS,MACRF=PM,DD
NAME=SYSOUT,                        X                       RECFM=FB,LRECL=80
                                             SYSIN    DCB   DSORG=PS,MACRF=GM,DD
NAME=SYSIN,EODAD=RCEOF,             X                         RECFM=FB,LRECL=80
                                                        LTORG
                                               RESOURCE CSECT
                                               ************  *******************
**************************************           *             REGISTER EQUATES
                                     *           *******************************
**************************************           R0       EQU   0
                                                   R1       EQU   1
                                                   R2       EQU   2
                                                   R3       EQU   3
                                                     R4       EQU   4
                                                     R5       EQU   5
                                                     R6       EQU   6
                                                       R7       EQU   7
                                                       R8       EQU   8
                                                       R9       EQU   9
                                       +                 R10      EQU   10
                                                           R11      EQU   11
                                                           R12      EQU   12
                                                           R13      EQU   13
                                                             R14      EQU   14
                                                             R15      EQU   15
                                                             *******************
****************************************************         * THE   TWO FOLLOWI
NG DSECTS DESCRIBE THE CONTENT OF AN IEWBUFF         *         * EXTERNAL SYMBOL
 DICTIONARY (ESD) BUFFER:                            *         *    ESDHEADR DES
CRIBES THE BUFFER HEADER.                            *         *    ESDENTRY DES
CR  IBES EACH ESD ENTRY THAT FOLLOWS THE HEADER.       *         ***************
********************************************************         ESDHEADR DSECT
,    DESCRIBE THE IEWBUFF ESD BUFFER HEADER              01-IEWBUESDHBUFI DS
CL8  BUFFER EYECA  TCHER.                                  02-00073ESDHBUFL DS
  F    TOTAL BUFFER LENGTH INCLUDING THIS                  02-00074ESDHVERS DS
  AL1  VERSION OF BUFFER.                                  02-00077         DS
  AL3  RESERVED. MUST BE ZERO.                               02-00078ESDHENTL DS
    F    LENGTH OF EACH BUFFER ENTRY.                        02-00079ESDHENTC DS
    F    NUMBER ESDENTRY ELEMENTS CONTAINED IN THIS BUFFER   02-00080ESDHNAMO DS
    F    OFFSET OF NAME IN NAMES LIST AREA.                    02-00081ESDHSTRP
DS    F    ADDRESS OF BINDER NAMES LIST AREA.                  02-00082ESDHEND
DS    0F   BEGINNING OF 1ST BUFFER ENTRY.                      02-00083*
                                                                         ESDENTR
Y DSECT ,    DESCRIBE ESDENTRY. OCCURS ESDHENTC TIMES            01-IEWBUESDTYPE
  DS    CL2  TYPE OF ESD ENTRY.                                  01-IEWBUESDTYPE
Q DS    CL2  ESD RECORD TYPE QUALIFIER                           01-IEWBUESDN  A
MES DS    CL1  NAME SPACE OF SYMBOL                                01-IEWBUESDSC
OPE DS    CL1  SCOPE OF THE SYMBOL                                 01-IEWBUESDNA
ME  DS    0CL6 SYMBOL REPRESENTED BY ESD RECORD                    01-IEWBUESDNA
MEC DS    H       LENGTH OF THE NAME.                               01-IEWBUESD
NAMEP DS    A      POINTS TO THE NAME OF THE SYMBOL (BLANK = $PRIV)  01-IEWBUESD
SYMAT DS    BL1  SYMBOL ATTRIBUTE FLAGS                              01-IEWBU
         \ESDSTRNG EQU   X'80'  ON=STRONG REFERENCE OR DEFINITION
   01-IEWBUESDRNMBL EQU   X'40'  ON=THIS SYMBOL IS MAPPED,NOT RENAMED
   01-IEWBUESDDESCL EQU   X'20'  ON=SYMBOL DEFINES OR REFERENCES A LINKAGE BLOCK
   01-IEWBUE  SDMNGLD EQU   X'10'  ON=NAME MAY BE MANGLED
     01-IEWBUESDXPLNK EQU   X'08'  ON=USES XPLINK LINKAGE CONVENTIONS
     01-IEWBU         DS    CL1
     01-IEWBUESDRESCS DS      0CL6 NAME OF OWNING OR CONTAINING SECTION
       01-IEWBUESDRESCL DS    H       LENGTH OF THE RESIDENT SECTION NAME
       01-IEWBUESDRESCP DS    A       POINTER TO NAME OF SECTION WHERE THIS SPEC
. OF   01-IEWBU*                        TH  E SYMBOL RESIDES. FOR LD, PR.
                 ESDLENG  DS    F    LENGTH OF DEFINED ELEMENT
         01-IEWBUESDALIGN DS    XL1  ALIGNMENT SPECIFICATION FOR SD, PR
         01-IEWBUESDUSBLT DS    XL1  REUSABILITY OF SD
           01-IEWBUESDAMODE DS    XL1  ADDRESSING MODE OF SD
           01-IEWBUESDRMODE DS    XL1  RMODE OF SD
           01-IEWBUESDRECFM DS    H    RECORD FORMAT FOR CLASS
             01-IEWBUESDLOADF DS    BL1  LOAD ATTRIBUTES
             01-IEWBUESDRO    EQU   X'80'   READ-ONLY
             01-IEWBUESDNL    EQU   X'40'   DO NOT LOAD WITH MODULE
               01-IEWBUESDMOVE  EQU   X'20'   MOVEABLE
               01-IEWBUESDSHR   EQU   X'10'   SHAREABLE
               01-IEWBUESDDEFER EQU   X'08'   DEFERRED LOAD
               01-IEWB  UESDBINDF DS    BL1  BIND ATTRIBUTES
                 01-IEWBUESDGEND  EQU   X'80'   BINDER-GENERATED
                 01-IEWBUESDNOCLS EQU   X'40'   NO CLASS DATA AVAILABLE
                 01-IEWBUESDVL    EQU     X'20'   VARIABLE LENGTH RECORDS
                   01-IEWBUESDDESCD EQU   X'10'   DESCRIPTIVE DATA
                   01-IEWBUESDINIT  EQU   X'08'   HAS PART INITIALIZERS
                   01-IEWBUESDFILLX EQU   X'04'   IL  L HAS BEEN SET
                     01-IEWBUESDPADST EQU   X'02'   CLASS HAS PADDING AT START
                     01-IEWBUESDBINDC DS    BL1  TYPE OF PROGRAM CODE DESCRIBED
BY SYMBOL            01-IEWBUESDMETH  EQU   X'30'   BINDING METHOD
                       01-IEWBU*                        '00'B = CATENATE
                               *                        '01'B = MERGE
                               *                        '1-'B = RESERVED
                                 ESDTXTTY EQU   X'0F'   TEXT TYPE
                         01-IEWBU*                        '0000'B = UNSPECIFIED
                                 *                        '0001'B = INSTRUCTIONS
                 +                 *                        '0010'B = DATA
                                     *                        '0011'B = TRANSLAT
OR DEFN                                       DS    XL1
                             01-IEWBUESDXATCL DS    H    LENGTH OF XATTR CLASS N
AME                          0  1-IEWBUESDXATCP DS    A    PTR TO EXTENDED ATTRI
BUTES CLASS NAME               01-IEWBUESDXATOF DS    F    EXTENDED ATTRIBUTES O
FFSET                          01-IEWBUESDSEGMN DS    H    OVERLAY SEGMENT NUMBE
R OF SECTION                   01-IEWBUESDREG  N  DS    H    OVERLAY REGION NUMB
ER OF SECTION                    01-IEWBUESDSIGN  DS    CL8  INTERFACE SIGNATURE
                                 01-IEWBUESDAUTOC DS    BL1  AUTOCALL SPEC. APPL
IES TO REFERENCES                01-IEWBUESDNVRCL EQU   X'80  '      NEVERCALL W
AS SPECIFIED                       01-IEWBUESDMINOR EQU   X'40'      AUTOCALLED
FROM LPA                           01-IEWBUESDSTAT  DS    BL1  STATUS
                                   01-IEWBUESDRESLV EQU   X'80'      SYMBOL   IS
 RESOLVED                            01-IEWBUESDACPRC EQU   X'40'      PROCESSED
 BY AUTOCALL                         01-IEWBUESDINCLD EQU   X'20'      INCLUDE A
TTEMPTED                             01-IEWBUESDNOTFD EQU   X'10'      MEMBER NO
T FOUND                                01-IEWBUESDEXTRN EQU   X'08'      RESOLVE
D OUTSIDE MODULE                       01-IEWBUESDNOCAL EQU   X'04'      NOCALL/
NEVERCALL                              01-IEWBUESDNOREF EQU   X'02'      NO STRO
NG REFERENCES                            01-IEWBUESDLIBRY EQU   X'01'      SPECI
AL CALL LIBRARY REQUESTED                01-IEWBUESDTGTL  DS    H    LENGTH OF T
HE TARGET.                               01-IEWBUESDTGTP  DS    A    POINTS TO N
AME OF SECTION WHERE SYMBOL RESIDES. FOR   01-IEWBU*                      EXTERN
AL REFERENCES.                                              DS    H
                                           01-IEWBUESDCNTCL DS    H    LENGTH OF
 THE CLASS                                 01-IEWBUESDC  NTCP DS    A    POINTS
TO NAME OF CONTAINING CLASS                  01-IEWBUESDELOFF DS    F    OFFSET
WITHIN THE CLASS ELEMENT                     01-IEWBUESDCLOFF DS    F    OFFSET
WITHIN THE CLASS SEGMENT                     01-IEWBU         DS    H 
                                               01-IEWBUESDADAL  DS    H    ASSOC
IATED DATA LENG                                01-IEWBUESDADAP  DS    A    POINT
S TO ASSOCIATED DATA                           01-IEWBU            \         DS
    F                                                        01-IEWBUESDPRTY  DS
    F    BINDING SEQUENCE                                    01-IEWBUESDNTEND DS
    0F                                                       01-IEWBU*  ********
**************************************************************         * THE TWO
 FOLLOWING DSECTS DESCRIBE THE CONTENT OF AN IEWBUFF NAME    *         * BUFFER:
                                                             *         *    BNLH
EADR   DESCRIBES THE BUFFER HEADER.                            *         *    BN
LENTRY DESCRIBES EACH ENTRY THAT FOLLOWS THE HEADER.           *         *******
****************************************************************         BNLHEAD
R DSECT ,    DESCRIB  ES THE HEADER FOR THE IEWBUFF NAME BUFFER    01-IEWBUBNLHB
UFI DS    CL8  BUFFER EYECATCHER.                                  02-00073BNLHB
UFL DS    F    TOTAL BUFFER LENGTH, INCLUDING THIS                 02-00074BNLHV
ER  DS    AL1  VERSION OF BUFFER.                                    02-00077
      DS    AL3                                                      02-00078BNL
HENTL DS    F    LENGTH OF EACH BUFFER ENTRY.                        02-00079BNL
HENTC DS    F    NUMBER BNLENTRY ELEMENTS CONTAINE  D IN THIS BUFFER   02-00080H
NAMO DS    F    OFFSET OF NAME IN NAMES LIST AREA.                     02-00081B
NLHSTRP DS    F    ADDRESS OF BINDER NAMES LIST AREA.                  02-00082B
NLHEND  DS    0F   BEGINNING OF 1ST BUFFER ENTRY.                        02-0008
3*                                                                       02-0012
1BNLENTRY DSECT ,    DESCRIBES NAME BUFFER ENTRY. OCCURS BNLHENTC TIMES  01-IEWB
UBNLCLSL  DS    F    CLASS LENGTH (FOR CLASS NAMES)                      01-IEWB
  UBNLBINDF DS    XL1  FLAG BITS                                           01-IE
WBUBNLBFGEN EQU   X'80'  GENERATED BY BINDER                               01-IE
WBUBNLBFEMP EQU   X'40'  NO DATA PRESENT                                   01-IE
WBUBNLBFVL  EQU     X'20'  VARYING LENGTH RECORDS                            01-
IEWBUBNLBFDES EQU   X'10'  DESCRIPTIVE DATA (NON-TEXT)                       01-
IEWBUBNLBFINI EQU   X'08'  CLASS HAS INITIAL DATA                            01-
IEWBUBNLBFFIL EQU   X'04'  FIL  L CHARACTER SPECIFIED                          0
1-IEWBUBNLBFERR EQU   X'01'  CLASS VALIDATION ERROR                            0
1-IEWBUBNLPAD1  DS    XL1  1 BYTE PAD FOR BOUNDARY ALIGNMENT                   0
1-IEWBUBNLNAMEL DS    H    NBR SIGNIFICANT CH  ARS IN CLASS/SECTION NAME
 01-IEWBUBNLNAMEP DS    AL4  POINTER TO CLASS OR SECTION NAME
 01-IEWBUBNLELEMC DS    F    NUMBER ELEMENTS IN CLASS OR SECT
 01-IEWBUBNLEND   DS    0F
   01-IEWBU*********************************************************************
**         * THE TWO FOLLOWING DSECTS DESCRIBE THE CONTENT OF AN IEWBUFF
 *         * RELOCATION DICTIONARY (RLD) BUFFER:                           +
   *         *    RLDHEADR DESCRIBES THE BUFFER HEADER.
     *         *    RLDENTRY DESCRIBES EACH RLD ENTRY THAT FOLLOWS THE HEADER.
     *         *****************************************************************
******         RLDHEADR DSECT ,    DESCRIBE IEWBUFF RLD BUFFER HEADER
       0  1-IEWBURLDHBUFI DS    CL8  BUFFER EYECATCHER.
         02-00073RLDHBUFL DS    F    TOTAL BUFFER LENGTH, INCLUDING THIS
         02-00074RLDHVER  DS    AL1  VERSION OF BUFFER.
         02-00077           DS    XL3
           02-00078RLDHENTL DS    F    LENGTH OF EACH BUFFER ENTRY.
           02-00079RLDHENTC DS    F    NUMBER RLDENTRY ELEMENTS CONTAINED IN THI
S BUFFER   02-00080RLDHNAMP DS    F      OFFSET OF NAME IN NAMES LIST AREA.
             02-00081RLDHSTRP DS    F    ADDRESS OF BINDER NAMES LIST AREA.
             02-00082RLDHEND  DS    0F   BEGINNING OF 1ST BUFFER ENTRY.
             02-00083*
                       RLDENTRY DSECT ,    DESCRIBE RLD BUFFER ENTRY. OCCURS RLD
HENTC TIMES    01-IEWBURLDTYPE  DS    XL1  ADCON TYPE.
               01-IEWBURLDSTAT  DS    XL1  ADCON RELOCATION STATUS.
                 01-IEWBURLDRESNL DS    H    LENGTH OF THE RESIDENT.
                 01-IEWBURLDRESNP DS    A    POINTS TO NAME OF SECTION WHERE ADC
ON RESIDES       01-IEWBURLDADCNL DS    H    LENGTH OF THE ADCON.
                   01-IEWBURLDRESCL DS    H    LENGTH OF THE RESIDENT CLASS NAME
                   01-IEWBURLDRESCP DS    A    POINTS TO NAME OF CLASS WHERE ADC
ON RESIDES         01-IEWBURLDRESOF DS    F    OFFSET OF ADDRESS CONSTANT IN ELE
MENT OR PART:        01-IEWBU*                      RLDRESPL=0: ELEMENT; RLDRESP
L>0: PART                    RLDCLOF  DS    F    OFFSET OF THE ADDRESS WITHIN CL
ASS SEGMENT          01-IEWBURLDADCNB DS    XL1  ADCON BOUNDARY SPECIFICATION.
                     01-IEWBURLDB  NDAT DS    BL1  ADCON BOUNDARY STATUS
                       01-IEWBURLDDIR   EQU   X'80'   RELOCATION SIGN: '0' = POS
; '1' = NEG            01-IEWBURLDHOBST EQU   X'40'   SET HIGH ORDER BIT FROM AM
ODE OF TARGET          01-IEWBURLDINTXT EQU   X' 20'   INTERNAL/EXTERNAL: '0' =
 INT; '1' = EXT          01-IEWBURLDHOBCH EQU   X'10'   HIGH ORDER BIT CHANGED B
Y BINDER                 01-IEWBURLDPARTR EQU   X'08'   ADCON LOCATED IN PART
                         01-IEWBU            \RLDXATCL DS    H    LENGTH OF EXT
ENDED ATTR CLASS NAME                  01-IEWBURLDXATCP DS    A    POINTER TO EX
TENDED ATTRIBUTES CLASS NAME           01-IEWBURLDXATOF DS    F    OFFSET OF EXT
ENDED ATTRIBUTES IN THE ELEMENT        01-IEWBUR  LDNAMSP DS    XL1  NAME SPACE
OF REFERENCE                             01-IEWBU         DS    XL1
                                         01-IEWBURLDTGTNL DS    H    LENGTH OF T
HE TARGET NAME                           01-IEWBURLDTGTNP DS      A    POINTER T
O NAME OF SYMBOL TO WHICH ADCON POINTS     01-IEWBU         DS    XL2
                                           01-IEWBURLDRESPL DS    H    RESIDENT
PART LENGTH                                01-IEWBURLDRESPP DS    A    RESIDEN
T PART POINTER                               01-IEWBURLDEND   DS    0F
                                             01-IEWBU***************************
********************************************         * THE TWO FOLLOWING DSECT D
ESCRIBES THE   CONTENT OF AN IEWBUFF         *         * TEXT BUFFER
                                             *         *************************
**********************************************         TXTHEADR DSECT ,    DESCR
IBE THE IEWBUFF TEXT BUFFER   HEADER             01-IEWBUTXTHBUFI DS    CL8  BUF
FER EYECATCHER.                                  02-00073TXTHBUFL DS    F    TOT
AL BUFFER LENGTH, INCLUDING THIS                 02-00074TXTHVER  DS    AL1  VER
SION OF BUFFER.                                    02-00077         DS    AL3
                                                   02-00078TXTHENTL DS    F    L
ENGTH OF EACH BUFFER ENTRY.                        02-00079TXTHENTC DS    F    N
UMBER TEXT BYTES CONTAINED IN THIS BUFFER          02-0008  0TXTHNAMO DS    F
 OFFSET OF NAME IN NAMES LIST AREA.                  02-00081TXTHSTRP DS    F
 ADDRESS OF BINDER NAMES LIST AREA.                  02-00082TXTHEND  DS    0F
 BEGINNING OF TEXT AREA                              02-00083*
                                                               TXTENTRY DSECT ,
   DESCRIBES TEXT AREA                                         TXTBYTE  DS    0C
   TEXT BYTE. OCCURS TXTHENTC TIMES                    02-00083*****************
********  **********************************************         * THE TWO FOLLO
WING DSECTS DESCRIBE THE CONTENT OF AN IEWBUFF IDRL    *         * BUFFER:
                                                       *         *    IDLHEADR D
ESCRIBES THE BUFFER HEA  DER.                            *         *    IDLENTRY
 DESCRIBES EACH ENTRY THAT FOLLOWS THE HEADER.           *         *************
**********************************************************         IDLHEADR DSEC
T ,    DESCRIBE THE IEWBUFF IDRL BUFFE  R HEADER             01-IEWBUIDLHBUFI DS
    CL8  BUFFER EYECATCHER.                                  02-00073IDLHBUFL DS
    F    TOTAL BUFFER LENGTH, INCLUDING THIS                 02-00074IDLHVER  DS
    AL1  VERSION OF BUFFER.                          +         02-00077
DS    AL3                                                        02-00078IDLHENT
L DS    F    LENGTH OF EACH BUFFER ENTRY.                        02-00079IDLHENT
C DS    F    NUMBER IDLENTRY ELEMENTS CONTAINED IN THIS BUFFER   02-00080IDLHNAM
O DS    F    OFFSET OF NAME IN NAMES LIST AREA.                  0  2-00081IDLHS
TRP DS    F    ADDRESS OF BINDER NAMES LIST AREA.                  02-00082IDLHE
ND  DS    0F   BEGINNING OF 1ST BUFFER ENTRY.                      02-00083*
                                                                   02-00121IDLEN
T  RY DSECT ,    DESCRIBE IDRLENTRY. OCCURS IDLHENTC TIMES           01-IEWBUIDL
PIDID DS    CL10 PROCESSOR IDENTIFICATION (PID ORDER NUMBER)         01-IEWBUIDL
VER   DS    CL2  PROCESSOR VERSION  NUMBER.                          01-IEWBUIDL
MODLV DS    CL2    PROCESSOR MODIFICATION LEVEL.                       01-IEWBUI
DLDATPR DS    CL7  DATE OF COMPILATION OR ASSEMBLY (YYYYDDD)           01-IEWBU
        DS    XL1                                                      01-IEWBUI
DLRESNL DS    H    LENGTH OF TH  E RESIDENT.                             01-IEWB
UIDLRESNP DS    AL4  POINTS TO NAME OF SECTION TO WHICH THIS APPLIES     01-IEWB
UIDLEND   DS    0F                                                       01-IEWB
U*********************************************  **************************
   * THIS DSECT DESCRIBES AN ENTRY IN THE LABEL TABLE                    *
   * THE TABLE ADDRESSES ARE LOCATED AT LBLTBADR, LBLTBEND, AND CURRLABL *
   * IF THE LENGTH OF LBLENTRY CHANGES, CHANGE HOLDLABL, AS W  ELL.        *
     ***********************************************************************
     LBLDSECT DSECT ,                       DESCRIBES A LABEL TABLE ENTRY
     LBLENTRY DS    0CL16                   LABEL TABLE ENTRY
       LBLOFSET DS    F                           CSECT OFFSET TO THE LABEL
       LBLTYPE  DS    X                           ENTRY TYPE: 0C=DROP,10=USING
       *                                            18=DATA START, 1C=DATA END
       *                                              30=LABEL,40=ADCON,50=VCON
         LBLUREG  DS    X                           USING REGISTER
         LBLRLDLN DS    H                           LENGTH IF RLD ENTRY ELSE 0
         LBLLABEL DS    0C L8                        LABEL
           LBLINITU DS    XL4                         INITIAL REG VALUE FOR USIN
G                   DS    XL4
                       0*******************************************************
****************         * DESCRIBES AN ENTRY IN AN OP-CODE TABLE
               *         *******************************************************
****************         O  PCODES  DSECT ,                       DESCRIBES AN O
P-CODE TABLE ENTRY         OPCENTRY DS    0XL12                   OP-CODE TABLE
ENTRY                      OPCODE1  DS    XL1                        OP-CODE BYT
E 1                        OPCODE2  DS      XL1                        OP-CODE B
YTE 2 OR ZERO                OPCMNEM  DS    0CL5                       MNEMONIC
-OR-                         OPCTWO2  DS    CL1                          '2' FOR
 2-BYTE OP-CODES             *                                             X'00'
 IF NOT AN OP-CODE             OPCSRCH2 DS    AL4                          SRCH
ADDRESS FOR 2-BYTE O-C         OPCFORMT DS    XL1                        INSTRUC
TION FORMAT CODE               OPCFLAGS DS    XL1                          FLAGS
: 40=FLOATING POINT INST         *
  20=PRIVILEGED                  OPCNDCOD DS    XL1                        CONDI
TION CODE TABLE LINE             OPCFLAG1 DS    XL1                        FLAG
BYTE                               OPCFLAG2 DS    XL1                        FLA
G BYTE                             RESOURCE CSECT
                                            END
                                                            \//***FILE 234 is
from Dick Thornton, who is the author of the       *   FILE 234//*           DIS
ASSEMBLER program on File 217.  This is a rewrite  *   FILE 234//*           of
the disassembler to be able to handle load modules *   FILE 234/  /*           w
hich are in PDSE's as well as those in PDS'es, and   *   FILE 234//*           i
t has been updated to use IBM's IEWBIND and IEWBUFF  *   FILE 234//*           m
acros to do the load module access.                  *   FILE 234//*
                                                       *   FILE 234//*
 emails:  (check to see which are relevant):           *   FILE 234//*
     dickthor@hotmail.com                              *   FILE 234//*
     cthornton  @swva.net                                *   FILE 234//*
       rthornton@trigon.com                              *   FILE 234//*
                                                         *   FILE 234//*      Th
is is a new disassembler that   can be used to             *   FILE 234//*
disassemble load modules in PDSE's as well as those in     *   FILE 234//*
traditional PDS's.  It also can disassemble the more       *   FILE 234//*
recent instructions that have been added to   the IBM        *   FILE 234//*
  mainframe instruction set since my earlier disassembler    *   FILE 234//*
  that was written in 1977 and is now in File 217 of the     *   FILE 234//*
  CBT tape, I believe.                                         *   FILE 234//*
                                                               *   FILE 234//*
    I did not include DSECT statements in this version         *   FILE 234//*
    partly because I have not found them very useful, and      *   FILE 23  4//*
      partly due to time pressure, as I plan to retire June      *   FILE 234//*
      30, 2002.                                                  *   FILE 234//*
                                                                 *   FILE 234//*
      Ins  tallation and use notes:                                *   FILE 234/
/*      1. This PDS contains the source code and JCL needed to     *   FILE 234/
/*         install and test the RESOURCE/REBUILD/READLMOD          *   FILE 234/
/*         disassembler.                                             *   FILE 23
4//*      2. Details of coding for the control statements are        *   FILE 23
4//*         given in comment statements at the beginning of the     *   FILE 23
4//*         RESOURCE program.                                         *   FILE
234//*      3. All the rest of the installation instructions may be    *   FILE
234//*         found in the $README member of this pds.                *   FILE
234//*                                                                   *   FIL
E 234//*   Small fix to the RESOURCE program from John Kalinich, to fix  *   FIL
E 234//*   the translate table of printables.  email: jkalinic@csc.com   *   FIL
E 234//*                                                                   *   F
ILE 234                       {REGULAR CBT TAPE - VERSION 474    FILE:  234
 
                                     ORIGINAL DSNAME:  IBMUSER.CBT474.FILE234
                                       ---------------
                                                       --RECFM-LRECL-BLKSIZE-DSO
RG                                                       FB    80    5600    PO
 
                                        PDS117I 19 MEMBERS COUNTED; CUMULATIVE S
IZE IS 7,954 RECORDS
                                                                T
                                       TIME THIS PDS WAS SHIPPED:   06/27/07
22:02:19    GMT-4:00
                                                              0//IBMUSERU JOB
,'SAM GOLOB',CLASS=B,                                            //    MSGCLASS=
X,NOTIFY=&SYSUID                                                 //*
                                                                 /  /***********
********************************************************           //ASMACL   PR
OC                                                                 //*
                                                                   //C        EX
E  C PGM=ASMA90                                                      //*
                                                                     //SYSLIB
DD  DSN=SYS1.MACLIB,DISP=SHR                                         //
DD  DSN=SYS1.MOD  GEN,DISP=SHR                                         //SYSUT1
  DD  DSN=&&SYSUT1,SPACE=(4096,(120,120),,,ROUND),                     //
      UNIT=SYSALLDA,BUFNO=1                                            //SYSPRIN
T DD  SYSOUT=*                                                           //SYSLI
N   DD  DSN=&&OBJ,SPACE=(3040,(40,40),,,ROUND),                          //
        UNIT=SYSALLDA,DISP=(MOD,PASS),                                   //
        BLKSIZE=3040,LRECL=80,RECFM=FB,BUFNO=1                             //*
                                                                           //L
      EXEC PGM=HEWL,PARM='MAP,LET,LIST,NCAL',COND=(8,LT,C)                 //*
                                                                             //S
YSLIN   DD  DSN=&&OBJ,DISP=(OLD,DELETE)                                      //
        DD  DDNAME=SYSIN                                                     //S
YSLMOD  DD  DISP=(,PASS),UNIT=SYSALLDA,SPACE=(CYL,(1,1,1)),                    /
/             DSN=&&GOSET(GO)                                                  /
/SYSUT1   DD  DSN=&&SYSUT1,SPACE=(1024,(120,120),,,ROUND),                     /
/             UNIT=SYSALLDA,BUFNO=1                                            /
/SYSPRINT D  D  SYSOUT=*
 //*
 //         PEND
 //***********************  ********************************************
   //*                 BC0THOR.PDS.XMIT(ASMLKED1)                      *
   //* ASSEMBLE, LINK READLMOD SUBROUTINE                              *
   //************************************  *******************************
     //ASMACL   EXEC  ASMACL,PARM.L='MAP,LET,LIST,XREF,NCAL'
     //C.SYSIN DD   DSN=IBMUSER.FILE234.INSTALL(READLMOD),DISP=SHR
     //L.SYSLMOD DD DSN=IBMUSER.FILE234.LOADLIB(READLMOD  ),DISP=SHR
                              }//*********************************************
**********************           //ASMACL   PROC
                                 //*
                                 /  /C        EXEC PGM=ASMA90
                                   //*
                                   //SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
                                   //         DD    DSN=SYS1.MODGEN,DISP=SHR
                                     //SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(12
0,120),,,ROUND),                     //             UNIT=SYSALLDA,BUFNO=1
                                     //SYSPRINT DD  SYSOUT=*
                                       //SYSLIN   DD  DSN=&&OBJ,SPACE=(3040,(40,
40),,,ROUND),                          //             UNIT=SYSALLDA,DISP=(MOD,PA
SS),                                   //             BLKSIZE=3040,LRECL=80,REC
 FM=FB,BUFNO=1                           //*
                                         //L        EXEC PGM=HEWL,PARM='MAP,LET,
LIST,NCAL',COND=(8,LT,C)                 //*
                                           //SYSLIN   DD  DSN=&&OBJ,DISP=(OLD,DE
LETE)                                      //         DD  DDNAME=SYSIN
                                           //SYSLMOD  DD  DISP=(,PASS),UNIT=SYSA
LLDA,SPACE=(CYL,(1,1,1)),                    //             DSN=&&GOSET(GO)
                                             //SYSUT1   DD  DSN=&&SYSUT1,SPACE=(
1024,(120,120),,,ROUND),                     //             UNIT=SYSALLDA,BUFNO=
1                                              //SYSPRINT DD  SYSOUT=*
                                               //*
                                               //         PEND
                                                                      0//SBGOL
OBU JOB ,'SAM GOLOB',CLASS=B,                                            //    M
SGCLASS=X,NOTIFY=&SYSUID                                                 //*
 
                   //IBMUSERU JOB ,'SAM GOLOB',CLASS=B,
                     //    MSGCLASS=X,NOTIFY=&SYSUID
                     //*
                     /  /*******************************************************
************           //ASMACL   PROC
                       //*
                       //C        EXE  C PGM=ASMA90
                         //*
                         //SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
                         //         DD  DSN=SYS1.MOD  GEN,DISP=SHR
                           //SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(120,120),,,R
OUND),                     //             UNIT=SYSALLDA,BUFNO=1
                           //SYSPRINT DD  SYSOUT=*
                             //SYSLIN   DD  DSN=&&OBJ,SPACE=(3040,(40,40),,,ROUN
D),                          //             UNIT=SYSALLDA,DISP=(MOD,PASS),
                             //             BLKSIZE=3040,LRECL=80,RECFM=FB,BUFNO
=1                             //*
                               //L        EXEC PGM=HEWL,PARM='MAP,LET,LIST,NCAL'
,COND=(8,LT,C)                 //*
                                 //SYSLIN   DD  DSN=&&OBJ,DISP=(OLD,DELETE)
                                 //         DD  DDNAME=SYSIN
                                 //SYSLMOD  DD  DISP=(,PASS),UNIT=SYSALLDA,SPACE
=(CYL,(1,1,1)),                    //             DSN=&&GOSET(GO)
                                   //SYSUT1   DD  DSN=&&SYSUT1,SPACE=(1024,(120,
120),,,ROUND),                     //             UNIT=SYSALLDA,BUFNO=1
                                   //SYSPRINT D  D  SYSOUT=*
                                     //*
                                     //         PEND
                                     //***********************  ****************
****************************           //*                 IBMUSER.FILE234.INSTA
LL(ASMLKED2)               *           //* ASSEMBLE, LINK RESOURCE, THE MAIN PRO
GRAM                       *           //************************************  *
******************************           //ASMACL   EXEC  ASMACL,PARM.L='MAP,LET
,LIST,XREF,CALL'                         //C.SYSIN DD   DSN=IBMUSER.FILE234.INST
ALL(RESOURCE),DISP=SHR                   //L.SYSLMOD DD DSN=IBMUSER.FILE234.LOAD
LIB(RESOURCE# ),DISP=SHR                   //SYSLIB DD DSN=IBMUSER.FILE234.LOADL
IB,DISP=SHR                                                       0//IBMUSERU
JOB ,'SAM GOLOB',CLASS=B,                                            //    MSGCL
ASS=X,NOTIFY=&SYSUID                                                 //*
                                                                     /  /*******
************************************************************           //ASMACL
  PROC                                                                 //*
                                                                       //C
  EXE  C PGM=ASMA90                                                      //*
                                                                         //SYSLI
B   DD  DSN=SYS1.MACLIB,DISP=SHR                                         //
    DD  DSN=SYS1.MOD  GEN,DISP=SHR                                         //SYS
UT1   DD  DSN=&&SYSUT1,SPACE=(4096,(120,120),,,ROUND),                     //
          UNIT=SYSALLDA,BUFNO=1                                            //SYS
PRINT DD  SYSOUT=*                                                           //S
YSLIN   DD  DSN=&&OBJ,SPACE=(3040,(40,40),,,ROUND),                          //
            UNIT=SYSALLDA,DISP=(MOD,PASS),                                   //
            BLKSIZE=3040,LRECL=80,RECFM=FB,BUFNO=1                             /
/*                                                                             /
/L        EXEC PGM=HEWL,PARM='MAP,LET,LIST,NCAL',COND=(8,LT,C)                 /
/*
 //SYSLIN   DD  DSN=&&OBJ,DISP=(OLD,DELETE)
 //         DD  DDNAME=SYSIN
 //SYSLMOD  DD  DISP=(,PASS),UNIT=SYSALLDA,SPACE=(CYL,(1,1,1)),
   //             DSN=&&GOSET(GO)
   //SYSUT1   DD  DSN=&&SYSUT1,SPACE=(1024,(120,120),,,ROUND),
   //             UNIT=SYSALLDA,BUFNO=1
   //SYSPRINT D  D  SYSOUT=*
     //*
     //         PEND
     //***********************  ********************************************
       //*                 IBMUSER.FILE234.INSTALL(ASMLKED3)               *
       //* ASSEMBLE, LINK REBUILD PROGRAM DYNAMICALLY CALLED BY RESOURCE   *
       //************************************  *******************************
         //ASMACL   EXEC  ASMACL,PARM.L='MAP,LET,LIST,XREF,NCAL'
         //C.SYSIN DD   DSN=IBMUSER.FILE234.INSTALL(REBUILD),DISP=SHR
         //L.SYSLMOD DD DSN=IBMUSER.FILE234.LOADLIB(REBUILD)  ,DISP=SHR
                                  0//IBMUSERU JOB ,'SAM GOLOB',CLASS=B,
                                     //    MSGCLASS=X,NOTIFY=&SYSUID
                                     //*
                                     /  /***************************************
****************************           //ASMACL   PROC
                                       //*
                                       //C        EXE  C PGM=ASMA90
                                         //*
                                         //SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
                                         //         DD  DSN=SYS1.MOD  GEN,DISP=S
HR                                         //SYSUT1   DD  DSN=&&SYSUT1,SPACE=(40
96,(120,120),,,ROUND),                     //             UNIT=SYSALLDA,BUFNO=1
                                           //SYSPRINT DD  SYSOUT=*
                                             //SYSLIN   DD  DSN=&&OBJ,SPACE=(304
0,(40,40),,,ROUND),                          //             UNIT=SYSALLDA,DISP=(
MOD,PASS),                                   //             BLKSIZE=3040,LRECL=8
0,RECFM=FB,BUFNO=1                             //*
                                               //L        EXEC PGM=HEWL,PARM='MA
P,LET,LIST,NCAL',COND=(8,LT,C)                 //*
                                                 //SYSLIN   DD  DSN=&&OBJ,DISP=(
OLD,DELETE)                                      //         DD  DDNAME=SYSIN
                                                 //SYSLMOD  DD  DISP=(,PASS),UNI
T=SYSALLDA,SPACE=(CYL,(1,1,1)),                    //             DSN=&&GOSET(GO
)                                                  //SYSUT1   DD  DSN=&&SYSUT1,S
PACE=(1024,(120,120),,,ROUND),                     //             UNIT=SYSALLDA,
BUFNO=1                                            //SYSPRINT D  D  SYSOUT=*
                                                     //*
                                                     //         PEND
                                                     //***********************
********************************************           //*                 SBGOL
OB.PDS.FILE234(ASMLKED4)                   *           //* ASSEMBLE, LINK RESCHE
CK, THE RESULT CHECKING PROGRAM            *           //***********************
*************  *******************************           //ASMACL   EXEC  ASMACL
,PARM.L='MAP,LET,LIST,XREF,CALL'                         //C.SYSIN DD   DSN=SBGO
LOB.FILE234.INSTALL(RESCHECK),DISP=SHR                   //L.SYSLMOD DD DSN=SBGO
LOB.FILE234.LOADLIB(RESCHECK  ),DISP=SHR                                     
     //IBMUSERU JOB ,'SAM GOLOB',CLASS=B,
     //    MSGCLASS=X,NOTIFY=&SYSUID
     //*
     /  /*******************************************************************
       //ASMACL   PROC
       //*
       //C        EXE  C PGM=ASMA90
         //*
         //SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
         //         DD  DSN=SYS1.MOD  GEN,DISP=SHR
           //SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(120,120),,,ROUND),
           //             UNIT=SYSALLDA,BUFNO=1
           //SYSPRINT DD  SYSOUT=*
             //SYSLIN   DD  DSN=&&OBJ,SPACE=(3040,(40,40),,,ROUND),
             //             UNIT=SYSALLDA,DISP=(MOD,PASS),
             //             BLKSIZE=3040,LRECL=80,RECFM=FB,BUFNO=1
               //*
               //L        EXEC PGM=HEWL,PARM='MAP,LET,LIST,NCAL',COND=(8,LT,C)
               //*
                 //SYSLIN   DD  DSN=&&OBJ,DISP=(OLD,DELETE)
                 //         DD  DDNAME=SYSIN
                 //SYSLMOD  DD  DISP=(,PASS),UNIT=SYSALLDA,SPACE=(CYL,(1,1,1)),
                   //             DSN=&&GOSET(GO)
                   //SYSUT1   DD  DSN=&&SYSUT1,SPACE=(1024,(120,120),,,ROUND),
                   //             UNIT=SYSALLDA,BUFNO=1
                   //SYSPRINT D  D  SYSOUT=*
                     //*
                     //         PEND
                     //***********************  ********************************
************           //*                 IBMUSER.PDS.FILE234(ASMLKED5)
           *           //* ASSEMBLE, LINK DISTEST PROGRAM. THE RESULTING LOAD MO
DULE IS    *           //* USED AS INPUT TO TEST THE RESOURCE  /REBUILD DISASSEM
BLER.        *           //*****************************************************
**************           //ASMACL   EXEC  ASMACL,PARM.L='MAP,LET,LIST,XREF,NCAL'
                         //C.SYSIN DD   DSN=IBMUSER.FILE234.INSTALL(DISTEST)# ,D
ISP=SHR                    //L.SYSLMOD DD DSN=IBMUSER.FILE234.LOADLIB(DISTEST),D
ISP=SHR                                      S      //IBMUSERU JOB ,'SAM GOLOB'
,CLASS=B,                                            //    MSGCLASS=X,NOTIFY=&SY
SUID                                                 //*
                                                     /  /***********************
********************************************           //*                 SBGOL
OB.FILE234.INSTALL(EXECJCL1)               *           //* EXECUTE THE RESOURCE/
REBUILD DISASSEMBLER AGAINST THE DISTEST   *           //* LOAD MODUL  E.
                                             *           //*   1. FIRST SCRATCH
ANY FORMER RESOURCE OUTPUT FILE              *           //*   2. DISASSEMBLE DI
STEST:                                       *           //*      A. THE PARM FI
ELD   ON THE EXEC JCL STATEMENT SPECIFIES THAT *           //*         FLOATING
POINT AND PRIVILEGED INSTRUCTIONS ARE TO BE    *           //*         DISASSEMB
LED. THESE WOULD NORMALLY NOT BE CONSIDERED    *           //*         INSTRUCTI
ONS BY THE PROGRAMS  .                           *           //*      B. SYSOUT
FILE WILL CONTAIN THE DISASSEMBLED SOURCE CODE.  *           //*      C. SYSLIB
FILE CONTAINS THE LOAD MODULE TO BE DISASSEMBLED *           //*      D. SYSIN F
ILE CONTAINS CONTROL STATEMENTS:                   *           //*         1. FI
RST STATEMENT MUST NAME THE MEMBER AND CSECT TO BE *           //*            DI
SASSEMBLED. MEMBER MUST BE IN THE SYSLIB FILE.     *           //*         2. OP
TIONAL DATA STATEMENTS IDENTIFY AREAS IN THE LOAD    *           //*
MODULE THAT ARE DATA ONLY. THIS PREVENTS THE DIS-    *           //*
ASSEMBLER FROM MAKING INSTRUCTIONS FROM DATA BYTES.  *           //*         3.
OPTIONAL USING INSTRUCTIONS ALLOW THE DISASSEMBLER   *             //*
  TO CREATE LABELS FROM THE BASE-DISPLACEMENT ADDRESSES*           //*
  IN INSTRUCTIONS. WITHOUT THIS, MOST INSTRUCTIONS WILL*           //*
  BE FORMATTED IN EXPLICIT FORMAT.                     *           //**********
 *********************************************************           //SCRATCH
EXEC PGM=IDCAMS                                                      //SYSPRINT
DD SYSOUT=*                                                          //SYSIN
DD *                                                                    DELETE S
BGOLOB.DEL.DISTEST.ASM                                                 //*
                                                                       //*
                                                                         //RESOU
RCE EXEC  PGM=RESOURCE,PARM=(FLTPT,SUPVR) <==WANT FLOATPT,PRIV           //STEPL
IB  DD    DSN=IBMUSER.FILE234.LOADLIB,DISP=SHR                           //SYSUD
UMP DD    SYSOUT=*                                                         //SYS
PRINT DD    SYSOUT=*                                                       //SYS
LIB   DD    DSN=IBMUSER.FILE234.LOADLIB,DISP=SHR                           //SYS
OUT   DD    DSN=IBMUSER.DEL.DISTEST.ASM,DISP=(NEW,CATLG,DEL+ ETE),           //
        UNIT=SYSALLDA,SPACE=(TRK,(15,5),RLSE),VOL=SER=WOR  K05,                /
/         DSORG=PS,RECFM=FB,LRECL=80                                           /
/SYSIN    DD    *                                                              D
ISTEST  DISTEST
 DATA 000020 00007F
 DATA 0002C8 00057F
 USING 000000 000006 F 000000
 USING   000006        3 000000
   ULABL SAVEAREA 000038 072
   ULABL MYLBL90  000090 002
   ULABL MYLBL12C 0001  2C 004
     ULABL MYLBL2CA 0002CA 002
     ULABL NOLBL34C 00034C 004
     ULABL NOLBL384 000384 004
        {     S             S     \//IBMUSERU JOB ,'SAM GOLOB',CLASS=B,
                                   //    MSGCLASS=X,NOTIFY=&SYSUID
                                   //*
                                   /  /*****************************************
**************************           //ASMACL   PROC
                                     //*
                                     //C        EXE  C PGM=ASMA90
                                       //*
                                       //SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
                                       //         DD  DSN=SYS1.MOD  GEN,DISP=SHR
                                         //SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096
,(120,120),,,ROUND),                     //             UNIT=SYSALLDA,BUFNO=1
                                         //SYSPRINT DD  SYSOUT=*
                                           //SYSLIN   DD  DSN=&&OBJ,SPACE=(3040,
(40,40),,,ROUND),                          //             UNIT=SYSALLDA,DISP=(MO
D,PASS),                                   //             BLKSIZE=3040,LRECL=80,
RECFM=FB,BUFNO=1                             //*
                                             //L        EXEC PGM=HEWL,PARM='MAP,
LET,LIST,NCAL',COND=(8,LT,C)                 //*
                                               //SYSLIN   DD  DSN=&&OBJ,DISP=(OL
D,DELETE)                                      //         DD  DDNAME=SYSIN
                                               //SYSLMOD  DD  DISP=(,PASS),UNIT=
SYSALLDA,SPACE=(CYL,(1,1,1)),                    //             DSN=&&GOSET(GO)
                                                 //SYSUT1   DD  DSN=&&SYSUT1,SPA
CE=(1024,(120,120),,,ROUND),                     //             UNIT=SYSALLDA,BU
FNO=1                                            //SYSPRINT D  D  SYSOUT=*
                                                   //*
                                                   //         PEND
                                                   //***********************  **
******************************************           //*                 IBMUSER
.FILE234.INSTALL(ASMLKED7)               *           //* ASSEMBLE, LINK DISASSEM
BLED OUTPUT                              *           //*************************
***********  *******************************           //ASMACL   EXEC  ASMACL,P
ARM.L='MAP,LET,LIST,XREF,NCAL'                         //C.SYSPRINT DD DSN=SBGOL
OB.DEL.DISTEST.SYSPRINT,DISP=(NEW,CATLG),              //        UNIT=SYSALLDA,S
PACE=(TRK,(60,15),RLSE),VO  L=SER=WORK05,                //        DSORG=PS,RECF
M=FBA,LRECL=121                                          //C.SYSIN DD   DSN=SBGO
LOB.DEL.DISTEST.ASM,DISP=SHR                             //L.SYSLMOD DD DSN=SBGO
LOB.FILE234.LOADLIB(DISTESTD),DISP=SHR                          S             S
    {//IBMUSERU JOB ,'SAM GOLOB',CLASS=B,
     //    MSGCLASS=X,NOTIFY=&SYSUID
     //*
     /  /*******************************************************************
       //*                 IBMUSER.PDS.XMIT(EXECJCL8)                      *
       //* CHECK ASSEMBLER'S SYSPRINT AFTER ASSEMBLING THE OUTPUT FROM A   *
       //* RESOURCE/R  EBUILD RUN TO CHECK FOR CORRECT DISASSEMBLY.          *
         //*******************************************************************
         //RESCHECK EXEC  PGM=RESCHECK
         //STEPLIB  DD    DSN=SBGOLOT B.FILE234.LOADLIB,DISP=SHR
           //SYSPRINT DD    SYSOUT=*
           //SYSIN    DD    DSN=IBMUSER.DEL.DISTEST.SYSPRINT,DISP=SHR
                S             S      IKJEFTE2 00000000 00000B98  RMODE 24  AMODE
 24
           APFCTABL 00000010         IKJEFTE8 00000B98 00000590  RMODE 24  AMODE
 24
             APFPTABL 00000BA8         IKJEFTNS 00001128 0000009E  RMODE 24  AMO
DE 24
             NSCPTABL 00001138         IKJEFTAP 00001  1C8 000005C8  RMODE 24  A
MODE 24
               APFTTABL 000011D8              S             S      //IBMUSERU JO
B ,'SAM GOLOB',CLASS=B,                                            //    MSGCLAS
S=X,NOTIFY=&SYSUID                                                 //*
                                                                   /  /ALLOC  EX
EC  PGM=IEFBR14                                                      //SYSOUT
DD  DSN=IBMUSER.DISTEST.PDS,DISP=(NEW,CATLG,DELETE),                 //
UNIT=SYSALLDA,SPACE=(TRK,(45,60,44)),VOL=SER=WORK05,                 //
DCB& =(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=8000)                             S
          S      //REASMLNK PROC
         00010000//ASM    EXEC  PGM=ASMA90,REGION=2048K,
         00020000//             PARM=(DECK,NOOBJECT,NORLD,RENT,TERM,'XREF(SHORT)
')       00030000/  /SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))
           00040000//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))
           00050000//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))
           00060000//SYSPUNCH DD    UNIT=SYSDA,SPACE=(TRK,(5,5)),DISP=(MOD,PASS)
,DSN=&&X,    00070000//             DCB=BLKSIZE=3120
             00080000//SYSPRINT DD  SYSOUT=*
             00090006//SYSTERM  DD  SYSOUT=*
               00100006//SYSLIB   DD  DSN=SYS1.MODGEN,DISP=SHR
               00110009//         DD  DSN=SYS1.MACLIB,DISP=SHR
               00120000//LKED   EXEC  PGM=IEWL,PARM='MAP,RENT,R  EUS,REFR,LET,NC
AL',COND=(0,LT)  00130000//SYSPRINT DD  SYSOUT=*
                 00140006//SYSLIBX  DD  DSN=&&X,DISP=(OLD,DELETE)
                 00150000//SYSLMOD  DD  DISP=SHR,DSN=&OUTPUT                  I
                   00160006//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(5,5))
                   00170000//       PEND
                   00180000     S             S     {** MAP      IKJTABLS
                                                     IKJEFTE2  000000  000B98
 
                         APFCTABL  000010            I  KJEFTE8  000B98  000590
 
                           APFPTABL  000BA8            IKJEFTNS  001128  00009E
 
                             NSCPTABL  001138            IKJEFTAP  0011C8  0005C
8
                             APFTTABL  0011D8
    T                                                      PDS103I ENTRY POINT A
T 0011C8  --  IKJEFTAP                                     PDS104I MODULE LENGTH
  001790  --      6K                                            S             S
    \ \INMR01      &      ADCD112S      IBMUSER      A      A      20130
0             INMR02          IEBCOPY                                  &
                         IBMUSER  DISTEST  PDS     -  ASM  IKJEFTAP  IKJEFTE2  I
KJEFTE  8  IKJEFTNS  LINK  WHOLEJOB \INMR02          INMCOPY
      "4                   \INMR03                         &         {  _      &
            "8    Vs           ?           y                 h{-&5
 
 
 
                                ASM                               IBMUSER   IKJE
FTAP    IKJEFTE2    IKJEFTE8    IKJEFTNS    LINK                            SBGO
LOB   WHOLEJOB
                                                                              //
LKED.SYSLIN  DD *                                                              I
NCLUDE SYSLIBX                                                                 O
RDER   IKJEFTE2(P),IKJEFTE8,IKJEFTNS,IKJEFTAP
   MODE    RMODE(24),AMODE(24)
   SETCODE AC(1)
   ENTRY   IKJEFTAP
     ALIAS   IKJEF  TAP,IKJEFTE2,IKJEFTE8,IKJEFTNS
       NAME    IKJTABLS(R)
                                //IBMUSERB  JOB (ACCT#),-------,
                                  // NOTIFY=&SYSUID,
                                  // CLASS=B,MSGCLASS=X
                                  /  /         JCLLIB ORDER=IBMUSER.FILE234.INST
ALL                                   //* --------------------------------------
---------- *//                        //*    ASSEMBLY OF IKJTABLS FOR Z/OS 1.13
AND BELOW  *//                        //* ----------  --------------------------
------------ *//                        //*      YOU MUST ALWAYS CODE AT LEAST O
NE BLANK       *//                        //*      ENTRY AT THE END OF EACH TABL
E !!!!!        *//                        //* -----------------------  ---------
---------------- *//                        //IKJTABLS  EXEC   REASMLNK,OUTPUT='
IBMUSER.FILE234.LOADLIB',                     //  PARM.LKED='NCAL,MAP,LIST,LET,R
ENT,REUS'                                     //ASM.SYSIN   DD *
                                                                          //  SB
GOLOBB  JOB (ACCT#),-------,                                                // N
OTIFY=&SYSUID,                                                              // C
LASS=B,MSGCLASS=X                                                           /  /
         JC+ LLIB ORDER=IBMUSER.FILE234.INSTALL
//* -----  ------------------------------------------- *//
  //*    ASSEMBLY OF IKJTABLS FOR Z/OS 1.13 AND BELOW  *//
  //* ----------  -------------------------------------- *//
    //*    YOU MUST ALWA  YS CODE AT LEAST ONE BLANK       *//
      //*      ENTRY AT THE END OF EACH TABLE !!!!!        *//
      //* -----------------------  ------------------------- *//
        //IKJTABLS  EXEC REASMLNK,OUTPU  T='IBMUSER.FILE234.LOADLIB',
          //  PARM.LKED='NCAL,MAP,LIST,LET,RENT,REUS'
          //ASM.SYSIN   DD *
            IKJEFTAP CSECT
                       DC    CL16'IKJEFTAP86.120  '               000000 C9D2D1C
5...          APFTTABL DC    CL32'$$      AAATHCHKAACMD001AACMD002'   0010 5B5B4
040...                   DC    CL32'AACMD003AACMD004AACMD005AACMD006'   0030 C1C
1C3D4...                   DC    CL32'AACMD007AACMD008AACMD009AACMD014' 0050 C1C
1C3D4...                   DC    CL32'AACMD015AACNG001AACNG002AACNG003' 0070 C1C
1C3D  4...                   DC    CL32'AAGRPUSRAAPSWCHKAAREP011ADB2ATH ' 0090 C
1C1C  7D9...                   DC    CL32'ADB2UTILADRDSSU APFCMD  BACKUP  ' 00B0
 C1C4C2F2...                   DC    CL32'BBSDTCPABCMNUPD BDMNUPD BFFLU   ' 00D0
 C2C2E2C4...                     DC    CL32'CADU4804CADU4805CAT01IKBCAZ2CTSO' 00
F0 C3C1C4E4...                     DC    CL32'CDFAUTH CDSCB   CSCCOPY CSFDAUTH'
0110 C3C4C6C1...                   DC    CL32'CSFDPKDSEDGAUD  EDGHSKP EDGRPTD '
0130 C3E2C6C4...                   DC      CL32'EDGUTIL EMCICS61EMCSNAP EMCTF
' 0150 C5C4C7E4...                     DC    CL32'EMCTFU  EOUCCSYMEQQMINORERWMAU
TH' 0170 C5D4C3E3...                   DC    CL32'EX      FDRABR  FDRABRUTFDRCPK
  ' 0190 C5E74040...                   DC    CL32'FDREP  ORTFDRMONA FDRPASA FDRQ
UERY' 01B0 C6C4D9C5...                   DC    CL  32'FDRSRSA FMNSMF  GIMSMP  GJ
TRUCBS' 01D0 C6C4D9E2...                   DC    CL32'IAMRECVRIAMXMONAICADCFGSIC
ADCT  ' 01F0 C9C1D4D9...                   DC    CL32'ICADDCT ICADFTPDIC  ADIKED
ICADPFTP' 0210 C9C3C1C4...                   DC    CL32'ICADSLOG ICADSOCKICADSO
XDICADSTAK' 0230 C9C3C1C4...                   DC    CL32'ICHDSM00ICHUT100ICHUT2
00ICHUT400' 0250 C9C3C8C4...                   DC    CL32'ICQASLI0IEBCOPY IKJEFF
76IM        ' 0270 C9C3D8C1...                          S     \DC    CL32'IOEAGF
MTIOEAGSLVIOEBAK  IOEBOS  ' 0290 C9D6C5C1...                   DC    CL32'IOECM
  IOEDCEERIOEDFSXPIOEFTS  ' 02B0 C9D6C5C3...                   DC    CL32'IOEGRW
AGIOEMAPIDIOENEWAGIOESALVG' 02D0 C9D6C+ 5C7...                     DC    CL32'IO
ESCOUTIOEUDBG IOEZADM IRRDPI00' 02F0 C  9D6C5E2...                   DC    CL32'
IRRDSC00IRRUT100IRRUT200IRRUT400' 0310 C9D9D9C4...                   DC    CL32'
JCLSRB  LSLT    LWATEDITLWATMGR ' 0330 D1C3D3E2...                   DC    CL32
 'MIMTSO  MNAPFPRCMNCDTPRCMNCD2PRC' 0350 D4C9D4E3...                     DC    C
L32'MNGRPPRCMNLLTPRCMNLPAPRCMNPPTPRC' 0370 D4D5C7D9...                   DC    C
L32'MNRACPRCMNRAUPRCMNRFRPRCMNSMFPRC' 0390 D4D5D9C1...                   DC    C
L32'MNSM4PRCMN  STCPRCMNSVCPRCMXI     ' 03B0 D4D5E2D4...                     DC
   CL32'MXITSF  NDVRC1  OBROUTR OBSPFAU ' 03D0 D4E7C9E3...                   DC
   CL32'OLDCOPY OMCICS  OMEGAMONOMSPFAU ' 03F0 D6D3C4C3...                   DC
   CL32'PDSCLEANPDSEAUTHPDSFA  ST PMGLAUTH' 0410 D7C4E2C3...                   D
C    CL32  'PSIPCTL PTLTSRB RCFRESETREATSF  ' 0430 D7E2C9D7...
 DC    CL32'SAMENDM SPFCOPY TMONMVS TMSIOCAP' 0450 E2C1D4C5...
 DC    CL32'TMSSCR                            ' 0470 E3D4E2E2...
   DC    CL32'                                  ' 0490 40404040...
     DC    CL32'                                ' 04B0 40404040...
     DC    CL32'                                ' 04D0 4040  4040...
       DC    CL32'                                  ' 04F0 40404040...
         DC    CL32'                                ' 0510 40404040...
         DC    CL32'                                ' 0530 40404040...
           DC    CL32'                                ' 0550   40404040...
             DC    CL32'                                ' 0570 40404040...
             DC    CL32'                                ' 0590 40404040...
               DC    CL24'                        '       0005B0 40404040...
        R0       EQU   0
        R1       EQU   1
        R2       EQU   2
          R3         EQU   3
            R4       EQU   4
            R5       EQU   5
              R6       EQU   6
                R7       EQU   7
                R8       EQU   8
                  R9       EQU   9
                    R10      EQU   10
                    R11      EQU   11                                +
                      R12      EQU   12
                          R13      EQU   13
                          R14      EQU   14
                          R15      EQU   15
    +                                  END
                                IKJEFTE2 CSECT
                                         DC    CL16'IKJEFTE276.152  '
    000000 C9D2D1  C5...          APFCTABL DC    CL32'$$      $HOWMVS $MDSMAIN#
      ' 0010 5B5B40  40...                   DC    CL32'ABUDSN  AD      ADB2UTIL
ADDDIR  ' 0030 C1C2E4C4...                   DC    CL32'ADDFILE ADDGROUPADDSD
ADDUSER ' 0050 C1C4C4C6...                     DC    CL32'ADIR    ADNR    ADYOPC
MDAF      ' 0070 C1C4C9D9...                     DC    CL32'AG      ALD     ALF
    ALG     ' 0090 C1C74040...                   DC    CL32'ALTDIR  ALTDSD  ALTE
R   ALTFILE ' 00B0 C1D3E3C4...                     DC    CL32'ALTGROUPALTUSER AL
U     APCACBL ' 00D0 C1D3E3C7...                   DC      CL32'APCANB  APCARB
APCAUB  APFCMD  ' 00F0 C1D7C3C1...                   DC    CL32'ASUB    AU
AUCMD   BACKUP  ' 0110 C1E2E4C2...                   DC    CL3  2'BCMDEL  BCMDEL
1 BCMNAUTHBCMNUPD ' 0130 C2C3D4C4...                   DC    CL32'BDAT  A   BDMN
NOTCBDMNUPD BINDDATA' 0150 C2C4C1E3...                   DC    CL32'BLKUPD  BUDD
SN  BUDGET  BURN    ' 0170 C2D3D2E4...                   DC    CL32'CAE$BQRYC  A
NCELU CAS9UDTNCDELPAIR' 0190 C3C1C55B...                   DC    CL32'CDELPATHCD
MRSTATC  DSCB   CDSCBA  ' 01B0 C3C4C5D3...                   DC    CL32'CESTPAIR
CESTPATHCGROUP  CHKPT   ' 01D0 C3C5E2E3...                   DC    CL32'CINMX
CKGRACF CLCH  ECK CNCLPG  ' 01F0 C3C9D5D4...                   DC    CL32'CNCLPG
A CNVTCAT CO      COFDMO  N ' 0210 C3D5C3D3...                   DC    CL32'CONN
ECT CONS    CONSPROFCPSCB   ' 0230 C3D6D5D5...                   DC    CL32'CQUE
RY  CQUERYSGCQX     CRECOVE  R' 0250 C3D8E4C5...                   DC    CL32'CS
CAN   CSUSPENDDCAS    DD      ' 0270 C3E2  C3C1...
   DC    CL32'DDIR    DEF     DEFINE  DEL     ' 0290 C4C4C9D9...
   DC    CL32'DELDIR  DELDSD  DELETE  DELF ILE ' 02B0 C4C5D3C4...
     DC    CL32'DELGROUPDELUSER DF      DG      ' 02D0 C4C5D3C7...
       DC    CL32'DITTO   DITTOA  DITTOU  DMRSHR  ' 02F0 C4C9E3E3...
       DC    CL32'DRI     D       S     \SPRINT DU      DUMPPPT ' 0310 C4D9C940.
..                   DC    CL32'ERWMAUTHEX      EXP     EXPORT  ' 0330 C5D9E6D4.
..                   DC      CL32'EYU9XENFEZAZSSI EZBREINIEZBTNINI' 0350 C5E8E4F
9...                   DC    CL32'FCESTABL  FCQUERY FCWITHDRFTPD    ' 0370 C6C3C
5E2...                   DC    CL32'FTPDNS  GJTRUCBSIEBCOPY IKJEHDSF' 0390 C6E3D
7C4...                   DC    CL32'IKJEHDS  1IKJPRMLBIM      IMP     ' 03B0 C9D
2D1C5...                   DC    CL32'IMPORT  IOBSNMP IQI  EXPN IQIMAIN ' 03D0 C
9D4D7D6...                   DC    CL32'IQIQUERYIQIQUIT IRRDPI00ISPICP  ' 03F0 C
9D8C9D8...                   DC    CL32'ISRPCP  KOMPRESSLAST  CLPALBADV   ' 0410
 C9E2D9D7...                   DC    CL32'LBAGENT LD      LDATA   LDIR      ' 04
30 D3C2C1C7...                   DC    CL32'LDIRECT LF      LFILE   LG      ' 04
50 D3C4C9D9...                   DC    CL32'LISTB   LISTBC  LISTD   LISTDATA'
0470 D3C9E2E3...                   DC    CL32'LISTDS  LISTDSD LISTGRP LISTUSER'
0490 D3  C9E2E3...                   DC    CL32'LLWA    LMRKTSO LOCATE  LOCKTERM
' 04B0 D3D3E6C1...                   DC    CL32'LOOK    LPQ     LPR     LPRM
' 04D0 D3D6D6D  2...                   DC    CL32'LPROC   LSLT    LU      LWATMG
R ' 04F0 D3D7D9D6...                     DC    CL32'MAKEUSERMERLIN  MIMTSO  MODD
VIPA' 0510 D4C1D2C5...                   DC    CL32'MU      MVPMAIN MVPXDISPMVSC
PCMD' 0530 D4E44040...                     DC    CL32'NAMEDXFRNAMED4  NDVRC1  NE
TSTAT ' 0550 D5C1D4C5...                     DC    CL32'NSUPDATENSUPDAT4NYPPW
OC      ' 0570 D5E2E4D7...                   DC    CL32'OMPROUTEOP      OPER
OPERATOR' 0590 D6D4D7D9...                   DC      CL32'OPINFO  OPING   OPSCMD
  OPSCONSL' 05B0 D6D7C9D5...                   DC      CL32'OPSOSCMDOPSPARM OPSR
EPLYOPSTAT  ' 05D0 D6D7E2D6...                   DC    CL32'OPSWTO  OSASK   OSCM
D   OSNMPD  ' 05F0 D6D7E2E6...                   DC    CL32'OSWTO     OTRACERTPA
CKRAT PARMLIB ' 0610 D6E2E6E3...                   DC    CL32'PASSW  ORDPDIR
PDSCLEANPDSEAUTH' 0630 D7C1E2E2...                   DC    CL32'PDS38   PE
PERMDIR PERMFILE' 0650 D7C4E2F3...                   DC    CL32'PERMIT  PF
PH  RASE  PING    ' 0670 D7C5D9D4...                   DC    CL32'POPPER  PPTD
    PPTSCAN PRINT   ' 0690 D7D6D7D7...                   DC    CL32'PW      Q
    QUEUE   Q522    ' 06B0 D7E64040...                   DC    CL32'RACDCERTRACF
SIM RACLINK RACONVR  T' 06D0 D9C1C3C4...                   DC    CL32'RACPRIV RA
LT    RALTER  RDE  F    ' 06F0 D9C1C3D7...                   DC    CL32'RDEFINE
RDEL    RDELETE RE      ' 0710 D9C4C5C6...                   DC    CL32'RECEIVE
RELOGON REMOVE  REPRO   ' 0730 D9C5C+ 3C5...                   DC    CL32'RESOLV
E REVIEW  REVVSAM REXCPCMD' 0750   D  9C5E2D6...                   DC    CL32'RL
      RLIST   RLOAD   RLOADA  ' 0770 D9D34040...                   DC    CL32'RM
M     RPF     RPFE    RSH     ' 0790 D9D4D440...                   DC    CL32'RS
HD    RVARY   SAMENDM SDSF    ' 07B0 D9E2C8C4..+ .                     DC    CL3
2'SE      SEARCH  SECURE  SEE     ' 07D0 E2C5  4040...                   DC    C
L32'SEND    SEND@   SETC    SETCACHE' 07F0 E2C5D5C4...                   DC    C
L32'SETPASSWSETPW   SETPW2  SETR    ' 0810 E2C5E3D7...                     DC
 CL32'SETROPTSSETUSER SHCDS   SM      ' 0830 E2C5E3D9...                     DC
   CL32'SMTP    SNTPD   SPACE   SPFCOPY ' 0850 E2D4E3D7...                   DC
   CL32'SPY     SR      SRDIR   SRF     ' 0870 E2D7E840...                   DC
   CL32  'SRFILE  SRSTAT  STEPLIB STEPLIBN' 0890 E2D9C6C9...
 DC    CL32'STEPLIB4SU      SYNC    SYSPROG ' 08B0 E2E3C5D7...
 DC    CL32'TEAEXTSOTERM    TERMINALTESTA   ' 08D0 E3C5C1C5...
 DC    CL32'TESTAUTHTMON  CICSTMONDB2 TMONIMS ' 08F0 E3C5E2E3...
   DC    C  L32'TMONMVS TRACERTETRANSMITTRAPFWD ' 0910 E3D4D6D5...
     DC    CL32'TRMD    TSOENQ  TSOSMS  TSUB    ' 0930 E3D9D4C4...
     DC    CL32'UGRP    UKEYCSA UPRC    U  SAT    ' 0950 E4C7D9D7...
       DC    CL32'USET      USIT    USOT    USPT    ' 0970 E4E2C5E3...
         DC    CL32'USUR    USUT    USWT    USXT    ' 0990 E4E2E4D9...
         DC    CL32'VERIFY  VFY     VIEWUSERVLFNOTE ' 09B0   E5C5D9C9...
           DC    CL32'VMCF    VU      WA  ITT   WHEREIS ' 09D0 E5D4C3C6...
             DC    CL32'WHOENQ  WSSTAT  XD      XDCCALLA' 09F0 E6C8D6C5...
             DC    CL32'XDCCMDA XF      XMDSMAINXMIT    ' 0A10 E7C4C3C3...
               DC    CL32'XTRCUSERXU      YKCONMSGZAP       ' 0A30 E7E3D9C3...
                 DC    CL32'ZAP$    ZAPLWA  ZAPV            ' 0A50 E9C1D75B...
                 DC    CL32'                                ' 0A70 40404040...
                   DC    CL32'                                ' 0A90 4  0404040.
..                   DC    CL32'                                ' 0AB0 40404040.
..                   DC    CL32'                                ' 0AD0 40404040.
..                   DC    CL  32'                                ' 0AF0 4040404
0...                     DC    CL32'                                ' 0B10 40404
040...                   DC    CL32'                                ' 0B30 40404
040...                   DC    CL32'                                  ' 0B50 404
04040...                    DC    CL32'                                ' 0B70 4
0404040...                   DC    CL8'        '                        000B90 4
0404040...          R0       EQU   0
            S     \                 R1       EQU   1
                                    R2       EQU   2
                                    R3       EQU   3
            +                           R4       EQU   4
                                          R5       EQU   5
                                          R6       EQU   6
                                            R7       EQU   7
                                              R8       EQU   8
                                              R9       EQU   9
                                              R10        EQU   10
                                                  R11      EQU   11
                                                  R12      EQU   12
                                                  R13      EQU     13
                                                    R14      EQ  U   14
                                                      R15      EQU   15
                                                               END
                                                        IKJEFTE8 CSECT
                                                                   DC    CL16'IK
JEFTE885.092  '               000000 C9D2D1C5...          APFPTABL DC    CL32'AD
B2ATH ADB2UTILA  DRDSSU ALPAUTH ' 0010 C1C4C2F2...                   DC    CL32'
APCACBL APCANB  A  PCARB  APCAUB  ' 0030 C1D7C3C1...                   DC    CL3
2'APFPGM  ARMAUTH COMMAND CONSPROF' 0050 C1D7C6D7...                   DC    CL3
2'CSFDAUTHCSFDPKDSCTMAES  CTMD  FL  ' 0070 C3E2C6C4...                   DC    C
L32'CTMRUN  CTRCTR  CTRSPL  EDGAUD    ' 0090 C3E3D4D9...                   DC
 CL32'EDGHSKP EDGRPTD EDGUTIL EMCICS61' 00B0 C5C4C7C8...                   DC
 CL32'EMCSNAP EMCTF   EMCTFU  EQQMINOR' 00D0   C5D4C3E2...                   DC
   CL32'ERWMAUTHFDRABR  FDRABRUTFDRCPK  ' 00F0 C5D9  E6D4...
             DC    CL32'FDREPORTFDRMONA FDRPASA FDRQUERY' 0110 C6C4D9C5...
             DC    CL32'FDRSRSA FSYTPA00GIMSMP  GJTRUCBS' 01  30 C6C4D9E2...
               DC    CL32'HESEVMI ICADCFGSICADCT  ICADDCT ' 0150 C8C5E2C5...
                 DC    CL32'ICADFTPDICADIKEDICADPFTPICADSLOG' 0170 C9C3C1C4...
                 DC    CL32'ICADSOCKICADSOXDICADSTAKICHDSM00' 0190 C9C3C1C4  ...
                   DC    CL32'ICHUEX00ICHUT100ICHUT200ICHUT400' 01B0 C9C3C8E4...
                   DC      CL32'IDCAMS  IEBCOPY IEHINIT IEHMOVE ' 01D0 C9C4C3C1.
..                   DC    CL32'IEHPROGMIFCEREP1IKJEFF76IOEAGFMT' 01F0 C9C5C8D7.
..                     DC    CL32'IOEAGSLVIOEBAK  IOEBOS  IOECM   ' 0210 C9D6C5C
1...                   DC    CL32'IOEDCEE  RIOEDFSXPIOEFTS  IOEGRWAG' 0230 C9D6C
5C4...                   DC    CL32'IOEMAPIDIOENEWAGIOESALVGIOESCOUT' 0250 C9D6C
5D4...                   + DC    CL32'IOESMBPWIOEUDBG IOEZADM IRMAUTH ' 0270 C9D
6C5E2...                     DC    CL32'IRRDBU00IRRDIP00IRRD  PI00IRRDSC00' 0290
 C9D9D9C4...                   DC    CL32'IRRUT100IRRUT200IRRUT400ITPENTER' 02B0
 C9D9D9E4...                   DC    CL32'IXCMIAPUJCLSRB  KEPSTCTOKOBROUTR' 02D0
 C9E7C3D4...                   DC    C  L32'KOBSPFAULISTDATALOCKTERMLWATMGR '
02F0 D2D6C2E2...                   DC    CL32'MIMTSO  MVPXDISPNDVRC1  OBROUTR '
0310 D4C9D4E3...                   DC    CL32'OBSPFAU OLDCOPY OMCICS  OMEGAMON'
0330 D6C2E2D7...                   DC    CL32'OMSPFAU   PDSCLEANPDSCLEARPDSEAUTH
' 0350 D6D4E2D  7...                   DC    CL32'PDSFAST PING    PSIPCTL RESOLV
E ' 0370 D7C4E2C6...                   DC    CL32'REVVSAM REXCPCMDSAMENDM SCRAMR
E ' 0390 D9C5E5E5...                   DC    CL32'SDSF    SHERCOMMSH  OWMVS SHOW
ZOS ' 03B0 E2C4E2C6...                     DC    CL32'SPFCOPY SYSPROG TESTENQ TM
ONMVS ' 03D0 E2D7C6C3...                   DC    CL32'TMSIOCAPTMSSCR  TSOENQ  TS
OSPA  ' 03F0 E3D4E2C9...                   DC    CL32'WHOENQ  ZAPVIRT ZSIZER
        ' 0410 E6C8D6C5...                   DC      CL32'
          ' 0430 40404040...                   DC    CL32'
          ' 0450 40404040...                   DC    CL32'
          ' 0470 4  0404040...                   DC    CL32'
              ' 0490 40404040...                   DC    CL32'
              ' 04B0 40404040...                   DC    CL32'
              ' 04D0 40404040...                     DC    CL32'
                  ' 04F0 40404040...                   DC    CL32'
                  ' 0510 40404040...                   DC    CL32'
                  ' 0530 40404040...                     DC    CL32'
                      ' 0550 40404040...                   DC    CL32'
                      ' 0570 40404040...          R0       EQU   0
                                                  R1       EQU     1
                                    +                 R2       EQU   2
                                                        R3       EQU   3
                                                        R4       EQU   4      
                                                          R5       EQU   5
                                                            R6       EQU   6
                                                            R7        S     \
   EQU   7                                                                R8
   EQU   8                                                                R9
     EQU   9                                                                R1
0      EQU   10                                                               R1
1      EQU   11                                                               R1
2      EQU   12
R13      EQU     13
  R14      EQU   14
  R15      EQU   15
             END
      IKJEFTNS CSECT
               DC    CL16'IKJEFTNS76.033  '                 000000 C9D2D1C5...
        NSCPTABL DC    XL2'0008'                              000010 0008
                   DC    CL8'OPERATOR'                        000012 D6D7C5D9...
                   DC    XL2'0004'                            00001A   0004
                     DC    CL8'OPER    '                          00001C D6D7C5D
9...                   DC    XL2'0008'                            000024 0008
                       DC    CL8'TERMINAL'                        000026 E3C5D9D
4...                     DC    XL2'0004'                            00002  E 000
4                          DC    CL8'TERM    '                        000030 E3C
5D9D4...                   DC    XL2'0000'                            000038 000
0                            DC    CL8'        '                        00003A 4
0404040.  ..                   DC    XL2'0000'                            000042
 0000                          DC    CL8'        '                        000044
 40404040...                   DC    XL  2'0000'                            0000
4C 0000                            DC    CL8'        '                        00
004E 40404040...                   DC    XL2'0000'                            00
0056 0000                          DC    CL8'        '
000058 40404040...                   D  C    XL2'0000'
  000060 0000                          DC    CL8'        '
  000062 40404040...                   DC    XL2'0000'
    00006A 0000                          DC    CL8'          '
      00006C 40404040...                   DC    XL2'0000'
      000074 0000                          DC    CL8'        '
      0000+ 76 40404040...                   DC    XL2'0000'
            00007E 0000                          DC    CL8'        '
            000080 40404040...                   DC    XL2'0000'
            000088 0000                          DC    CL8'        '
   +          00008A 404040  40...                   DC    XL2'0000'
                  000092 0000                          DC    CL8'        '
                  000094 40404040...          R0       EQU   0
                                                R1       EQU   1
                                                  R2       EQU   2
                                                  R3       EQU   3
                                                  R4       EQ  U   4
                                                      R5       EQU   5
                                                      R6       EQU   6
                                                      R7       EQU   7
                                                          R8       EQU   8
                                                          R9       EQU   9
                                                          R10      EQU   10
                                                            R  11      EQU   11
                                                              R12      EQU   12
                                                              R13      EQU   13
                                                                R14      EQU
 14                                                               R15      EQU
 15                                                                        END
 
  //LKED.SY  SLIN  DD *
     INCLUDE SYSLIBX
     ORDER   IKJEFTE2(P),IKJEFTE8,IKJEFTNS,IKJEFTAP
       MODE    RMODE(24),A  MODE(24)
         SETCODE AC(1)
         ENTRY   IKJEFTAP
         ALIAS   IKJEF  TAP,IKJEFTE2,IKJE  FTE8,IKJEFTNS
             NAME    IKJTABLS(R)
                                      IKJEFTE2 CSECT
                                               DC    CL1 6'IKJEFTE276.152  '
            000000 C9D2D1C5...          APFCTABL DC    CL32'$$      $HOWMVS $MDS
MAIN#       ' 0010 5B5B4040...                     DC    CL32'ABUDSN  AD      AD
B2UTILADDDIR  ' 0030 C1C2E4C4...                S     \          DC    CL32'ADDF
ILE ADDGROUPADDSD   ADDUSER ' 0050 C1C4C4C6...                   DC    CL32'ADIR
    ADNR    ADYOPCMDAF      ' 0070 C1C4C9D9...                   DC      CL32'AG
      ALD     ALF     ALG     ' 0090 C1C74040...                     DC    CL32'
ALTDIR  ALTDSD  ALTER   ALTFILE ' 00B0 C1D3E3C4...                   DC    CL32'
ALTGROUPALTUSER ALU     APCACBL ' 00D0 C1D3E3C7...                   DC    CL32'
APCANB    APCARB  APCAUB  APFCMD  ' 00F0 C1D7C3C1...                     DC    C
L32'ASUB    AU      AUCMD   BACKUP  ' 0110 C1E2E4C2...                   DC    C
L32'BCMDEL  BCMDEL1 BCMNAUTHBCMNUPD ' 0130 C2C3D4C4...                   DC    C
L32'BDATA   BDMNNOTCBDMN  UPD BINDDATA' 0150 C2C4C1E3...                   DC
 CL32'  BLKUPD  BUDDSN  BUDGET  BURN    ' 0170 C2D3D2E4...                   DC
   CL32'CAE$BQRYCANCELU CAS9UDTNCDELPAIR' 0190 C3C1C55B...                   DC
   CL32'CDELPATHCDMRSTATCDSCB   CDSCBA  '   01B0 C3C4C5D3...                   D
C    CL32'CESTPAIRCES  TPATHCGROUP  CHKPT   ' 01D0 C3C5E2E3...
 DC    CL32'CINMX   CKGRACF CLCHECK CNCLPG  ' 01F0 C3C9D5D4...
 DC    CL32'CNCLPGA CNVTCAT CO      COFDMON ' 0210 C3D5C3D  3...
   DC    CL32'CONNECT CONS    CONSPR  OFCPSCB   ' 0230 C3D6D5D5...
     DC    CL32'CQUERY  CQUERYSGCQX     CRECOVER' 0250 C3D8E4C5...
     DC    CL32'CSCAN   CSUSPENDDCAS    DD      ' 0270 C3E2C3C1...
       DC    CL32'DDIR    DEF     DEFINE  DEL     '   0290 C4C4C9D9...
         DC    CL32'DELDIR  DELDSD  DELETE  DELFILE ' 02B0 C4C5D3C4...
         DC    CL32'DELGROUPDELUSER DF      DG      ' 02D0 C4C5D3C7...
         DC      CL32'DITTO   DITTOA  DITTOU  DMRSHR  ' 02F0 C4C9E  3E3...
             DC    CL32'DRI     DSPRINT DU      DUMPPPT ' 0310 C4D9C940...
             DC    CL32'ERWMAUTHEX      EXP     EXPORT  ' 0330 C5D9E6D4...
             DC    CL32'EYU9X  ENFEZAZSSI EZBREINIEZBTNINI' 0350 C5E8E4F9...
                 DC    CL32'FCESTABLFCQUERY FCWITHDRFTPD    ' 0370 C6C3C5E2...
                 DC    CL32'FTPDNS  GJTRUCBSIEBCOPY IKJEHDSF' 0390 C6E3D7C4...
                 DC    CL32'IKJEHDS1IKJPRMLBIM        IMP     ' 03B0 C9D2D1C5...
                     DC    CL32'IMPORT  IOBSNMP IQIEXPN IQIMAIN ' 03D0 C9D4D7D6.
..                   DC    CL32'IQIQUERYIQIQUIT IRRDPI00ISPICP  ' 03F0 C9D8C9D8.
..                   DC    CL32'ISRPCP  KOMPRESSLASTCLPALBADV     ' 0410 C9E2D9D
7...                   DC    CL  32'LBAGENT LD      LDATA   LDIR    ' 0430 D3C2C
1C7...                   DC    CL32'LDIRECT LF      LFILE   LG      ' 0450 D3C4C
9D9...                   DC    CL32'LISTB   LISTBC  LISTD   LISTDATA' 0470 D3C9E
+ 2E3...                   DC    CL32'LISTDS    LISTDSD LISTGRP LISTUSER' 0490 D
  3C9E2E3...                   DC    CL32'LLWA    LMRKTSO LOCATE  LOCKTERM' 04B0
 D3D3E6C1...                   DC    CL32'LOOK    LPQ     LPR     LPRM    ' 04D0
 D3D6D6D2...                   DC    CL32'LPROC   LSLT    LU +      LWATMGR ' 04
F0 D3D7D9D6...                     DC    CL32'MAKEUSERMERLI  N  MIMTSO  MODDVIPA
' 0510 D4C1D2C5...                   DC    CL32'MU      MVPMAIN MVPXDISPMVSCPCMD
' 0530 D4E44040...                   DC    CL32'NAMEDXFRNAMED4  NDVRC1  NETSTAT
' 0550 D5C1D4C5...                     DC    CL32'NSUPDATENSUPDAT4NYPPW     OC
    ' 0570 D5E2E4D7...                   DC    CL32'OMPROUTEOP      OPER    OPER
ATOR' 0590 D6D4D7D9...                   DC    CL32'OPINFO  OPING   OPSCMD  OPSC
ONSL' 05B0 D6D7C9D5...                   DC    CL32  'OPSOSCMDOPSPARM OPSREPLYOP
STAT  ' 0  5D0 D6D7E2D6...                   DC    CL32'OPSWTO  OSASK   OSCMD
OSNMPD  ' 05F0 D6D7E2E6...                   DC    CL32'OSWTO   OTRACERTPACKRAT
PARMLIB ' 0610 D6E2E6E3...                   DC    CL32'PASSWORDPDIR      PDSCLE
ANPDSEAUTH' 0630 D7C1E2E  2...                   DC    CL32'PDS38   PE      PERM
DIR PERMFILE' 0650 D7C4E2F3...                   DC    CL32'PERMIT  PF      PHRA
SE  PING    ' 0670 D7C5D9D4...                   DC    CL32'POPPER  PPTD    PPTS
CAN P  RINT   ' 0690 D7D6D7D7...                     DC    CL32'PW      Q
QUEUE   Q522    ' 06B0 D7E64040...                   DC    CL32'RACDCERTRACFSIM
RACLINK RACONVRT' 06D0 D9C1C3C4...                   DC    CL32'RACPRIV RALT
RALTER  RDEF    ' 06F0   D9C1C3D7...                     DC    CL32'RDEFINE RDEL
    RDELETE RE      ' 0710 D9C4C5C6...                   DC    CL32'RECEIVE RELO
GON REMOVE  REPRO   ' 0730 D9C5C3C5...                   DC    CL32'RESOLVE REVI
EW  REVVSAM REXCPCMD' 0750 D9C5E2D6...                     DC    CL32  'RL
RLIST   RLOAD   RLOADA  ' 0770 D9D34040...                   DC    CL32'RMM
RPF     RPFE    RSH     ' 0790 D9D4D440...                   DC    CL32'RSHD
RVARY   SAMENDM SDSF    ' 07B0 D9E2C8C4...                     DC    CL32'SE
  SE  ARCH  SECURE  SEE     ' 07D0 E2C54040...                   DC    CL32'SEND
    SEND@   SETC    SETCACHE' 07F0 E2C5D5C4...                   DC    CL32'SETP
ASSWSETPW   SETPW2  SETR    ' 0810 E2C5E3D7...                   DC    CL  32'SE
TROPTSSETUSER SHCDS     SM      ' 0830 E2C5E3D9...                   DC    CL32'
SMTP    SNTPD   SPACE   SPFCOPY ' 0850 E2D4E3D7...                   DC    CL32'
SPY     SR      SRDIR   SRF     ' 0870 E2D7E840...                   DC    CL32'
SRFILE  SR  STAT  STEPLIB STEPLIBN ' 0890 E2D9C6C9...                   DC    C
L32'STEPLIB4SU      SYNC    SYSPROG ' 08B0 E2E3C5D7...                   DC    C
L32'TEAEXTSOTERM    TERMINALTESTA   ' 08D0 E3C5C1C5...                   DC    C
L32'TESTAUTHTMONCIC       S     \STMONDB2   TMONIMS ' 08F0 E3C5E2E3...
         DC    CL32'TMONMVS TRACERTETRANSMITTRAPFWD ' 0910 E3D4D6D5...
         DC    CL32'TRMD    TSOENQ  TSOSMS  TSUB    ' 0930 E3D9D4C4...
         DC    CL32'UGRP    UKEYCS  A UPRC    USAT    ' 09+ 50 E4C7D9D7...
             DC    CL32'USET    USIT    USOT    USPT      ' 0970 E4E2C5E3...
               DC    CL32'USUR    USUT    USWT    USXT    ' 0990 E4E2E4D9...
               DC    CL32'VERIFY  VFY     VIEWUSE  RVLFNOTE ' 09B0 E5C5D9C9...
                 DC    CL32'VMCF    VU      WAITT   WHEREIS ' 09D0 E5D4C3  C6...
                   DC    CL32'WHOENQ  WSSTAT  XD      XDCCALLA' 09F0 E6C8D6C5...
                   DC    CL32'XDCCMDA XF      XMDSMAINXMIT    '   0A10 E7C4C3C3.
..                   DC    CL32'XTRCUSERXU      YKCONMSGZAP     ' 0A30 E7E3D9C3.
..                     DC    CL32'ZAP$    ZAPLWA  ZAPV            ' 0A50 E9C1D75
B...                   DC    CL32'                                ' 0A70 404040
 40...                   DC    CL32'                                ' 0A90 40404
040...                   DC      CL32'                                ' 0AB0 404
04040...                   DC    CL32'                                ' 0AD0 404
04040...                     DC    CL32'                                ' 0AF0 4
0404040...                   DC    CL32'                                  ' 0B10
 40404040...                   DC    CL32'                                ' 0B30
 40404040...                     DC    CL32'                                ' 0B
50 40404040...                   DC    CL32'                                  '
0B70 40404040...                   DC    CL8'        '                        00
0B90 40404040...          R0       EQU   0
                            R1       EQU   1
                              R2       EQU   2
                              R3       EQU   3
                                R4       EQU   4
                                               {R5       EQU   5
                                                R6       EQU   6
                                                  R7       EQU   7
                                                  R  8       EQU   8
                                                    R9       EQU   9
                                                      R10      EQU   10
                                                      R11      EQU     11
                                                        R12      EQU   12
                                                          R13      EQU   13
                                                          R14      EQU   14
     T                                                      R15      EQU   15
                                       +                               END
 
          IKJEFTE8 CSECT
                   DC    CL16'IKJEFTE885.092  '               000000 C9D2D1C5...
          APFPTABL DC    CL32'ADB2ATH ADB2UTILADRDSS  U ALPAUTH ' 0010 C1C4C2F2.
..                     DC    CL32'APCACBL APCANB  APCARB  APCAUB  ' 0030 C1D7C3C
1...                   DC    CL32'APFPGM  ARMAUTH COMMAND CONSPROF' 0050 C1D7C6D
7...                   DC    CL32'CSFDAUTHCSFDPKDSCTMAES  CTMDFL  '   0070 C3E2C
6C4...                   DC      CL32'CTMRUN  CTRCTR  CTRSPL  EDGAUD  ' 0090 C3E
3D4D9...                   DC    CL32'EDGHSKP EDGRPTD EDGUTIL EMCICS61' 00B0 C5C
4C7C8...                   DC    CL32'EMCSNAP EMCTF   EMCTFU  EQQMINOR' 00D0 C5D
4C  3E2...                   DC    CL32'ERWMAUT  HFDRABR  FDRABRUTFDRCPK  ' 00F0
 C5D9E6D4...                   DC    CL32'FDREPORTFDRMONA FDRPASA FDRQUERY' 0110
 C6C4D9C5...                   DC    CL32'FDRSRSA FSYTPA00GIMSMP  GJTRUCBS' 0130
 C6C4D9E2...                     DC    CL32'HESEVMI ICADCFGSICAD  CT  ICADDCT '
0150 C8C5E2C5...                   DC    CL32'ICADFTPDICADIKEDICADPFTPICADSLOG'
0170 C9C3C1C4...                   DC    CL32'ICADSOCKICADSOXDICADSTAKICHDSM00'
0190 C9C3C1C4...                     DC    CL32'ICHUEX00ICHUT100ICHUT200ICHUT400
'   01B0 C9C3C8E4...                   DC    CL32'IDCAMS  IEBCOPY IEHINIT IEHMOV
E ' 01D0 C9C4C3C1...                   DC    CL32'IEHPROGMIFCEREP1IKJEFF76IOEAGF
MT' 01F0 C9C5C8D7...                   DC    CL  32'IOEAGSLVIOEBAK  IOEBOS  IOEC
M   ' 0210 C9D6C5C  1...                   DC    CL32'IOEDCEERIOEDFSXPIOEFTS  IO
EGRWAG' 0230 C9D6C5C4...                   DC    CL32'IOEMAPIDIOENEWAGIOESALVGIO
ESCOUT' 0250 C9D6C5D4...                   DC    CL32'IOESMBPW  IOEUDBG IOEZADM
IRMAUTH ' 0270 C9D6C5E2...                     DC    CL32'IRRDBU00IRRDIP00IRRDPI
00IRRDSC00' 0290 C9D9D9C4...                   DC    CL32'IRRUT100IRRUT200IRRUT4
00ITPENTER' 02B0 C9D9D9E4...                   DC    CL32'IXCMIAPUJCLSRB  KEP  S
TCTOKOBROUTR' 02D0 C9E7C3D4...                   DC      CL32'KOBSPFAULISTDATALO
CKTERMLWATMGR ' 02F0 D2D6C2E2...                   DC    CL32'MIMTSO  MVPXDISPND
VRC1  OBROUTR ' 0310 D4C9D4E3...                   DC    CL32'OBSPFAU OLDCOPY OM
CICS  OMEGAM ON' 0330 D6C2E2D7...                   DC    CL32'OMSPF  AU PDSCLE
ANPDSCLEARPDSEAUTH' 0350 D6D4E2D7...                   DC    CL32'PDSFAST PING
  PSIPCTL RESOLVE ' 0370 D7C4E2C6...                   DC    CL32'REVVSAM REX
    S     \CPCMDSAMENDM SCRAMRE ' 0390 D9C5E5E5...                   DC    CL32'
SDSF    SHERCOMMSH  OWMVS SHOWZOS ' 03B0 E2C4E2C6...                   DC    CL3
2'SPFCOPY SYSPROG TESTENQ TMONMVS ' 03D0 E2D7C6C3...                   DC    CL3
2'TMSIOCAPTM  SSCR  TSOENQ  TSOSPA  ' 03F0 E3D4E2C9...                   DC    C
L32'WHOENQ  ZAPVIRT ZSIZER            ' 0410 E6C8D6C5...                   DC
 CL32'                                ' 0430 40404040...                   DC
 CL32'                                  ' 0450 40404040...                   DC
   CL32'                                ' 0470 40404+ 040...                   D
C    CL32'                                ' 0490 4  0404040...
 DC    CL32'                                  ' 04B0 40404040...
   DC    CL32'                                ' 04D0 40404040...
   DC    CL32'                                ' 04F0 40404040...
     DC    CL32'                                ' 0510 40  404040...
       DC    CL32'                                ' 0530 40404040...
       DC    CL32'                                ' 0550 40404040...
         DC    CL32'                                ' 0570 40404040...
  R0       EQU   0
  R1       EQU   1
  R2       EQU   2
    R3         EQU   3
      R4       EQU   4
      R5       EQU   5
        R6       EQU     6
          R7       EQU   7
          R8       EQU   8
            R9       EQU   9
              R10      EQU   10
              R11      EQU   11
                R12      EQU   12
                  R13      EQU   13
                  R14      EQU   14
                    R15      EQU   15
                               END
                       {                          IKJEFTNS CSECT
                                                           DC    CL16'IKJEFTNS76
.0  33  '               000000 C9D2D1C5...          NSCPTABL DC    XL2'0008'
                        000010 0008                            DC    CL8'OPERATO
R'                        000012 D6D7C5D9...                   DC    XL2'0004'
                 +          00001A 0004                          DC    CL8'OPER
   '                          00001C D6D7C5D9...                   DC      XL2'0
008'                            000024 0008                          DC    CL8'T
ERMINAL'                        000026 E3C5D9D4...                   DC    XL2'0
004'                              00002E 0004                          DC    CL8
'TERM      '                        000030 E3C5D9D4...                   DC    X
L2'0000'                            000038 0000                          DC    C
L8'        '                        00003A 40  404040...                   DC
 XL2'0000'                              000042 0000                          DC
   CL8'        '                        000044 40404040...                   DC
   XL2'0000'                            00004C 0000                            D
C    CL8'        '                        0  0004E 40404040...
 DC    XL2'0000'                            000056 0000
 DC    CL8'        '                        000058 40404040...
   DC    XL2'0000'                            000060 0000
     DC    CL8'        '                        000062 40404040...
     DC    XL2'0000'                            00006A 0000
     DC      CL8'        '                        00006C 40404040...
         DC    XL2'0000'                            000074 0000
         DC    CL8'        '                        000076 40404040...
         DC    XL2'0000'                              00007E 0000
           DC      CL8'        '                        000080 40404040...
             DC    XL2'0000'                            000088 0000
             DC    CL8'        '                          00008A 40404040...
               DC    XL2'0000'                              000092 0000
                 DC    CL8'        '                        000094 40404040...
        R0       EQU   0
          R1       EQU   1
            R2       EQU   2
            R3       EQU   3                                          
              R4       EQU   4
                R5       EQU   5
                R6       EQU   6                              S     \
                              R7       EQU   7
              +                 R8       EQU   8
                                  R9       EQU   9
                                    R10      EQU   10
                                    R11      EQU   11
                                      R12      EQU   12
                                        R13      EQU   13
                                        R14      EQU   14
                                        R15        EQU   15
                                                     END
                                             {                         &IKJEFTAP
 CSECT
 DC    CL16'IKJEFTAP86.120  '                 000000 C9D2D1C5...          APFTTA
BL DC    CL32'$$      AAATHCHKAACMD001AACMD002' 0010 5B5B4040...
     DC    CL32'AACMD003AACMD004AACMD005AACMD006' 0030 C1C1C3D4...
     DC    CL32'AACMD007AACMD008AACMD009AACMD014'   0050 C1C1C3D4...
       DC    CL32'AACMD015AACNG001AACNG002AACNG003' 0070 C1C1C3D4...
       DC      CL32'AAGRPUSRAAPSWCHKAAREP011ADB2ATH ' 0090 C1C1C7D9...
         DC    CL32'ADB2UTILADRDSSU APFCMD  BACKUP  ' 00B0 C1C4C2  F2...
           DC    CL32'BBSDTCPABCMNUPD BDMNUPD BFFLU   ' 00D0 C2C2E2C4...
           DC    CL32'CADU480  4CADU4805CAT01IKBCAZ2CTSO' 00F0 C3C1C4E4...
             DC    CL32'CDFAUTH CDSCB   CSCCOPY CSFDAUTH' 0110 C3C4C6C1...
               DC    CL32'CSFDPKDSEDGAUD  EDGHSKP EDGRPTD ' 0130 C3E2C6C4...
               DC    CL32'EDGUTIL EMCICS61EMCS  NAP EMCTF   ' 0150 C5C4C7E4...
                 DC    CL32'EMCTFU  EOUCCSYMEQQMINORERWMAUTH' 0170 C5D4C3E3...
                   DC    CL32'EX      FDRABR  FDRABRUTFDRCPK  ' 0190 C5E74040...
                   DC    CL32'FDREPORTFDRMONA FDRPASA FDRQUERY'   01B0 C6C4D9C5.
..                   DC    CL32'FDRSRSA FMNSMF  GIMSMP  GJTRUCBS' 01D0 C6C4D9E2.
..                   DC    CL3  2'IAMRECVRIAMXMONAICADCFGSICADCT  ' 01F0 C9C1D4D
9...                   DC    CL32'ICADDCT ICADFTPDICADIKEDICADPFTP' 0210 C9C3C1C
  4...                   DC    CL32'ICADSLOGICADSOCKICADSOXDICADSTAK' 0230 C9C3C
1C4...                   DC    CL32'ICHDSM00I  CHUT100ICHUT200ICHUT400' 0250 C9C
3C8C4...                   DC    CL32'ICQASLI0IEBCOPY IKJEFF76IM      ' 0270 C9C
3D8C1...                     DC    CL32'IOEAGFMTIOEAGSLVIOEBAK  IOEBOS  ' 0290 C
9D6C5C1...                   DC    CL32'IOECM   IOEDCEERIOED  FSXPIOEFTS  ' 02B0
 C9D6C5C3...                   DC    CL32'IOEGRWAGIOEMAPIDIOENEWAGIOESALVG' 02D0
 C9D6C5C7...                   DC      CL32'IOESCOUTIOEUDBG IOEZADM IRRDPI00' 02
F0 C9D6C5E2...                   DC    CL32'IRRDSC00IRRUT100IRRUT200IRRUT40+ 0'
0310 C9D9D9C4...                   DC    CL32'JCLSRB  LSLT    LWATEDITLWA  TMGR
' 0330 D1C3D3E2...                   DC    CL32'MIMTS  O  MNAPFPRCMNCDTPRCMNCD2P
RC' 0350 D4C9D4E3...                   DC    CL32'MNGRPPRCMNLLTPRCMNLPAPRCMNPPTP
RC' 0370 D4D5C7D9...                   DC    CL32'MNRACPRCMNRAUPRCMNRFRPRCMNSMFP
RC' 0390   D4D5D9C1...                   DC    CL32'MNSM4PRCMNSTCPRCMN  SVCPRCMX
I     ' 03B0 D4D5E2D4...                   DC    CL32'MXITSF  NDVRC1  OBROUTR OB
SPFAU ' 03D0 D4E7C9E3...                   DC    CL32'OLDCOPY OMCICS  OMEGAMONOM
SPFAU ' 03F0 D6D3C4C3..  .                   DC    CL32'PDSCLEANPDSEAUTHPDSFAST
PMGLAUT  H' 0410 D7C4E2C3...                   DC    CL32'PSIPCTL PTLTSRB RCFRES
ETREATSF  ' 0430 D7E2C9D7...                   DC    CL32'SAMENDM SPFCOPY TMONMV
S TMSIOCAP' 0450 E2C1D4C5...                     DC    CL32'TMSSCR
            ' 0470 E3D4E+ 2E2...                   DC    CL32'
              ' 0490 4  0404040...                   DC    CL32'
                ' 04B0 40404040...                     DC    CL32'
                  ' 04D0 40404040...                   DC    CL32'
                  ' 04F0 40404040...                     DC    CL32'
                    ' 0510 40404040...                   DC    CL32'
                      ' 0530 40404040...                   DC    CL32'
                      ' 0550 40404040...                     DC    CL32'
                        ' 0570 40404040...                   DC    CL32'
                          ' 0590 40404040...                   DC    CL24'
                  '       0005B0 40404040...          R0       EQU   0
                                                        R1       EQU   1
                                                          R2       EQU   2
                                                          R3       EQU   3
                                                            R4       EQU   4
                                                              R5       EQU   5
                                                              R6       EQU   6
                                                                R7       EQU   7
                                                                 R8       EQU
 8                                                                R9       EQU
 9                                                                  R10      EQU
   10                                   S
  R11      EQU   11
  R12      EQU   12
    R13      EQU   13
      R14      EQU   14
      R15      EQU   15
          +      END                                           &
           {             \INMR06                        S             S     \ \I
NMR01      &      ADCD112S      IBMUSER      A      A      20130421132725
    : INMR02          IEBCOPY                                           _;
{                IBMUSER  FILE234  LOADLIB    >-  DISTEST  DISTESTD  IKJEFTAP
 IKJEFTE2  IKJEFTE8  IKJEFTNS  IKJTABLS  READLMOD  REBUILD  RESCHECK  RESOURCE \
INMR02          INMCOPY                          "4                   \INMR03
                      &         {  _   _;  {           "8    Vs   &       ?
                          h{-&5     V   Y
 
 
                                                                   IKJEFTE8 MDIS
TEST              S        h     DISTESTD             S        h     IKJEFTAP
         CK       Hy    HIKJTABLS  IKJEFTE2            C2        y    HIKJTABLS
 IKJEFTE8            CK       qy    HIKJTAB  LS
                                    0IKJEFTNS            CK        y    HIKJTABL
S  IKJTABLS            CK       Hy     READLMOD             S        h     REBUI
LD              2        h     RESCHECK             S  { {     h     RESOURCE
            S  - -   h                                                    V
         READLMOD       ?     V
 
 
    l                                                    V         5695PMB01
     |     V        d   569623400           V                                 V
       }      0  &   &      0  READLMOD04/19/1317.57
                                                /    k -    &n      okP-  0  N -
      y     0 fK     n       k      0 H           { 0 D \            \   &  hP
    0                                                                   0P
\  &\   \ %&\   \  &\   \  &\   \  &\   \  &\   \  &\   \  &\  o   (0 dIEWBIND
 0     &      0 0         0  &0     <&  % 0 { 0 &  [\\     N           x       U
NABLE TO START IEWBIND DI  ALOG, ABEND  ING         ?    i       P  - - 0
                                                         P      \  &\   \ %&\
\  &\   \  &\   \ -&\   \ %&\  o    0  &0 - 0         0  &0     <&  % 0 H 0 &  [
\\     N           x       UNABLE TO CREAT  E A WORKM  OD, ABENDING
 i       k   N -      &k   K   -         n      <      kP-  0      N -      fk
 K   -         n      b     %kP-  0      n      HkP   0 }
                                        qP      \  &\   \ %  &\   \    &\   \ -&
\   \ _&\   \  &\   \  &\   \  &\   \  &\   \  &\   \  &\   \ _&\   \ _&\  o
0 -       0  &0     <&  % 0   0 &  [\\     N        H  x       ERROR INCLUDING R
EQUESTED MEMBER, ABENDING         (    i       n      UN        UN   -     P
   +    h 0    K    4 0  K      0  K    M 0  K      0  K      0  K      0  K
    0  K    m 0  K    4 0  K     N -      fK   -        (n      b     %kP-  0
   k -    h    N -      - 0 Q
           P        \  &\   \ %&\   \ *&\   \ -&\   \  &\   \  &\      &\   \  &
\   \  &\  o      0 -     + 0  &0     <&  % 0 * 0 &  [\\      0   0
                                                   P      \  &\   \ %&\   \ -&\
  \ -&\      &\   \  &\   \  &\     \  &\   \ >&\  o    0 -       0  &0     <&
% 0   0 &  [\\      0   0 -
           P      \  &\   \ %&\   \  &\   \ -&\   \  &\   \  &\   \  &\   \  &\
     &\   \  &\   \  &\   \  &\  o    0 -       0    &0     <&  % 0   0 &  [\\
    0  n -     K -   K -   K -  %K -   K -  hN   -  d }  kE- K   - K     K   -
        0 @q }
 
                                              P    NONE
                               B_ESD        4  B_RLD           B_TEXT          B
_SYM           B_IDRU          B_IDRL          B_IDRZ          B_IDRB          B
_NA  ME          B_MAP        +    IEWBESD   "\       -   [        IEWBRLD     "
M           /        IEWBIDU   "\       -   [        IEWBIDL   "0           %
     IEWBIDZ   "8                    IEWBIDB   "M                    IEWBSYM   "
\       -   [       3  IEWBTXT               "\        IEWBBNL
       IEWB  MAP                             NAME                c
                 ANS      V                             *   %   @
                  V             V              RESOURCE        READLMOD   0   ?
    V
 
                                          z
                               V           5695PMB01               V        d
  569623400           V                     -   0           V     -  }
                  0  &   &      0  RESOURCE04/19/1318.00
                                                       N     -    N
}N         m    0  N         m    0  N         N         m    0  N   /       m
 N         n,      N         m    0  N         m    0  x       RESOURCE: INVALID
 PARM ON EXEC STATEMENT         ?    i          S     \    n          @ { Y
 N {          B   uK {        0      N        F     0  j {     N             N
       n             N {       K      0  n {     K   { P { {  0       0       0
Q     0  &  <&  &           0 <   :     0   \              \ &0  &   &   &  *!
 &      <   &   m       <      (  \nY      nY     hK  C/ (   x       *** NO CONT
ROL RECORDS IN SYSIN FILE      K  ;       ?    i       nY      (    0 oN  p/
 (    0 oN  p/@    (    0 oN  p/b    (  & 0 oK  C/ (   K  ;    x         DROPPED
 AN INVALID CONTROL RECORD        0 o(0 mREBUILD   0     &        0    k
0    (                  <           0 *q }   &     -      p   7    K  C/VK  Q p(
   n* p   U     9kN   0        &  hP     P  % %K ^  pK    pK ^D  K     K  C/ K
\ pK     /hK  0  (      *&  -k   (   (  y(  mkY     h 9      &  <     X       t
X       -     X2     k   K     k   P     (  *   -   t X2    tk   N           k
 P     (  * 0  K  C  (   K  ;  x       DROPPED AN INVALID DATA-ONLY CONTROL RECO
RD          < 9    &    q     X   [     X   [   [ X   [N  u n   f   u X   [   -
    X2     k   K     k        XK     m   K     P        [ Xk   2    [K     (  *
  -N           K     k   k   k   K     P     (  *N  u n   k   -   u X2    uk   N
        [k   K     P     (  * 0 kK    C  (   K  ;    x       DROPPED AN INVALID
USING CONTROL RECORD          q 9    &      w X       [ X    n       nZ
  X       -   w X2    wk     k   k   2    [|0   3  K     (  * 0 +K  C  (   K  ;
   x       DROPPED AN INVALID ULABL CONTROL RECORD              9    &  qP ^M^MK
 ^ / (   N ^\     k  ^\  ^U {     <K  : n  {                u      {     K  b n
 {      K                {    sN { /       N    :    N    b    j {     K  {{ K
A{  0 @N { /     N  :/     N    b    j {     K  %{ K   {  0 @N { /  k   @N    b
  @j {    @   -K   { k   k   P     K    :(  *q  <!{     bN ^Q         q 9    K
:  K  b  &   K ^ / (     ^\     =  ^U {     <K  | n  {        2                {
    dK    n  {                       {     N  |         -K   { k   n {     k&  n
   {     k   K   { K    nN         K     (  *q  <!{     HN ^Q           9K  |  K
         &  %K ^M     %      [    0  K  C  (     x       MISSING TEXT STORA  GE
SIZE, ABENDING               i          0       0   \            \ &   &   !  %&
  %K ^ / (   N ^  \        ^\  ^U      ^M$ ^\!       N ^Q         % 9    &    0
@   0   d 0 h     0    n ^Y    K  <^ K   ^Y3d ^^M   ^ Xk   3d ?^Q   ? Xk   3d "^
    " Xk  g3  d  ^\     Xk  oK| C  (   x       RESOURCE FOUND ERROR RETURNED BY
READLMOD CALL         ?    i              9        ^    B   7    Kd B n 9&
*   -      N              0  K     K     K                   &  -       4K  C  (
     x       LABEL TABLE OVER+ FLOW, ABENDING              i            9      &
   K  C/ K   /%K  J/ K  O/   K   / (    { *3d   C{ k      C X3   { k        X3
K{ k  M   K X3  O{ k   n {     3   { k       X 0 fK   { n {    BK  X/ kR  K   {
 o0  n {     k1    {         o0   0  n {     K  X OK     k, 3kR 4K  5{ o0 5n {
   k1 5  {        6o0 6 0  n {     K  X/m 0    n {     K  X/ +  0  n {     K  X
  0  n {    &K  X \ 0  n&{     K  X V 0  (        { -    (     3d C  k      C XK
   / (    {  3d C  k      C X3d  { k  M3d N{ k   3d  { k  W3d X{ k   3d 1{ k  93
d  { k   3d  { k   3d  { k        XK   {      X(           &          { %   m
  9
                       -SUPVRFLTPT
 
         YN
                        Y       <   4       y       <   h
                   1
                                                                           REQ=
     ERR=  CURSOR=           RETCOD=         RSNCOD=         COUNT=
 
 
 
 
0123456789ABCDEF
 
 
 
 
 
 
 
 
 
 
 
 
0123456789      .......................  .......................................
.. ............................... ............................................
.....................................................ABCDEFGHI.......JKLMNOPQR..
......STUVWXYZ......0123456789......               2   4
         SPM              S     \  BALR        BCTR        BCR
               SVC         BSM         BASSM       BASR        MVCL        CLCL
       LPR         LNR         LTR         LCR         NR          CLR         O
R    +       XR          LR            CR          AR          SR          MR
         DR          ALR         SLR         LPDR        LNDR        LTDR
 LCDR        HDR         LDXR        MXR         MXDR        LDR         CDR
     ADR         SDR         MDR         DDR           AWR         SWR         L
PER        LNER          LTER        LCER        HER         LEDR        AXR
     SXR         LER         CER         AER         SER         MDER        DER
         AUR         SUR         STH         LA          STC           IC
   EX          BAL         BCT           BC          LH          CH        [ AH
       . SH        < MH        ( BAS       + CVD       | CVB       & ST
 LAE                                 N           CL          O           X
       L           C         ! A         $ S         * M           ) D         ;
 AL        ^ SL        - STD       /
                             MXD         LD          CD        | AD        , SD
       % MD          _ DD        > AW        ? SW          STE         MS
                                                                             LE
         CE        : AE        # SE        @ MDE       ' DE        = AU        "
 SU          SSM       a             b LPSW      c           d BRXH      e BRXLE
     f BXH         g BXLE      h SRL       i SLL         SRA         SLA
 SRDL        SLDL        SRDA        SLDA        STM       j TM        k MVI
   l TS        m NI        n CLI       o OI          p XI        q LM        r T
RACE       LAM         STAM
               ~           s           t           u           v           w
       x 2         y MVCLE     z CLCLE                                 STNSM
 [ STOSM       SIGP        MC                        LRA         2   y       2
                                 STCTL       LCTL
 CS          CDS                   ] CLM         STCM        ICM       {
     A           B           C           D           E             F           G
           H           I
                           }           J MVN       K MVC       L MVZ       M NC
       N   CLC       O OC        P XC        Q           R MVCK        MVCP
     MVCS        TR          TRT         ED          EDMK      \           
       S           T           U           V 2   <     W           X           Y
 MVCIN     Z                                                   2   h       PLO
                   0 SRP       1 MVO       2 PACK      3 UNPK      4           5
           6           7           8 ZAP       9 CP          AP          SP
     MP          DP                    +                           PR          U
PT         SCKPF       TRAP2                     x TMH       x TML       x BRC
     x&BRAS      x-BRCT      x LHI       x AHI       x{MHI       x\CHI
           STIDP       SCK         STCK        SCKC        STCKC       SPT
   STPT        SPKA        IPK         PTLB      +     SPX         STPX        S
TAP        PC          SAC         CFC         IP  TE        IPM         IVSK
     IAC         SSAR        EPAR        ESAR        PT          ISKE        RRB
E        SSKE        TB          DXR         CSCH        HSCH          MSCH
   SSCH        STSCH       TSCH        TPI         SAL         RSC  H        STC
RW       STCPS       RCHP        SCHM        BAKR        CKSM        SQDR
 SQER        STURA       MSTA        PALB        EREG       [ESTA       .LURA
      <TAR        (CPYA       +SAR        |EAR         MSR         MVPG        M
VST          CUSE        BSG        !BSA        )CLST       ;SRST        RP
     STCKE       SACF       'STSI       rSRNM        STFPC       LFPC       vTRE
        wCUUTF        xCUTFU       TRAP4                   LPEBR       LNEBR
   LTEBR       LCEBR         LDEBR       LXDBR       LXEBR       MXDBR       KEB
R        CEBR        AEBR        SEBR        MDEBR       DEBR        MAEBR
 MSEBR       LPDBR       LNDBR         LTDBR       LCDBR       SQEBR       SQDBR
       SQXBR       MEEBR       KDBR          CDBR        ADBR        SDBR
 MDBR        DDBR        MADBR       MSDBR       LDER        LXDR        LXER
     SQXR        MEER        LPXBR       LNXBR         LTXBR       LCXBR       L
EDBR       LDXBR       LEXBR       FIXBR    {  KXBR          CXBR       [AXBR
    .SXBR       <MXBR       (DXBR       &TBEDR       TBDR        DIEBR       FIE
BR       THDER       THDR       $DIDBR      ^FIDBR      -LPXR         /LNXR
   LTXR        LCXR        LXR         LEXR        FIXR        CXR           LZE
R        LZDR        LZXR        FIER       "FIDR       dSFPC        EFPC
mCEFBR      nCDFBR      oCXFBR      qCFEBR      rCFDBR       CFXBR       CEFR
       CDFR        CXFR        CFER        CFDR        CFXR                  V L
ASP        V TPROT     V MVCSK     V MVCDK                   LDEB        LXDB
     LXEB        MXDB        KEB         CEB         AEB         SEB         MDE
B        DEB          MAEB        MSEB        TCEB        TCDB        TCXB
   SQEB        SQDB          MEEB        KDB         CDB         ADB         SDB
         MDB         DDB         MADB        MSDB        LDE         LXD
    S     \    LXE         SQE         SQD         MEE                   NOP1  2
  3  4  5  6  7  8  9  10 11 12 13 14 B  NOP1  BH 3  B  L 5  6  BNEBE 9  10 BNL1
2 BNH14 B  NOP1  2  3  4  5  6  BNZBZ 9  10 11 12 13 14 B  NOP1  2  3  4  5  6
BNEBE 9  10   11 12 13 14 B  NOP1  BH 3  BL 5  6  BNEBE 9  10 BNL12 13 14 B  NOP
BO BP 3  4  5  6  BNZBZ 9  10 11 12 13 14 B  NOP1  2  3  BM 5  6  BNZBZ   9  10
11 12 13 14 B  NOP1  BP 3  BM 5  6  BNZBZ 9  10 BNM12 BNP14 B  NOPBO BP 3  BM 5
 6  BNZBZ 9  10 BNM12 BNPBN  OB  NOP1  BP 3  4  5  6  BNZBZ 9  10 11 12 13 14 B
 NOPBO 2  3  BM 5  6  BNZBZ 9  10 BNM12 13 BNOB  NOPBO 2  3  4  5  6  BNZBZ 9  1
0 11 12   13 BNOB  NOP1  BH 3  BL 5  6  BNEBE 9  10 11 12 13 14 B  NOP1  BP 3  B
M 5  6  BNZBZ 9  10 11 12 13 14 B  SYSLIB
                                                 m   SYSPRINT   &
                e        +                                             SYSOUT
  &                                 &
           SYSIN     &                                &                ESD     B
_TEXT  RLD     TEXT    LBLOFSETLABEL   DATA END*** NO CONTROL RECORDS IN SYSIN F
ILETYPEUREGLENGDROPULABL USING CSECT=SDE  DLDDATA START BYTES OF TEXT FO  LLOW:S
UPVRDATA INVALID CONTROL RECORD ABOVE IS DROPPEDCONTROL RECORD READ: CONTROL CAR
D READ HAS MEMBER=INVALID DATA-ONLY RECORD ABOVE IS DROPPEDINVALID USING RECORD
ABOVE IS DROPPEDINVALID ULABL RECORD ABOVE IS DROPPEDNO S  TORAGE SIZE WAS FOUND
 FOR TH  E CSECTLABEL TABLE OF 32,768 ENTRIES IS FULLUSINGLABELADCONV-CON
 }    0  &   &      0  READLMOD04/19/1317.57
                                        /    k -    &n      okP-  0  N -
y     0 fK     n         k      0 H           { 0 D \            \   &  hP
0                                                               0P      \  &\
\ %&\   \  &\   \  &\   \  &\   \  &\   \  &\   \  &\  o   (0 dIEWBIND   0     &
      0 0           0  &0     <&  % 0   { 0 &  [\\     N           x       UNABL
E TO START IEWBIND DIALOG, ABENDING         ?    i       P  - - 0
                                                 P      \  &\   \ %&\   \  &\
\  &\   \ -&\   \ %&\  o      0  &0 - 0         0  &  0     <&  % 0 H 0 &  [\\
   N           x       UNABLE TO CREATE A WORKMOD, ABENDING              i
 k   N -      &k   K   -         n      <      kP-  0      N -      fk   K   -
       n      b     %kP-  0      n      HkP     0 }
                                    qP      \  &\   \ %&\   \  &\   \ -&\   \ _&
\   \  &\   \  &\   \  &\   \  &\   \  &\   \  &\   \ _&\   \ _&\  o    0 -
  0  &0     <&  % 0   0 &  [\\     N        H  x       ERROR I  NCLUDING REQUEST
ED   MEMBER, ABENDING         (    i       n      UN        UN   -     P
h 0    K    4 0  K      0  K    M 0  K      0  K      0  K      0  K      0  K
  m 0  K    4 0  K     N -      fK   -        (n      b     %kP-  0      k -
  h    N -      -+  0 Q
     P      \    &\   \ %&\   \ *&\   \ -&\   \  &\   \  &\      &\   \  &\   \
 &\  o    0 -     + 0  &0     <&  % 0 * 0 &  [\\      0   0
                                             P      \  &\   \ %&\   \ -&\   \ -&
\      &\   \  &\   \  &\   \    &\   \ >&\  o    0 -       0  &0     <&  % 0
0 &  [\\      0   0 -
   P      \  &\   \ %&\   \  &\   \   -&\   \  &\   \  &\   \  &\   \  &\      &
\   \  &\   \  &\   \  &\  o    0 -       0    &0     <&  % 0   0 &  [\\      0
 n -     K -   K -   K -  %K -   K -  hN -  d }  kE- K   - K     K   -
0 @q }
 
                                        P    NONE
                       B_ESD        U  B_RLD           B_TEXT       8+   B_SYM
         B_IDRU          B_IDRL          B_IDRZ          B_IDRB              B_N
AME          B_MAP             IEWBESD   "\       -   [        IEWBRLD   "M
      /        IEWBIDU   "\       -   [        IEWBIDL   "0           %        I
EWBIDZ   "8                    IEWBIDB   "M                    IEWBSYM   "\
  - z   [          IEWBTXT               "\        IEWBBNL
   IEWBMAP                             NAME                c
           ANS F{     V                             i       j   A   E   I   d
                @       d     h           m   7           |   x
      <   *   %   @                             V             V              REB
UILD              V
 
                                                                        l
                                             V         5695PMB01         ?     V
        d   569623400           V                                   V        }
                  0  &   &      0 hREBUILD 04/19/1318.02
                                                   K &     & K (   P < < k (  {&
d&{<   & K &   & <d {& K < { k ( n (    UK|& (#K &  ;K & < ( .{N < &h   .YN &
 <     (    0 Un (     j <#    (  hn &)    (  dn &)   U(    0 U&       n &     n
 &     n &     n &     n &    qn &    yn&&    :  <d      &  }  K & <Q 0 mK &   &
 <d     9      &       &~i     <qP     n &    4n (    >       S     \K|+ & K|& (
#K &     &   &~(   ( .{K|&   +  0 >K   &uo   n (    >K|+ & K|& (#K &   N &u<
 K & <   & n           k,   h   0 *kA& 3 & &v  & ( k,&   &   &~(   ( .{K|& +
  9    &  mk ( n &     k (    m 9      &  un (     n (     (   nA&u      kA&u3 &
v& k &   &v( n &     K|+ & K &  _k*& N < <\      k,&   &   < (  4( .{K|& + K & &
uK < &sN & <     K|+ & K &  _k*& k-&   < $ &   & (  4N < <\   *k,   h    < (  4(
 .{K &u(#K < < K|& + K & (#n &     N &u<     K & (#N|& (#    ( .{   u 9    &   n
 (      &n (    {(   n &     n &u    K|+ & K &  _k*& N < <\      k,&   < + <-3 &
 <-o0& ( .{K|& + K & &uK &   K &   K & &to0& k(&  {<   { N &s<Y   *h   N &s<W
*h   N &s<U   *h   & <h  &   &    w           wnA     h     0  K &     & n
    kk)   0  K & <     & n           k+    <h+ <-3 + <-o0+   +  0  n0     2
  0  k)   0   0 0    k)  3 & < k &   & (  {< 3d& { k &&  & ( n &t   <K &+  n &t
  <K &<  n &t   <K &[  ( .{  &s! < & <   &s! < & <      9      K     &   n (
 n (    k(   n &     n &u    K|+ &   K &  _k*& N < <\   Kk,&   < + <-3 & <-o0& (
 .{K & + K &     K &  !K & &to0& k(& K & &u  & n           k)  3 & < k &   & (
{< 3d& { k &&  & ( n &t   ;K &+  n &t   ;K &<  n &t   ;K &[  ( .{  &s! < & <   &
s! < & <      9    &  Dn (    m(   K & &-3 & < k &     & ( 3F& & k &   & ( n &
  OK && &n &    OK &< &      &       & i    2 Y 0 H 0 Q 0   0   0 m 0   0   0 d
0   0 8 0   0 @ 0   0   0   0 @ 0   0   0   0 Y 0   0 % 0   0 4 0   0   0   0 d
0 H 0  n &)    K|& (# 0  n (    b( .{  <     &   & < ! < & < kI(   n &^        &
^  x     & K (      D 9      &  M   M 9      &     n (       &|h   (   nB&     K
   (     &,    k-    i    h  (  4 0  K   ( 3   &,    ( k'       9      &   N & <
    Fj &     K <-&|m <-  <-+     k &) 0  j &     2 <-&|m <-  <-+    |j &    w2 <
  -&|N &|<-   |j &     j &|   |j &    Fj &|   |n (       &|h   (     k,   h  j &
     j &|    k0   0    &|(        9    &   n (         &|+ <-9 <-(     9 <-(
 3 & <-o0&  0 *3 & <-o0&  0 *3 & <-o0&     n       K &    0  N   &|   d     0 -K
 &        9      &  Dj &|   yk &) 0  n (       &|h   (      D 9      &   n (
     &|h   (  %j &    8j &|   8k0   0    &|(        9      &   n &,    k &) 0  N
 & <    Uj &     N &- #   &j0&%    j &%     0    &%      <-m <-2 </&%m </N <-</
   j &     K <-&%m <-  <-+       j &     2 <-&%m <-  <-+     j &    D2 <-&%N &%<
-    j &    Mj &%      j &    Uj &%    n (       &%h   (   k,   h    &%(
9      &   n &,    j &%    k &) 0  n &     j &     2 <-&%m <-  <-+     j &     j
 &%    n (       &%h   (        9      &   N   &,<     k &)     9    &  4j &,
 k &) 0  n (       &,h   (   k,   h  +   &%h   (   k,   h    &,(      4 9      &
   j &,    N & <    |j &     K <-&%  m <-  <-+     j &     2 <-&%m <-  <-+     j
 &    |2 <-&,m <-  <-+    |k &) 0 un (    u  &%h   (   k,     h      &,h   (  4k
,   h    &%(        9      &   N & <     j &     2 <-&,m <-2 </&%m </K < &%m < N
 <-</    N <-<     N </<     j &     K <-&,m <-  <-+       k &) 0  n (       &%h
   (   k,   h    &,h   (   k,   h    &%(   k,   h    &,  < (  4     9    & +  &j
 &    Y2 <-&,m <-  &|  </m </      < m < N <-</    N <-<     2 </&|m </    </
   < N <-</    N <-<     j &    8j &|    j &     j &|    k &) 0  n (         &|h
   (   k,   h    &|(   k,   h    &,k <8(      & 9      &  Hj &|    n &    qj &
   n &,    j{&%   qj &    qj &|   qk &) 0 {n (       &|h   (   k,   h    &,k <8(
      H   9      &   j &|   \k &) 0  n (       &|h   (   k,   h    &|  < (  4k,
  h    &  ,k <8(        9      &   n (       &|h   (   k,   h    &|(   K   (
 &,    k-    i    h  (  4     9    &   n &     j &    u2 <-&|m <-  <-+     j &
   j &|    k &) 0 8n (      0n &     j0&|    k0   0 Y  &|h   (   k,   h    &|(
      9      &   n (         &|h   (  %  &|(        9      &   n &_    j &    -2
 <-&|m <-  <-+    -k &) 0 dn (    @  &|h   (   k,   h    &|(        9      &  Uj
 &_   uk &) 0  n (    M  &_h   (   k,     h    &|h   (   k,   h    &|(      U 9
     &   n &|    k &) 0    &,k <8(          9      &   N &,<     k &)     9    &
   j &     2 <-&,m <-n <-    k &) 0    &,k <8(        9    &   j &    hj0&|   hk
 &) 0    &,k <8(   n (     K   ( 3   &|    ( k'         9    &  0  &|      <8  &
,(   k,   h    &_k <8(      0 9      &     &|h     <         <8  &,(   k,   h
 &|  <       <8  &_(        9      &   k <8n (       &|h   (   k,   h    &,(   n
 (     k,   h    &|(   k,   h    &_(        9      &  Yk <8  &|i       &,(   k,
  h    &_(   n (    \k,   h    &|(      Y 9      &     &|  <       <     k &  )
0  n &_    j{&>      &|h     <       <8  &,(   k,   h      &_  <2   -K    = h
       (  4k,   h    &|  < (  4     9      &   k <8  &,(   k,   h    &_(
9        &  0kR    < x      M    o0   h   0 Yk1  . <     o0   h     0 9      &
   <m+ <-9 <-  (     9 <-(     9 <-(     3   <-o0   h   0  3   <-o0   h   0  3
 <-o0   h   0  3   <-o0   h       9    &  Y  < x     ( n0     {K &   K & (#n &
  Sn &    ykR&  0   Sn &     kR&  0 SkR&  0 SK     n       k,   h   0 Sk,   h
  Y 9    &     <6m <6h     <5m   <5n (     ( [w 0  h     <4m <4(  Dn      &n <4
   k(   h    <4(   k)   h   0    <6+ <-9 <-(    h9 <-(     9 <-(     3   <-o0
h   0  3   <-o0   h   0  3   <-o0     h   0  3   <-o0   h  n <4    n <5    k(
h  n <4   S  <4(   n <5    k,   h    <5(   k)     h       9    &  {  <6m <6h
 <5m <5n (     ( [w 0  (  Dn       n <8    k(   h      <8(  4k)   h   0    <6(
4n <8   =n <5    k(   h  n <8        <8(  4k,    h  n <5      <5(   k)   h
{ 9      &   k       <5i     <q            [ <6 0&  0&       0           n 0
 nA0          0  K   0 K ( 0  h  n            h       9    &   n (      {<   { +
h    kX(  0 |kC( K < <SK <@< K (.       S     \{  0  N < <2    nC(    uN < <0
u(    0 &n &    DN < <\   DN < <    D 0   {< nX(       { +h     0    { +h     0
   <   (. {< + K   {   <       <     &{<   <     & <      9    &   n (     K &
 K & ( kL&     < + <-9 <-(     3 & <-o0&   &  0    3 & <-o0&   & k'       {(. 0<
 3 & <'k &   & ( nC(    Y& < 3   { K    *    (          0 s  <   < i       <
\    K && a   @ 0   0 0 b  K    * 0<W    3d& { k &&  & (     K && a 0   0<U    3
 & { k &+  & (  0   0<S    3   & { k &<  & (  0  3 & { k &[  &   ( ( .{k ( kC(
    9      K &   K   (.& [  {< k &)      x   ! & K &?  n2    [     n &?  [ nx&?
  UN   <Q  [mN   {   [   [m     0 D  N   <Q  [m2 ([{ m0([N   ([  [   [m     0 WN
   <Q  [mN   {   [   [m     0[   n     [mK &     K &   K &   j{&?  [   [-k &
0[%k &  0[%k & P & &     &     [ K &-  K &;  K &^  k &)  [  9      K & { & .m
 <5i     <q      .d    [ <6 0&@P 0 0 & 0 k 0 kA0 3 0 0 k 0   0 (   &   &@    . N
       .d  .      0[6K (,  K     K   (,        .     & &@  &     .dK |i d( .qx
     LABEL TA  BLE OVERFLOW, ABENDING              i         .m  &@P      9    &
 .   &m      |h   7    Kd|h(#  .  9    & .U  &q      &    7    K|& (#  .U 9    n
 (   < 8 <-( kR& K &  _9 <-(   < 3 & </o0&  0< 3 & <-o0& K & & ( .{  <-( 9 <-(
  }.6K &  z( .{        K   &   q }
 
                                                    *  r   CNOP1  2  3  4  5  6
 7  8  9  10 11   12 13 14 B     ,X',*+
 
                                                                       0
9ABCDEF
 
 
 
 
 
 
 
                                       NOP1  2  3  4  5  6  7  8  9  10 11 12 13
 14 B  NOP1  BH 3  BL 5  6  BNEBE 9  10 BNL12 BNH14 B  NOP1  2  3  4  5  6  BNZB
Z 9    10 11 12 13 14 B    NOP1  2  3  4  5  6  BNEBE 9  10 11 12 13 14 B  NOP1
 BH 3  BL 5  6  BNEBE 9  10 BNL12 13 14 B  NOPBO BP 3  4  5  6  BNZBZ 9  10 11 1
2 13 14 B  NOP1  2  3  BM 5  6  BNZBZ 9  10 11 12 13 14 B  NOP1  BP 3  BM 5  6
BNZBZ 9  10 BNM12 BNP  14 B  NOPBO BP   3  BM 5  6  BNZBZ 9  10 BNM12 BNPBNOB  N
OP1  BP 3  4  5  6  BNZBZ 9  10 11 12 13 14 B  NOPBO 2  3  BM 5  6  BNZBZ 9  10
BNM12 13 BNOB  NOPBO 2  3  4  5  6  BNZBZ 9  10 11 12 13 BNOB  NOP1  BH 3  BL 5
 6  BNEBE 9  10 11 12 13 14 B  NOP1  B  P 3  BM 5  6 +  BNZBZ 9  10 11 12 13 14
B          DCAL  VL' CSECTDROP USINGEQUUNKNOWN SVCT  RE64-...LABEL TABLE OF 32,7
68 ENTRIES IS FULLEND EXCP/XDAP WAIT(R)   POST/PRTO EXIT      GETMAIN   FREEMAIN
  LINK      XCTL      LOAD      DELETE    GET/FREE  TIME +      SYNCH     ABEND
    SPIE      ERREXCP   PURGE     RESTORE   BLDL/FIN  O  PEN        CLOSE     ST
OW      OPEN  J   CLOSE T   DEVTYPE   TRKBAL    LOCATE    OBTAIN    CVOL      SC
RATCH   RENAME    FEOV      NO MACRO  IOHALT    MGCR/QED  WTO/WTOR  WTL       SE
GLD/SEG LABEL     EXTRACT   IDENTIFY  ATTACH    CIRB      CHAP      OVLY  BRCH
T  TIMER    STIMER    DEQ       SNAP/SDUM RESTART   RELEX     DISABLE   EOV
  ENQ/RESE  FREEDBUF  RELBUF    OLTEP     (E)STAE   IKJEGS6A  DETACH    CHKPT
  RDJFCB    BTAMTEST  SYNADAF   SYNADRLS  BSP       GSERV     ASGNBFR   CHATR
  SPAR       [DA  R      .DQUEUE   <NO MACRO +NO MACRO |STATUS    SETPRT    DASD
R     SMFWTM    GRAPHICS  DDRSWAP   ATLAS     DOM       MOD88    $VOLSTAT  *TCBE
XCP  )TGET/TPU ;STCC     ^SYSEVENT -STAX     /TSO TEST  PROTECT   DDDYNAM   IKJE
FFIB  QTIP      AQCTL       XLA  TE     TOPCTL    IMAGLIB  ,MODESET  _ESR TYPE4>
DSTATUS  ?NO MACRO  PGRLSE    PGFIX,CL9 EXCPVR    ESR TYPE1 DEBCHK    TESTAUTH
GET/FREEM VSAM     :EVENTS   #PURGEDQ  @TPIO     'EVENTS   =MSS INTFC       {
  V             V              RESCHECK               V
 
 
 
 V         5695PMB01               V        d   569623400           V
          {   {     V     {  }            0  &   &      0  RESCHECK04/19/1318.04
 
      H      (   N    h    k  v(        w    N    hK  x  K     K     K     K  ]
hK  D  N  D      K  L +K  R  K  S )(  <k    0             7    n       n       n
       n       n       n  *    N  )       9   H   w   7    K  d w   9n  v   ux
     MISSIN  G START, ABENDING               i         x       MISSING END, ABEN
DING               i        9N        0K  x  (  <         H               0  q }
 
                          
 
 
                  S     \
 
 
 
 
                                       m   SYSPRINT   &
      e                                                      S  YSIN     &
                                       000000***COMPARISON FOUND NO DIFFERENCES
***END              V                             e   i   5   9         V
      V     8       0DISTEST         EINST           RR1  INST    b    RR2INST
       RR3INST         RR4INST    m    RRE1INST        RRE2INST   D    RRE3INST
       RRF1INST   }    RRF2INST   \    RRF3INST   0    RX1INST    8    RX2INST
       RXEINST      &         V     8       0RXFINST    >    RS1INST      f    R
S2INST    o    RS3INST    w    RSIINST         RIINST          SIINST          S
1INST          S2INST          SS1INST         SS2INST         SS3INST         S
S4INST    |    SS5INST    @    SS  EINST              V              SUBRTN
            V
 
 
                                       V         5695PMB01               V
  d   569623400           V                               V        }
0  &   &      0  DISTEST 04/19/1318.05
                                              %       }           . !     g o v
  C K  0                       \               R   '     &\[      &W     $
H 0       N           S                       *            &  l       D   K   \-
  1       :   {{                E           }  {      >   -{   f - g       q6 hh
 - i    }    \    y     '}    z P  d   e   d   e  8x   x~  x  \xn  j&  k   mA  n
       b   l     A    0                                    J     K     L     M4
   1  4 92 & { 3       8            I-             { Ri                  0     0
     0     0 -   0     0     0     0     V     V     V 0   V
 
       Og             {           E_)     h
                                                         XZK             A Z B Y
 L M Q     S T U V                          A B C D
 
 
                                                                             @
   @000000{    ABCDEWXYZ FGH  ST      #                &             SSE   TARGE
T FIELD    SSE SOURCE FIELDANOT+ HER SSE SOURCE          ANOTHER SSE TARGET
              V                                           <     V             V
             DISTEST         SUBRTN               V
 
 
                                                                             V
       5695PMB01       a       V        d   569623400           V
                V        }            0  &   &      0  DIST  EST 04/19/1318.05
 
    %       }           . !     g o v   C K  0                       \
  }   }         &\[      &W     $    H 0       N           S
      *            &  l       D   K   \-    1     :   {{                E
    }  {    >   -{   f - g       q6 hh - i    }    \    y     '}    z P  d   e
 d   e  8x   x~  x  \xn  j&  k   mA  n       b   l     A    0
                   J     K     L     M4    1  4 92 & { 3       8            I-
           { Ri                0     0     0     0 -   0     0     0     0     V
     V     V 0   V
                                               Og             {           E_  )
  h
               XZK             A Z B Y L M Q     S T U V
  A B C D
 
 
                                   @     @000000{    A  BCDEWXYZ FGH  ST      #
               &             S  SE TARGET FIELD    SSE SOURCE FIELDANOTHER SSE S
OURCE          ANOTHER SSE TARGET                   V
              <     V             V     h        IKJEFTE2       qAPFC  TABL
   IKJEFTE8   q    APFPTABL   y    IKJEFTNS        NSCPTABL        IKJEFTAP   H
  HAPFTTABL   Q         V
 
    
                                                   V         5695PMB01
     V        d         569623400           V                               S
  \   q           H       V      IKJEFTE276.152  $$      $HOWMVS $MDSMAIN#
 ABUDSN  AD      ADB2UTILADDDIR  ADDFILE ADDGROUPADDSD   ADDUSER ADIR    ADNR
 ADYOPCMDAF      AG      ALD     ALF     ALG     ALTDIR  ALTDSD  ALTER   ALTFILE
 ALT  GROUPALTUSER ALU     APCACBL A  PCANB  APCARB  APCAUB  APFCMD  ASUB    AU
     AUCMD   BACKUP  BCMDEL  BCMDEL1 BCMNAUTHBCMNUPD BDATA   BDMNNOTCBDMNUPD BIN
DDATABLKUPD  BUDDSN  BUDGET  BURN    CAE$BQRYCANCELU CAS9UDTNCDELPAIRCDELPATHCDM
RSTATCDSCB   CDSCBA    CESTPAIRCESTPATHCGROUP  CHKPT     CINMX   CKGRACF CLCHECK
 CNCLPG  CNCLPGA CNVTCAT CO      COFDMON CONNECT CONS    CONSPROFCPSCB   CQUERY
 CQUERYSGCQX     CRECOVERCSCAN   CSUSPENDDCAS    DD      DDIR    DEF     DEFINE
 DEL     DELDIR  DELDSD  DELETE  D  ELFILE DELGROUPDELUSER DF      DG        DIT
TO   DITTOA  DITTOU  DMRSHR  DRI     DSPRINT DU      DUMPPPT ERWMAUTHEX      EXP
     EXPORT  EYU9XENFEZAZSSI EZBREINIEZBTNINIFCESTABLFCQUERY FCWITHDRFTPD    FTP
DNS  GJTRUCBSIEBCOPY IKJEHDSFIKJEHDS1IKJPRMLBIM        IMP     IMPORT  IOBSNMP I
QIEXPN   IQIMAIN IQIQUERYIQIQUIT IRRDPI00ISPICP  ISRPCP  KOMPRESSLASTCLPALBADV
 LBAGENT LD      LDATA   LDIR    LDIRECT LF      LFILE   LG      LISTB   LISTBC
 LISTD   LISTDATALISTDS  LISTDSD LISTGRP LISTUSERLLWA    LMRKTSO   LOCATE  LOCKT
ERMLOOK    LPQ     LPR       LPRM    LPROC   LSLT    LU      LWATMGR MAKEUSERMER
LIN  MIMTSO  MODDVIPAMU      MVPMAIN MVPXDISPMVSCPCMDNAMEDXFRNAMED4  NDVRC1  NET
STAT NSUPDATENSUPDAT4NYPPW   OC      OMPROUTEOP      OPER    OPERATOROPINFO  OP
 ING   OPSCMD  OPSCONSLOPSOSCMDOPSPARM OP  SREPLYOPSTAT  OPSWTO  OSASK   OSCMD
 OSNMPD  OSWTO   OTRACERTPACKRAT PARMLIB PASSWORDPDIR    PDSCLEANPDSEAUTHPDS38
 PE      PERMDIR PERMFILEPERMIT  PF      PHRASE  PING    POPPER  PPTD    PPTSCAN
 PRINT   PW        Q       QUEUE   Q522    RACDCERTRACFSIM   RACLINK RACONVRTRAC
PRIV RALT    RALTER  RDEF    RDEFINE RDEL    RDELETE RE      RECEIVE RELOGON REM
OVE  REPRO   RESOLVE REVIEW  REVVSAM REXCPCMDRL      RLIST   RLOAD   RLOADA  RMM
     RPF     RPFE    RSH       RSHD    RVARY   SAMENDM SDSF    SE      SEAR  CH
 SECURE  SEE     SEND    SEND@   SETC    SETCACHESETPASSWSETPW   SETPW2  SETR
 SETROPTSSETUSER SHCDS   SM      SMTP    SNTPD   SPACE   SPFCOPY SPY     SR
 SRDIR   SRF     SRFILE  SRSTAT  STEPLIB STE  PLIBNSTEPLIB4SU      SYNC    SYSPR
OG TEAEXTSOT  ERM    TERMINALTESTA   TESTAUTHTMONCICSTMONDB2 TMONIMS TMONMVS TRA
CERTETRANSMITTRAPFWD TRMD    TSOENQ  TSOSMS  TSUB    UGRP    UKEYCSA UPRC    USA
T    USET    USIT    USOT    USPT    USUR    USUT    USWT      USXT    VERIFY  V
FY     VIEWUSERVLFNOTE VMCF      VU      WAITT   WHEREIS WHOENQ  WSSTAT  XD
 XDCCALLAXDCCMDA XF      XMDSMAINXMIT    XTRCUSERXU      YKCONMSGZAP     ZAP$
 ZAPLWA  ZAPV
 
 
 
     IKJE+ FTE885.092  ADB2ATH ADB2UTILADRDSSU ALPAUTH APCACBL + APCANB  APCARB
 APCAUB    APFPGM  ARMAUTH COMMAND CONSPROFCSFDAUTHCSFDPKDSCTMA  ES  CTMDFL  CTM
RUN  CTRCTR  CTRSPL  EDGAUD  EDGHSKP EDGRPTD EDGUTIL EMCICS61EMCSNAP EMCTF   EMC
TFU  EQQMINORERWMAUTHFDRABR  FDRABRUTFDRCPK  FDREPORTFDRMONA FDRPASA FDRQUERYFDR
SRSA FSYTPA00GIMSMP  G  JTRUCBSHESEVMI ICADCFGSICADCT  ICADDCT ICADFTPDICADIKEDI
  CADPFTPICADSLOGICADSOCKICADSOXDICADSTAKICHDSM00ICHUEX00ICHUT100ICHUT200ICHUT40
0IDCAMS  IEBCOPY IEHINIT IEHMOVE IEHPROGMIFCEREP1IKJEFF76IOEAGFMTIOEAGSLVIOEBAK
 IOEBOS  IOECM   IOEDCEERIOEDFSXPIOEF  TS  IOEGRWAGIOEMAPIDIOENEWAGIOESALVGIOESC
OUTIOESMBPWIOEUDB  G IOEZADM IRMAUTH IRRDBU00IRRDIP00IRRDPI00IRRDSC00IRRUT100IRR
UT200IRRUT400ITPENTERIXCMIAPUJCLSRB  KEPSTCTOKOBROUTRKOBSPFAULISTDATALOCKTERMLWA
TMGR MIMTSO  MVPXDISPNDVRC1  OBROUTR OBSPFAU OLDCOPY   OMCICS  OMEGAMONOMSPFAU P
DSCLEANPDSCLEARPDSEAUTHPDSFAST PIN  G    PSIPCTL RESOLVE REVVSAM REXCPCMDSAMENDM
 SCRAMRE SDSF    SHERCOMMSHOWMVS SHOWZOS SPFCOPY SYSPROG TESTENQ TMONMVS TMSIOCA
PTMSSCR  TSOENQ  TSOSPA  WHOENQ  ZAPVIRT ZSIZER
 
 
 
 
                 IKJEFTNS76.033    OPERATOR  OPER      TERMINAL  TERM
 
                   IKJEFTAP86.120  $$      AAATHCHKAACMD001AACMD002AACMD003AACMD
004AA  CMD005AACMD006AACMD007AACMD008AACMD009AACMD014AACMD015AACNG001AACNG002AAC
NG003AAGRPUSRAAPSWCHKAAREP011ADB2ATH ADB2UTILADRDSSU APFCMD  BACKUP  BBSDTCPABCM
NUPD BDMNUPD BFFLU   CADU4804CAD  U4805CAT01IKBCAZ2CTSOCDFAUTH CDSCB   CSCCOPY C
SFDAUTHCSFDPKDSEDGAUD    EDGHSKP EDGRPTD EDGUTIL EMCICS61EMCSNAP EMCTF   EMCTFU
 EOUCCSYMEQQMINORERWMAUTHEX      FDRABR  FDRABRUTFDRCPK  FDREPORTFDRMONA FDRPASA
 FDRQUERYFDRSRSA FMNSMF  GIMSMP  GJTRUCBSIAMREC  VRIAMXMONAICADCFGSICADCT  ICADD
CT ICADFTPDICADIKEDICADPFTPICADSLOGICAD  SOCKICADSOXDICADSTAKICHDSM00ICHUT100ICH
UT200ICHUT400ICQASLI0IEBCOPY IKJEFF76IM      IOEAGFMTIOEAGSLVIOEBAK  IOEBOS  IOE
CM   IOEDCEERIOEDFSXPIOEFTS  IOEGRWAGIOEMAPIDIOENEWAGIOESALVGI OESCOUTIOEUDBG I
OEZADM IRRDPI00IRRDSC00IRRUT100IRRUT200IRRUT400JCLSRB  L  SLT    LWATEDITLWATMGR
 MIMTSO  MNAPFPRCMNCDTPRCMNCD2PRCMNGRPPRCMNLLTPRCMNLPAPRCMNPPTPRCMNRACPRCMNRAUPR
CMNRFRPRCMNSMFPRCMNSM4PRCMNSTCPRCMNSVCPRCMXI          S        MXITSF  NDVRC1  O
BROUTR OBSPFAU OLDCOPY OMCICS  OMEGAMONOMSPFAU PDSCLEANPDSEAUTHPDSFAST PMGLAUTHP
SIPCT  L PTLTSRB RCFRESETREATSF  SAMENDM SPFCOPY TMONMVS TMSIOCAPTMSSCR
 
 
                      p
                                                                             &
                {     V       \INMR06                                 S
    S     \//IBMUSERU JOB ,'SAM GOLOB',CLASS=B,
           //    MSGCLASS=X,NOTIFY=&SYSUID
           //*
           /  /*****************************************************************
**           //*                 IBMUSER.FILE234.INSTALL(EXECJCL1)
 *           //* EXECUTE THE RESOURCE/REBUILD DISASSEMBLER AGAINST THE DISTEST
 *           //* LOAD MODUL  E.
   *           //*   1. FIRST SCRATCH ANY FORMER RESOURCE OUTPUT FILE
   *           //*   2. DISASSEMBLE DISTEST:
   *           //*      A. THE PARM FIELD   ON THE EXEC JCL STATEMENT SPECIFIES
THAT *           //*         FLOATING POINT AND PRIVILEGED INSTRUCTIONS ARE TO B
E    *           //*         DISASSEMBLED. THESE WOULD NORMALLY NOT BE CONSIDERE
D    *           //*         INSTRUCTIONS BY THE PROGRAMS  .
       *           //*      B. SYSOUT FILE WILL CONTAIN THE DISASSEMBLED SOURCE
CODE.  *           //*      C. SYSLIB FILE CONTAINS THE LOAD MODULE TO BE DISASS
EMBLED *           //*      D. SYSIN FILE CONTAINS CONTROL STATEMENTS:
         *           //*         1. FIRST STATEMENT MUST NAME THE MEMBER AND CSE
CT TO BE *           //*            DISASSEMBLED. MEMBER MUST BE IN THE SYSLIB F
ILE.     *           //*         2. OPTIONAL DATA STATEMENTS IDENTIFY AREAS IN T
HE LOAD    *           //*            MODULE THAT ARE DATA ONLY. THIS PREVENTS T
HE DIS-    *           //*            ASSEMBLER FROM MAKING INSTRUCTIONS FROM DA
TA BYTES.  *           //*         3. OPTIONAL USING INSTRUCTIONS ALLOW THE DISA
SSEMBLER   *             //*            TO CREATE LABELS FROM THE BASE-DISPLACEM
ENT ADDRESSES*           //*            IN INSTRUCTIONS. WITHOUT THIS, MOST INST
RUCTIONS WILL*           //*            BE FORMATTED IN EXPLICIT FORMAT.
             *           //**********  *****************************************
****************           //*
                           //DISASME2 EXEC  PGM=RESOURCE                    <==W
ANT FLOATPT,PRIV           //STEPLIB  DD    DSN=SBGO  LOB.FILE234.LOADLIB,DISP=S
HR                           //SYSUDUMP DD    SYSOUT=*
                             //SYSPRINT DD    SYSOUT=*
                             //SYSLIB   DD    DSN=IBMUSER.FILE234.L  OADLIB,DISP
=SHR                           //SYSOUT   DD    DISP=SHR,DSN=IBMUSER.DISTEST.PDS
(IKJEFTE2)                     //SYSIN    DD    *
                               IKJTABLS IKJEFTE2
                                 DATA 000000 000B98
                                 ULABL APFCTABL 000010
                                 //*
                 +                 //DISASME8 EXEC  PGM=RESOURCE
    <==WANT FLO  ATPT,PRIV           //STEPLIB  DD    DSN=IBMUSER.FILE234.LOADLI
B,DISP=SHR                           //SYSUDUMP DD    SYSOUT=*
                                     //SYSPRINT DD    SYSOUT=*
                                       //SYSLIB   DD    DSN=IBMUSER.FILE234.LOAD
LIB,DISP=SHR                           //SYSOUT   DD    DISP=SHR,DSN=IBMUSER.DIS
TEST.PDS(IKJEFTE8)                     //SYSIN    DD    *
                                       IKJTAB  LS IKJEFTE8
                                         ULABL APFPTABL 000010
                                         DATA 000000 000590
                                         //*
                                           //DISASMNS EXEC  PGM=RESOURCE
            <==WANT FLOATPT,PRIV           //STEPLIB  DD    DSN=IBMUSER.FILE234.
LOADLIB,DISP=SHR                           //SYSUDUMP DD    SYSOUT=*
                                             //SYSPRINT DD    SYSOUT=*
                                             //SYSLIB   DD    DSN=IBMUSER.FILE23
4.LOADLIB,DISP=SHR                           //SYSOUT   DD    DISP=SHR,DSN=SBGOL
OB.DISTEST  .PDS(IKJEFTNS)                     //SYSIN    DD    *
                                               IKJTABLS IKJEFTNS
                                               ULABL NSCPTABL 000010
                                                 DATA 000000 00009E
                                                 //*
                                                 //DISASMAP EXEC  PGM=RESOURCE
                  <==WANT FLOATPT,PRIV             //STEPLIB  DD    DSN=IBMUSER.
FILE234.LOADLIB,DISP=SHR                           //SYSUDUMP DD    SYSOUT=*
                                                   //SYSPRINT DD    SYSOUT=*
                                                   //SY  SLIB   DD    DSN=SBGOLO
B.FILE234.LOADLIB,DISP=SHR                           //SYSOUT   DD    DISP=SHR,D
SN=IBMUSER.DISTEST.PDS(IKJEFTAP)                     //SYSIN    DD    *
                                                     IKJTABLS IKJEFTAP
                                                       ULABL APFTTABL 000010
                                                       DATA 000000 0005C8
                                                              S      /*
                                                                     //
                                                                     IKJEFTE2 00
000000 00000B98  RMODE 24  AMODE 24
                                             APFCTABL 00000010         IKJEFTE8
00000B98 00000590  RMODE 24  AMODE 24
                                             APFPTABL 00000BA8         IKJEFTNS
00001  128 0000009E  RMODE 24  AMODE 24
                                               NSCPTABL 00001138         IKJEFTA
P 000011C8 000005C8  RMODE 24  AMODE 24
                                                 APFTTABL 000011D8
S             S     \Hi,
 
                         I have prepared a way to generate an assembly for IKJTA
BLS                  u  sing the disassembler on CBT File 234.  It is awkward, b
ut it                  works.  Actually, you only have to run one job called DIS
AJC01.
                           Before you   run DISAJC01, you have to set up two oth
er                       libraries.  (They are included in this pds as members O
UTPUTS and               LOADLIB in XMIT format.)  And you just have to tailor t
he JCL in                job DISAJC01 for your insta  llation.
 
                               After you run DISAJC01, the OUTPUTS pds (whatever
 you call                  it) will contain disassemblies of IKJEFT  AP, IKJEFTE
2, IKJEFTE8,                 and IKJEFTNS.  You then take all 6 members (ASM at
the top,                     LINK at the bottom), put them all together, and you
 have your                   assembly job (which I called WHOLEJOB).  Run WHOLEJ
OB  , and you                  will have re-created your IKJTABLS load module.
 
                                   The disassembler (whose program name is RESOU
RCE) is already                  installed, being located in the library called
LOADLIB.
                                     I have made this entire process much simple
r, by just requiring               that you create a couple of libraries from XM
IT-ed pds'es which are             members of this library, tailoring your JCL f
or your installation,              and just running the job DISAJC01, once it wa
s tailored and                     customized f  or your own IKJTABLS load modul
e.
                                         Of course, I don't have your particular
 IKJTABLS, or your                   IKJTSOxx PARMLIB member,   but I do have my
 own.  This pds will                   be a model for you.  You can look at all
of the program names                   which I have authorized, and consider if
you want to add any                    of the names to your own lists.
 
                                             -----------------------------------
------------------
                                               The disassembly job has to be tai
lored.  Here are the                       instructions for that.
 
                           +                     In order to start using this di
sassembler, you have to                        create a MAP of the IKJTABLS load
 module.  See members X and Y                  of this pds for a map of my IKJTA
BLS.  You can use IBM's AMBLIST                program to create the map, but I
have used the free PDS 8.6 program               from CBT File 182, using PDS's
"MAP" subcommand against module                  IKJTABLS.
 
                                                     On  ce the map has been cre
ated, you can tailor the job DISAJC01.             Again, this job will need two
 libraries to be created.  I have                  supplied them as XMIT-format
libraries which are members of this                pds.  The members t  o be REC
EIVEd are LOADLIB and OUTPDS.
                                                         TSO RECEIVE INDS('this.
pds(LOADLIB)')                                           TSO RECEIVE INDS('this.
pds(O  UTPDS)')
                                                           You have to copy your
 own IKJTABLS load module to the load                  library.  Once you have c
opied your own IKJTA  BLS to the load                    library, and you have c
reated the output pds for the disassemblies,             then you can adjust the
 displacements in the disassembly job so                 they match the MAP for
your IKJTABLS.  I included my own I  KJTABLS               MAP below the // in t
he disassembly job, for my own convenience.                And you can follow th
is pattern when setting up the disassembly                 job for yourself.
 
                                                                 Let me explain
the small subset of control cards you will need              for the disassemble
r (EXEC PGM=RESOURCE).
                                                               Example:
 
                                                               IKJTABLS IKJEFTAP
                (what CSECT you will disassemble)               ULABL APFTTABL
000010           (putting in the entry point address)            DATA 000000 000
5C8              (all of the disassembly is data.                       S
                                there are NO instructions.)
                                                                               T
he length of this module (shown by the MAP) is 5C8.  You plug in               t
  he length of your own IKJEFTAP CSECT into this place.  You get
 the idea.
 
 In order to ge  t the MAP for your own IKJTABLS, you can use AMBLIST.
   However, I used the MAP subcommand of the PDS program package from
   CBT File 182.  The PDS command is a big package, and MAP is only
   one small subcommand of it,   but if you haven't used the PDS command
     package before, you will profit greatly by installing it.
 
     I have created a "quick install" for the   PDS command by having
       a bunch of pds'es in File 182 in XMIT format.  Just look in File 182
