 \INMR01      &      JESNODE      USERID      TO      SAMG      20100916184944
         ?\INMR02          IEBCOPY                                  &        _
                      SSO  RRGEN  SOURCE \INMR02          INMCOPY
           "4                   \INMR03                         &         {  _
 _  &            "8    Vs         >            z                   }  3s    *
*     3s              3s
 
 
                         RRDINP2   $$GENASM                        SPENCER   $$G
ENDOC                   C    SPENCER   RRBINARY         i ? i ?   T T  SPENCER
 RRDCART          i ? i ?        SPENCER   RRDINP1          i ? i ?        SPENC
ER   RRDINP2          i ?   i ?        SPENCER                 RRINP1DK  RRDINP3
          i ? i ?        SPENCER   RREOJMOT         i ? i ?        SPENCER   RRG
EN            i ? i ?        SPENCER   RRGENSRT         i ?       B    SPENCER
 RRINP1DI         i ? i ?        SPENCER     RRINP1DK         i ? i ?        SPE
NCER                 RRINP3DK  RRINP1IS         i ? i ?        SPENCER   RRINP2D
I         i ? i ?        SPENCER   RRINP2DK         i ? i ?        SPENCER   RRI
NP2IS         i ? i ?        SPENCER   RRINP3DI           i ? i ?        SPENCER
   RRINP3DK         i ? i ?        SPENCER                 RROT2ISM  RRINP3IS
      i ? i ?        SPENCER   RRIN1ISR         i ? i ?        SPENCER   RRIN2IS
R         i ? i ?        SPENCER   RRIN3ISR         i ? i ?        SPEN  CER   R
ROT1ISM         i ? i ?        SPENCER   RROT2ISM         i ? i ?        SPENCER
                 RROUT3DA  RROT3ISM         i ? i ?        SPENCER   RROUT1DA
      i ? i ?        SPENCER   RROUT1MD         i ? i ?        SPENCER   RROUT2D
A           i ? i ?        SPENCER   RROUT2MD         i ? i ?        SPENCER   R
ROUT3DA         i ? i ?        SPENCER                           RROUT3MD
  i ? i ?        SPENCER   RRPRTMOT         i ? i ?        SPENCER
                     q
 
                    *     0BINARY01  CSECT
                   00000010R1       EQU        1
                   00000020R2       EQU        2
                   00000030R  3       EQU        3
                     00000040R4       EQU        4
                     00000050R5       EQU        5
                     00000060R6       EQU          6
                       00000070R7       EQU        7
                       00000080R8       EQU        8
                       00000090R9       EQU        9
                         00000100R10      EQU        10
                         00000110R11      EQU        11
                         00000120R12      EQU        12
                           00000130R13      EQU        13
                           00000140R14      EQU        14
                           00000150R15      EQU        15
                             00000160EP1      SAVE      (14,12)
                             00000170         BALR       12,0
                             00000180         USING      *,12
                               00000190         ST         R13,SAVE+4
                               00000200         LR         R6,R13
                               00000210         LA         R13,SAVE
                               0000022  0         ST         R13,8(R6)
                                 00000230         CLI       12(R1),X'80'    INSU
RE A COMPLETE PARM LIST.         00000240         BNE       ATEND
                                 00000250         CLI         0(R1),X'80'      H
AVE I CKED THIS PARM BEFORE        00000260         BE        LOADEM          YE
S SET UP FOR A SEARCH              00000270EP2      XR         R9,R9
                                   00000280         LA         R10,P  ARM
     LOOK  THRU MY PARM LIST         00000290LOOK     L          R11,0(R10)
      IF REG 14 HAS BEEN SAVED       00000300         L          R15,0(R11)
      IN IT- THEN I ASSUME THIS      00000310         CR         R9,R15
                                       00000320         BE         INSERT
                                       00000330         CLI        0(R10),X'80'
        THIS IS A BUILD & EDIT.        00000340         BE        ATEND
                                         00000350         LA         R10,4(R10)
                                         00000360         B          LOOK
                                         00000370LOADEM   LA        R14,14(R14)
      SET UP 14 FOR RETURN TO RRG+ EN      00000380         L         R11,0(R1)
                                             00000390         ST        R14,12(R
6)           PUT R14 IN HIS SAVE FOR ME      00000400****    LOAD MY REGISTERS H
ERE........                                  00000410         LM         R2,R10,
4(R11)       ONLY 4 DIFFERENT SEARCHES CAN   0  0000420*
               CALL THIS MODULE AT ONE TIME-   00000430         MVC       COMP(6
),40(R11)      FOR I BUILD IN HOLD AND ONLY    00000440         B          INCR
               RESTORE REG & COMP FOR A SEARCH 00000450INSERT     L          R3,
0(R1)            BUILD 4 HOLD AREAS HERE:        00000460         L          R6,
4(R1)           * R3 = INQUIRY ADR               00000470         L          R2,
4(R1)           * R2,R6,R5,HAVE LHE OF TABLE ADR 00000480         L            R
5,4(R1)           * R4 = LENGTH OF EACH ENTRY      00000490         ST
R1,0(R11)         * R7 = RHE OF TABLE-1 ENTRY      00000500         ST        R1
1,0(R1)                                            00000510         MVI       0(
R1),X'80'                                            00000520         MVC
36(4,R11),8(R1)        INDEX ADR                     00000530******     WHAT WE
HANDLE IN THIS RTN. LOOKS LIKE THIS.                 00000540*********
          (0012,005,000,00  2)                         00000550**********
            (12,5,0,2)                                 00000560**********
            (12,5,,2)                                  00000570**********
    THE DEFAULT IS ZERO.                                 00000580         L
    R8,12(R1)       SET 8 AT TBL DESCP.                  00000590         LA
    R7,WRK1            SET  7 AT RECEIVE FIELD           00000600         CLI
    0(R8),X'4D'           FIRST MUST BE A (.               00000610         BNE
      ATEND          ITS AN ERROR BYE.                     00000620INCRR8   LA
      R8,1(R8)        BUMP R8 BY ONE.                      00000630         ST
      R8,REGHLD        SAVE R8 FOR LATER USE.              00000640           LA
        R4,WRK5        SET 5 AT A WOKR AREA.                 00000650COMMA    CL
I       0(R8),X'6B'       IS A COMMA HERE.                   00000660         BE
        GOTONE           YES IT IS.                          00000670         CL
I         0(R8),X'5D'          IS A ). RHE                     00000680
BE        GOTONE       YES IT IS.                              00000690
C         R4,LOOKAT4         HAVE WE EXCEEDED RHE              00000700
BH        ATEND            YES ITS AN ERROR.                     00000710
  MVC       0(1,R4),0(R8)        MOVE A CHAR IN WRK5.            00000720
  LA        R4,1(R4)      INCR WRK5 ADR                          00000730
  LA        R8,1(R8)          BUMP T  HRU TBL DESCP.               00000740
    B         COMMA        GO LOOK SOME MORE.                      00000750GOTON
E   ST        R8,RHLD          SAVE 8 FOR LATER USE.               00000760
    S         R8,REGHLD     HOW MANY DID I MOVE 0-4+ .               00000770
      CL        R8,CON4      WAS IT MORE THAN 4.                       00000780
        BH        ATEND        YES ITS A USER ERROR.                   00000790
        L         R4,CON32      MAX NR OF BITS IN A REG IS 32.         00000800
        LR        R9,R8          FOR THE MPY                             0000081
0         M         R8,CON8    NR MOVED X 8 = NR BITS MOVED.             0000082
0         SR        R4,R9       MINUS MAX NR BITS = EXCESS BITS.         0000083
0         STC       R4,SRL1+3   PUT EM IN SHIFT INST.                    000008
 40         L         R8,WRK5        WHO GETS IT.                          00000
850SRL1     SRL       R8,0(0)         SHIFT IT OVER.                       00000
860         ST        R8,0(R7)     STORE IT IN WRK1-4                      00000
870         MV  Z       0(4,R7),HIVAL        ALL F ZONE.                     000
00880         LA        R7,4(R7)    INCR 7 TO NEXT WRK AREA.                 000
00890         L         R8,RHLD        RESTORE 8 TO THE COMMA                000
00900         CLI       0(R8)  ,X'5D'     WAS A ).  RHE                        0
0000910         BE        OUT       YES GET OUT OF HERE.                       0
0000920         CL        R7,ENDOF                                             0
0000930         BH        ATEND   WE ARE OUT   OF THE WRK AREA.
 00000940         B         INCRR8      GO LOOK SOME MORE.
 00000950********        DO SOME EDITING HERE.
 00000960OUT      CLC       WRK4(4),CON255     REL KEY POS   CANNOT EXCEED 255.
   00000970         BH        ATEND
   00000980         CLC       WRK3(4),CON256   LENGTH OF KEY NOT 256
   00000990         BH        ATEND        YES ITS GREATER SORRY.
     00001000         CLC       WRK3(4),WRK2    KEYLEN CANNOT BE GREATER THAN TH
E    00001010         BH        ATEND           SIZE OF AN ENTRY.
     00001020         CLC       WRK2(4),ZERO      SIZE CANNOT BE ZERO.
     0000  1030         BE        ATEND
       00001040         CLC       WRK1(4),ZERO      NR OF ENTRIES CANNOT BE ZERO
.      00001050         BE        ATEND
       00001060           CLC       WRK3(4),ZERO      KEYLEN CANNOT BE ZERO.
         00001070         BE        ATEND
         00001080         CLC       WRK4(4),WRK2     REL KEY POS CANNOT BE GREAT
ER       00001090         BH        ATE  ND             THAN THE SIZE.
           00001100         PACK       DBLWRD(8),WRK1(4)
           00001110         CVB        R7,DBLWRD
           00001120         PACK       DBLWRD(8),WRK2(  4)
             00001130         CVB        R4,DBLWRD
             00001140         PACK       DBLWRD(8),WRK4(4)
             00001150         CVB       R9,DBLWRD                    +
               00001160         STC       R9,COMP+3        REL KEY   POS IN COMP
ARE DISP.        00001170         PACK       DBLWRD(8),WRK3(4)
                 00001180         CVB        R8,DBLWRD
                 00001190         AR        R9,R8       REL POS + KEYLEN
                   00001200         CLR       R9,R4         CANNOT BE GREATER TH
AN THE SIZE.       00001210         BH        ATEND
                   00001220         S         R8,ONE       DECR BY ONE FOR COMP
SIZE INST.           00001230         STC        R8,COMP+1              SIZE OF
COMP                 00001240         S          R7,ONE
                     00001250         LR        R9,R7
                     00001260           MR         R8,R4                NR ENTRI
ES-1 X SIZE OF ENTRY   00001270         LR         R7,R6               PLUS LHE
ADR = RHE ADR.         00001280         AR        R7,R9
                       00001290         MVC         40(6,R11),COMP
                         00001300         STM        R2,R7,4(R11)       STORE RE
G INTO HOLD AREA.        00001310*  CHANGE 14 TO GO BACK +14 WHEN TESTING IS DON
E.                       00001320*   EXCEPT WHEN RRGEN CALLS,D  ONT GO BACK WHER
E 14 POINTS.               00001330GOBACK   L          R13,SAVE+4
                           00001340         RETURN     (14,12),T,RC=0
                           00001350ATEND    L          R13,SAVE+4
                             00001360         RETURN     (14,12),T,RC=1
                             00001370*****  THIS IS THE SEARCH ROUTINE.  IT WORK
S ON AN ADDRESS PRINCIPLE.   00001380*****  THE COMPARE IS HERE. SIZE AND DISPLA
CEMENT CHANG  ES WITH EACH     00001390*****  SEARCH.
                               00001400COMP     CLC        0(1,R2),0(R3)
                               00001410         BE         POSHIT
                                 00001420         BL        LOOKUP
                                 00001430         SR         R2,R4
                                 00001440         LR         R7,R2
                                 00001450           B          GOON
                                   00001460LOOKUP   AR         R2,R4
                                   00001470         LR         R6,R2
                                   00001480GOON     CLR          R6,R7
                                     00001490         BH         ATEND
                                     00001500         LR         R9,R4
                                     00001510         AR         R9,R7
                                       00001520         SR         R9,R6
                                       00001530         SR         R8,R8
                                       00001540         DR         R8,R4
       +                                 00001550         LR        R8,R9
                                           00001560         SRL        R8,1(0)
                                           00001570         SLL        R8,1(0)
                                           00001580         CLR        R8,R9
                                             00001590         LR         R2,R7
                                             00001600         BNE        INCR
                                             00001610         SR         R2,R4
                                               00001620***** ADD THE TWO ADRESSE
S TOGETHER AND DIVIDE BY 2 TO GET THE NEXT     00001630*****   LOOK IN THE TABLE
.                                              00001640INCR     AR         R2,R6
                                               000  01650         SLL       R2,8
(0)                                              00001660         SRL       R2,9
(0)                                              00001670         B          COM
P                                                00001680POSHIT     SR         R
2,R5                                               00001690         CVD       R2
,DBLWRD                                            00001700         UNPK      WR
K4(4),DBLWRD+5(3)                                  00001710         MVZ       WR
  K4+3(1),WRK4+2                                     00001720         MVC
0(4,R10),WRK4                                        00001730         CR
 R2,R2                                               00001740         B
 GOBACK                                                00001750SAVE     DC
   18F'0'                                              00001760PARM     DC
   AL4(HOLD1)                                          00001770         DC
   AL4(HOLD2)                                            00001780         DC
     AL4(HOLD3)                                          00001790         DC
    AL4(HOLD4)                                           00001800         DC
    AL4(HOLD5)                                             00001810         DC
      AL4(HOLD6)                                           00001820         DC
      AL4(HOLD7)                                           00001830         DC
      AL4(HOLD8)                                           0  0001840         DC
        AL4(HOLD9)                                           00001850         DC
         X'80'                                               00001860         DC
        AL3(HOLD10)                                          00001870WRK
DS        0F                                                   00001880WRK1
DC        1F'0'                                                00001890WRK2
DC        1F'0'                                                00001900WRK3
DC          1F'0'                                                00001910WRK4
  DC        1F'0'                                                00001920WRK5
  DC        1F'0'                                                00001930ENDOF
  DC        AL4(WRK4)    +                                         00001940LOOKA
T4  DC        AL4(WRK5+  4)                                          00001950REG
HLD   DC        1F'0'                                                00001960RHL
D     DC        1F'0'                                                00001970HIV
AL    DC        XL4'FFFFFFFF'                                          00001980Z
ERO     DC        CL4'0000'                                            00001990O
NE      DC         XL4'00000001'                                       00002000C
ON4     DC        XL4'00000004'                                          0000201
0CON8     DC        XL4'00000008'                                        0000202
0CON32    DC        XL4'00000020'                                        0000203
0CON255   DC        CL4'0255'                                              00002
040CON256   DC        CL4'0256'                                            00002
050DBLWRD   DC        1D'0'                                                00002
060HOLD1    DC        1F'0'           H    HOLD  R14                       00002
070           DC        1F'0'           H    LHETBL  R2                      000
02080         DC        1F'0'                INQUIRY R3                      000
02090         DC        1F'0'                ENTLEN  R4                      000
02100         DC          1F'0'                LHETBL  R5                      0
0002110         DC        1F'0'                LHETBL  R6                      0
0002120         DC        1F'0'                RHETBL  R7                      0
0002130         DC        1F'0'                 ZERO FOR R8
 00002140         DC        1F'0'               ZERO FOR R9
 00002150         DC        1F'0'           H    INDEX ADR   R10
 00002160         DC        1D'0'                 CLC  HOLD
   00002170HOLD2    DC        12F'0'               SAME AS HOLD1
   00002180HOLD3    DC        12F'0'               SAME AS HOLD1
   00002190HOLD4    DC        12F'0'               SAME AS HOLD  1
     00002200HOLD5    DC        12F'0'               SAME AS HOLD1
     00002210HOLD6    DC        12F'0'               SAME AS HOLD1
     00002220HOLD7    DC        12F'0'               SAME AS HOLD1
       00002230HOLD8    DC        12F'0'               SAME AS HOLD1
       00002240HOLD9    DC        12F'0'               SAME AS HOLD1
       00002250HOLD10   DC        12F'0'               SAME AS HOLD1
       000022  60         END
         00002270 {     *             *     {RRDCARD   CSECT
                                     00000010*  THIS MODULE IS CALLED BY THE GEN
ERATOR PROGRAM                       00000020*       TO HANDLE READ MACROS
                                     00000030*
                                       00000040         SAVE  (2,12),T,*
                                       00000050         BALR  10,0
                                       00000060         USING   *,10
                                         00000070         ST    13,SAVEAREA+4
                                         00000080         LA    13,SAVEAREA
                                         00000090ML01     B     ML03
 1 ST  TIME  SWITCH                        00000100ML02     GET   DCBIN,*+0
   READ  RECORD                            00000110ML02A    L     13,SAVEAREA+4
                                           00000120         LM    14,12,12(13)
 RELOAD REG  S                               00000130         LA    15,0(0,0)
   SET RETURN CODE TO 0                      00000140         LA    14,12(0,14)
   BUMP 14 BY 12 TO RETURN TO ADD TO REC CT  00000150         BR    14
   RETURN                                      00000160ML03     OPEN  (DCBIN)
                                               00000170         LA    11,4(0,14)
 14+4POINTS TO ADR OF RECORD AREA              00000180         MVC   ML02+6(2),
0(11)  PUT RECORD AREA ADR IN GET MACRO          00000190         MVI   ML01+1,X
'00'     NOP ML01                                00000200         B     ML02A
                                                 00000210DCBIN    DCB   DDNAME=C
ARD,DSORG=PS,MACRF=GM,EODAD=ML04                 0000022  0SAVEAREA DC    18F'0'
                                                   00000230ML04     L     13,SAV
EAREA+4                                            00000240         LM    14,12,
12(13)                                             00000250         LA 2    15,0
(0,0)        REG AND                                 00000260         BR    14
              BR TO HIS EOF                          00000270         END
                                                     00000280     *
*      RRDINP1   CSECT                                                         0
0000010*  THIS  MODULE  IS CALLED BY THE GENERATOR PROGRAM                     0
0000020*         TO HANDLE READ INP1  / ONLY DIFF BETWEEN INP1 2 & 3 ARE       0
0000030*            REG USED FOR REC AREA AND DDNAME IN DCB
 00000040         SAVE  (2,12),T,*
 00000050         BALR  12,0
 00000060         USING   *,12
   00000070         ST    13,SAVEAREA+4
   00000080         LR    4,13
   00000090         LA    13,SAVEAREA
     00000100         ST    13,8(4)
     00000110ML01     B     ML03             1ST SWITCH
     00000120ML02     GET   DCBIN,RECAREA
       00000130         LA    7,RECAREA      LOAD 7 WITH REC AREA ADR
     * 00000140ML02A    L     13,SAVEAREA+4  RELOAD HIS REGS
       00000150         LM    14,6,12(13)    BYPASS LOADING 7  SINCE   IT IS
         00000160         LM    8,12,52(13)     ASSIGN TO HIS INP1 REC AREA
         00000170         LA    15,0(0,0)      SET RETURN CODE TO 0
         00000180         LA    14,12(0,14)    BUMP 14 BY 12 TO RETURN TO ADD TO
 RE  C CT  00000190         BR    14
           00000200ML03     OPEN  (DCBIN)
           00000210         MVI   ML01+1,X'00'   NOP 1ST TIME SWITCH
           0000022  0         B     ML02A
             00000230ML04     L     13,SAVEAREA+4
             00000240         LM    14,12,12(13)
             00000250         LA      15,0(0,0)
               00000260         BR    14
               00000270SAVEAREA DC    18F'0'
               00000280RECAREA  DS    CL900     V
                 00000290DCBIN    DCB   DDNAME=INP1,DSORG=PS,MACRF=GM,EODAD=ML04
                 00000300         END
                 00000310     *             *      RRDINP2   CSECT
                                           00000010*  THIS  MODULE  IS CALLED BY
 THE GENERATOR PROGRAM                     00000020*         TO HANDLE READ INP1
  / ONLY DIFF BETWEEN INP1 2 & 3 ARE       00000030*            REG USED FOR REC
 AREA AND DDNAME IN DCB                      00000040         SAVE  (2,12),T,*
                                             00000050         BALR  12,0
                                             00000060         USING   *,12
                                               00000070         ST    13,SAVEARE
A+4                                            00000080         LR    4,13
                                               00000090         LA    13,SAVEARE
A                                                00000100         ST    13,8(4)
                                                 00000110ML01     B     ML03
         1ST SWITCH                              00000120ML02     GET   DCBIN,RE
CAREA                                              00000130         LA    8,RECA
REA      LOAD 7 WITH REC AREA ADR                * 00000140ML02A    L     13,SAV
EAREA+4  RELOAD HIS REGS                           00000150         LM    9,12,5
6(13)     ASSIGN TO HIS INP1 REC   AREA              00000160         LM    14,7
,12(13)     BYPASS LOADING 8 SINCE IT IS             00000170         LA    15,0
(0,0)      SET RETURN CODE TO 0                      00000180         LA    14,1
2(0,14)    BUMP 14 BY 12 TO RETURN TO ADD TO RE  C CT  00000190         BR    14
                                                       00000200ML03     OPEN  (D
CBIN)                                                  00000210         MVI   ML
01+1,X'00'   NOP 1ST TIME SWITCH                       0000022  0         B
ML02A                                                    00000230ML04     L
13,SAVEAREA+4                                            00000240         LM
14,12,12(13)                                             00000250         LA
  15,0(0,0)                                                00000260         BR
  14                                                       00000270SAVEAREA DC
  18F'0'                                                   00000280RECAREA  DS
  CL900     V                                                00000290DCBIN    DC
B   DDNAME=INP2,DSORG=PS,MACRF=GM,EODAD=ML04                 00000300         EN
D                                                            00000310     *
        *      RRDINP3   CSECT
       00000010*  THIS  MODULE  IS CALLED BY THE GENERATOR PROGRAM
       00000020*         TO HANDLE READ INP1  / ONLY DIFF BETWEEN INP1 2 & 3 ARE
       00000030*            REG USED FOR REC AREA AND DDNAME IN DCB
         00000040         SAVE  (2,12),T,*
         00000050         BALR  12,0
         00000060         USING   *,12
           00000070         ST    13,SAVEAREA+4
           00000080         LR    4,13
           00000090         LA    13,SAVEAREA
             00000100         ST    13,8(4)
             00000110ML01     B     ML03             1ST SWITCH
             00000120ML02     GET   DCBIN,RECAREA
               00000130         LA    9,RECAREA      LOAD 7 WITH REC AREA ADR
             * 00000140ML02A    L     13,SAVEAREA+4  RELOAD HIS REGS
               00000150         LM    10,12,60(13)    ASSIGN TO HIS INP1 REC   A
REZ              00000160         LM    14,8,12(13)     BYPASS LOADING 9 SINCE I
T IS             00000170         LA    15,0(0,0)      SET RETURN CODE TO 0
                 00000180         LA    14,12(0,14)    BUMP 14 BY 12 TO RETURN T
O ADD TO RE  C CT  00000190         BR    14
                   00000200ML03     OPEN  (DCBIN)
                   00000210         MVI   ML01+1,X'00'   NOP 1ST TIME SWITCH
                   0000022  0         B     ML02A
                     00000230ML04     L     13,SAVEAREA+4
                     00000240         LM    14,12,12(13)
                     00000250         LA      15,0(0,0)
                       00000260         BR    14
                       00000270SAVEAREA DC    18F'0'
                       00000280RECAREA  DS    CL900     V
                         00000290DCBIN    DCB   DDNAME=INP3,DSORG=PS,MACRF=GM,EO
DAD=ML04                 00000300         END
                         00000310     *             *      RREOJMOD  CSECT
                                                   00000010*  THIS MODULE IS CAL
LED BY THE GENERATOR PROGRAM                       00000020*    TO PRINT OUT
                                                   00000030*        TOTALS AT EO
J OF GOOD RUN  NOTE: R5 POINTS TO TOTALS             00000040         SAVE  (2,1
2),T,*                                               00000050         BALR  12,0
                                                     00000060         USING   *,
12                                                     00000070         ST    13
,SAVEAREA+4                                            00000080         LA    13
,SAVEAREA                                              00000090         OPEN  (D
CBPRT,(OUT  PUT))                                        00000100         MVC
PRTREC(133),PRTREC-1    CLEAR PRT REC                    00000110         PUT
DCBPRT,PRTREC+1    SPACE 1 LINE                          00000120         MVI
PRTREC,X'09'            C  HG TO SKIP 1                    00000130         LR
  6,5          R6= LHE ADR OF TOTALS                       00000140         LA
  7,PRTLINES   R7= HEADER LINES                            00000150         LA
  8,8(0,0)           R8=9 FOR TALLY                          00000160ML08     MV
C   PRTREC+1(16),0(7)  MOVE HEADER INFO TO PRT RECORD        00000170         UN
PK   PRTREC+9(8),0(4,6) UNPACK TOTAL                         00000180         OI
    PRTREC+16,X'F0'     REMOVE SIGN                            00000190
PUT   DCBPRT,PRTREC+1     PRINT TOTAL                          00000200
BCT   8,ML10           Q. PRINTED ALL TOTALS                   00000210
CLOSE (DCBPRT)                                                 0000022  0
  L     13,SAVEAREA+4      *YES                                  00000230
  LM    14,12,12(13)       * RETURN                              00000240
  LA    15,0(0,0)          *  CONTROL                            00000250
  BR      14                 *                                     00000260ML10
    LA    6,4(6)              BUMP R6 BY 4 (POINT TO NEXT TOTAL)   00000270
    LA    7,16(7)             BUMP R7 BY 16 (POINT TO NEXT HDR)    00000280
    B     ML08                                                       00000290SAV
EAREA DC    18F'0'                                                   00000300
      DC    CL2' '                                                   00000310PRT
REC   DS    CL133                                                      00000320P
RTLINES DC    CL8'PRINT---'                                            00000330
        DC    CL8'0'                                                   00000340
        DC    CL8'INP1----'                                              0000035
0         DC    CL8'0'                                                   0000036
0         DC    CL8'INP2----'                                            0000037
0         DC    CL8'0'                                           +         00000
380         DC    CL8'INP3----'                                              000
00390         DC    CL8'0'                                                   000
00400         DC    CL8'OUT1----'                                            000
00410         DC    CL8'0'                                                   0
0000420         DC    CL8'OUT2----'                                            0
0000430         DC    CL8'0'                                                   0
0000440         DC    CL8'OUT3----'                                            0
0000450           DC    CL8'0'
 00000460         DC    CL8'CARDIN--'
 00000470         DC    CL8'0'
 00000480         DC    CL8'  PUNCH---'
   00000490         DC    CL8'0'
   00000500DCBPRT   DCB   DDNAME=SYSOUT,DSORG=PS,MACRF=PM,RECFM=U,
  C00000510               LRECL=120,BLKSIZEb =120
     00000520         END
     00000530 {     *             *    _ IORTNS   START
                                 00000010         USING SELF,R12
                                 00000020         EJECT
                                 00000030C  OUNTS   DS    0F
                                   00000040USERBASE EQU   *
                                   00000050         USING *,R5
                                   00000060         DS      CL8192
                                     00000070         ORG   *-8192
                                     00000080PRCNT    DC    PL4'0'
                                     00000090IN1CNT   DC    PL4'0'
                                       00000100IN2CNT   DC    PL4'0'
                                       00000110IN3CNT   DC    PL4'0'
                                       00000120O1CNT    DC    PL4'0'
                                         00000130O2CNT    DC    PL4'0'
                                         00000140O3CNT    DC    PL4'0'
                                         00000150CRDCNT   DC    PL4'0'
                                           00000160PCHCNT   DC    PL4'0'
                                           00000170IN1MOD   DC    1F'0'
* THESE WILL                               00000180IN2MOD   DC    1F'0'
*   CONTAIN THE                              00000190IN3MOD   DC    1F'0'
  *     ADDRESS OF                           00000200OT1MOD   DC    1F'0'
  *       THE I/O MODULE                     00000210OT2MOD   DC    1F'0'
  *         AFTER LOAD                       0000022  0OT3MOD   DC    1F'0'
    *                                          00000230PRTMOD   DC    1F'0'
    *                                          00000240RDCDMOD  DC    1F'0'
    *                                          00000250         DS      0D
                                                 00000260         DC    XL8'00'
                                                 00000270CVDWORD  DC    XL8'00'
                                                 00000280RTCD     DC    CL8'0000
00  00' 1ST J= RETURN CODE / LAST 4 = WORKAREA     00000290DATE6    DC    CL6'YY
MMDD'                                              00000300DATE9    DC    CL9'DD
 MMM YY'                                           00000310DATE5    DC    CL5'YY
DDD'                                                 00000320         DS    0D
                                                   * 00000330INXWK    DC    XL8'
00'                                                * 00000340INX1     DC    CL4'
0000'                                               ** 00000350INX2     DC    CL
4'0000'                                             ** 00000360IOMOD    DC    A(
IORTNS)                                                00000370AUGSUM   DS    CL
9                                              +         00000380ADDEND   DS
CL9                                                        00000390EXITSK   DC
  S(USERR)                                                 00000400         DS
  CL40                                                     00000410FCON     DC
  XL2'FFFF'                                                0  0000420CON2     DC
    XL2'02'                                                  00000430ONE      DC
    PL1'1'                                                   00000440FIELD8   DC
    CL8' '                                                   00000450FIELD1  6
DC    CL16' '                                                  00000460RESULT
DC    CL30' '                                                  00000470
DS    0F                                                       00000480USERR
EQU   *                (EXIT EXECUTED WITHOUT ENTER)             00000490
  LA    R15,9(0,0)        SET RETURN CODE TO 09-EXIT W/O ENTER   00000500
  B     RETURN                                                   00000510RETURN
  EQU   *              *   RETURN                                  00000520
    L     R13,4(0,13)    *  CONTROL                                00000530
    RETURN (14,12),T,RC=(15)                                       00000540EOJRT
N   EQU   *    THIS RTN SHOULD LOAD EOJ   MODULE TO PRT TOTALS       00000550
      LOAD  EPLOC=EOJMOD       LOAD EOJ MOD  TO PRT TOTALS           00000560
      LR    R15,R0             LOAD 15 WITH EOJMOD EP LOCATION       00000570
      BALR  R14,R15            BR TO EOJ MOD                           00000580
        PACK  CVDWORD,RTCD(4)     PACK RETURN CODE                     00000590
        CVB   R15,CVDWORD         CONVERT RETURN CODE TO BINARY IN R15 00000600
        B     RETURN                                                     0000061
0EOJMOD   DC    CL8'RREOJMOT'                                            0000062
0BADPARMS EQU   *  THIS RTN HANDLES BAD PARAMETERS = RETURNS WITH '900'  0000063
0         LA    R15,8(0,0)        SET RETURN CODE TO 08-PARAMETER ERROR  0000064
0           B     RETURN                                                   00000
650* NOTE: USED FOR RRGENSRT LOGIC                                         00000
660         DS    0F                                                       00000
670SRT4     DC    XL  4'04'   SORT ENTRY POINT + 4  'RELEASE'                000
00680SRT8     DC    XL4'08'                    + 8  'SORT   '                000
00690SRT12    DC    XL4'0C'                    + 12 'RETURN '                000
00700SORTBR   L     R15,SRT8   LOAD   SORT ENTRY POINT ADR + 8                 0
0000710         BR    R15        GO TO INPUT EXIT RTN                          0
0000720INPROC   B     *+0        TO BE FILLED IN WITH TAG ADR OF INPUT AND     0
0000730OUTPROC  B     *+0         OUTPUT PROCEDURE  S BEFORE PASSING CONTROL
 00000740*                          TO USER . POINTED TO IN CALL LOGIC GENERATED
 00000750*                          FOR RRGENSRT
 00000760         EJECT                                          +
   00000770USERCODE DS    0D
     00000780         ORG
     00000790         EJECT
     00000800SELF     DS    CL1772
       00000810CARDID   DS    CL10
       00000820CARD     DS    CL80
       00000830PRTID    DS    CL11
       000008  40PRTAREA  DS    CL133
         00000850PUNCHID  DS    CL10
         00000860PCHREC   DS    CL80
         00000870CONS     DC      8CL250' '
           00000880         EJECT
           00000890         DS    0D
           00000900OURCODE  DS    CL8192
             00000910         ORG   *-8192
             00000920         USING *,R6,R7,R2
             00000930         SAVE  (2,12),T,*
               00000940         LR    R6,15       SET BASE 12 TO OURCODE
               00000950HERE     L     R7,BR7
               00000960         LA    R9,TAGTAB
                 00000970         L     R5,BR5
                 00000980         L    R12,=A(SELF)
                 00000990         ST    13,SYSAVE+4
                   00001000         LA    13,SYSAVE
                   00001010         MVC   CARDID(4),=CL4'CARD'
                   00001020         MVC   PUNCHID(5),=CL5'PUNCH'
                   0000  1030         MVC   PRTID(7),=CL7'PRINTER'
                     00001040         MVI   PRTAREA-1,X'40'
                     00001050         OPEN  (INCARD,INPUT,PRINTER,OUTPUT)
                     00001060           BAL   R14,DATERTN
                       00001070         MVC   DATE+6(9),DATEDMY   PUT SYS DATE I
N TO HDR               00001080         BAL   R14,PRTHDR
                       00001090         B     RDPARM
                         00001100BR5      DC    A(IORTNS)
                         00001110BR7      DC    A(OURCODE+4096)
                         00001120BR13     DC    A(SYSAVE)
                           00001130         EJECT
                           00001140MLRTN    EQU   *
                           00001150ML01     CLI   CARD+23,C'-'             Q. A-
ADR+  INDEXED                00001160         BNE   ML02                       N
O                              00001170         MVC   AXIND,CARD+24
 YES-SAVE INDEX NUMBER         00001180         MVC   CARD+23(9),CARD+25
    -SHIFT TO ELIM DASH + INX  00001190ML02     CLI   CARD+28,C'-'             O
. B-ADR INDEXED                  00001200         BNE   ML03
   NO                            00001210         MVC   BXIND,CARD+29
   YES-SAVE INDEX NUMBER         00001220ML03     LA    R8,OPCODE+304   POINT 8
TO MIDPOINT OF TABLE               00001230         LA    R5,0
   LOAD 5 WITH 0                   00001240         LA    R4,6            LOAD 4
 WITH TALLY CT OF 6                00001250ML04     CLC   CARD+6(5),0(R8)     Q.
 OPCODE = TABLE                    00001260           BE    ML08
       YES                           00001270         BCT   R4,ML05
    Q. NO-IS SEARCH FINI             00001280ML04A    MVI   OPERR,C'E'
      YES SET OPERATION ERR          00001290         MVI   N  OGOSW,C'1'
        TURN ON NO GO SWITCH.          00001300         B     PARPRT
                                       00001310ML05     BH    ML06
      Q. CARD OP > TABLE //YES ADD     00001320         S     R8,OPADRS(R5)
    //NO SUB FROM TABLE ADR              00001330         B     ML07
                                         00001340ML06     A     R8,OPADRS(R5)
                                         00001350ML07     LA    R5,4(R5)
             BUMP REG 5 BY 4               00001360         B     ML04
             GO COMPARE AGAIN              00001370ML08     MVC   OP(2),10(R8)
      MOVE OPCODE+MASK TO INST             00001380         MVC   CONTROL(3),5(R
8)    MOVE CONTROL INFO                      00001390         MVC   ADR1(4),12(R
8)                                           00001400         MVC   ML09+2(2),8(
R8)     SETUP BRANCH TO APPRO OP CODE        00001410ML09     B     ML09     *RT
N & BRANCH TO IT                               00001420OPCODE   DS    0F
                                               00001430         DC    CL5'ADD  '
          ADD                                  00001440         DC    CL3'016'
                                               00001450           DC    S(SIZERT
N)                                               00001460         DC    XL2'FA00
'                                                00001470         DC    S(ADRRTN
)                                                00001480         DC      S(ADDR
TN)                                                00001490         DC    CL5'AP
   '          AP                                   00001500         DC    CL3'01
6'                                                 00001510         DC    S(SIZE
RTN2)                                                00001520         DC    XL2'
FA00'                                                00001530         DC    S(AD
RRTN)                                                00001540         DC    S(AP
RTN)                 +                                 00001550         DC    CL
8'CALL    '       C  ALL                                 00001560         DC
S(CALLRTN)                                               00001570         DC
XL2'0000'                                                00001580         DS
CL4                                                        00001590         DC
  CL5'COM  '          COM                                  00001600         DC
  CL3'256'                                                 00001610         DC
  S(SIZERTN)                                                 00001620         DC
    XL2'D500'                                                00001630         DC
    S(ADRRTN)                                                00001640         DC
    S(COMRTN)                                                000  01650
DC    CL5'CONS '          CONS                                 00001660
DC    CL3'040'                                                 00001670
DC    S(SIZERTN)                                               00001680
  DC    XL2'0000'                                                00001690
  DC    S(AADRRTN)                                               00001700
  DC    S(CONSRTN)                                               00001710
  DC    CL5'CP     '          CP                                   00001720
    DC    CL3'016'                                                 00001730
    DC    S(SIZERTN2)                                              00001740
    DC    XL2'F900'                                                  00001750
      DC    S(ADRRTN)                                                00001760
      DC    S(CPRTN)                                                 00001770
      DC    CL5'CVBZ'          CVBZ                                    00001780
        DC    CL3'016'                                                 00001790
        DC    S(SIZERTN2)                                              00001800
        DC    XL2'FFFF'                                                  0000181
0         DC    S(ADRRTN)                                                0000182
0         DC    S(CVBZNRTN)                                              0000183
0         DC    CL5'CVZB'          CVZB                                  0  0001
840         DC    CL3'016'                                                 00001
850         DC    S(SIZERTN2)                                              00001
860         DC    XL2'FFFF'                                                00001
870           DC    S(ADRRTN)                                                000
01880         DC    S(CVBINRTN)                                              000
01890         DC    CL5'DVD  '          DIVIDE                               000
01900         DC    CL3'  015'                                                 0
0001910         DC    S(SIZERTN2)                                              0
0001920         DC    XL2'FFFF'                                                0
0001930         DC    S(ADRRTN)        +
 00001940         DC    S(DVDRTN)
   00001950         DC    CL8'ENTER   '       ENTER
   00001960         DC    S(ENTRTN)
   00001970         DC    XL2'47F0'
     00001980         DS    CL4
     00001990         DC    CL8'EXIT    '       EXIT
     00002000         DC    S(EXRTN)
       00002010         DS    CL6
       00002020         DC    CL8'GE      '        GE
       00002030         DC    S(BRRTN)
         00002040         DC    XL2'4780'
         00002050         DS    CL4
         00002060         DC    CL8'GH      '        GH
         00002070           DC    S(BRRTN)
           00002080         DC    XL2'4720'
           00002090         DS    CL4
           00002100         DC      CL8'GL      '        GL
             00002110         DC    S(BRRTN)
             00002120         DC    XL2'4740'
             00002130         DS    CL4
               00002140         DC    CL8'GNE     '        GNE
               00002150         DC    S(BRRTN)
               00002160         DC    XL2'4770'
                 00002170         DS    CL4
                 00002180         DC    CL8'GO      '       GO
                 00002190         DC    S(BRRTN)
                   00002200         DC    XL2'47F0'
                   00002210         DS    CL4
                   00002220         DC    CL5'MOVE '          MOVE
                     00002230         DC    CL3'900'
                     00002240         DC    S(SIZERTN)
                     00002250         DC    XL2'D200'
                     000022  60         DC    S(ADRRTN)
                       00002270         DC    S(MOVERTN)
                       00002280         DC    CL5'MPY  '          MULTIPLY
                       00002290         DC      CL3'015'
                         00002300         DC    S(SIZERTN2)
                         00002310         DC    XL2'FFFF'
                         00002320         DC    S(ADRRTN)+
                           00002330         DC    S(MPY  RTN)
                             00002340         DC    CL5'MVN  '          MVN
                             00002350         DC    CL3'256'
                             00002360         DC    S(SIZERTN)
                               00002370         DC    XL2'D100'
                               00002380         DC    S(ADRRTN)
                               00002390         DC    S(MVNRTN)
                                 00002400         DC    CL5'MVO  '          MVO
                                 00002410         DC    CL3'016'
                                 00002420         DC    S(SIZERTN2)
                                   00002430         DC    XL2'F100'
                                   00002440         DC    S(ADRRTN)
                                   00002450         DC    S(MVORTN)
                                     00002460         DC    CL5'MVZ  '
MVZ                                  00002470         DC    CL3'256'
                                     00002480         DC    S(SIZERTN)
                                     00002490           DC    XL2'D300'
                                       00002500         DC    S(ADRRTN)
                                       00002510         DC    S(MVZRTN)
                                       00002520         DC    CL5  'NC   '
    NC                                   00002530         DC    CL3'256'
                                         00002540         DC    S(SIZERTN)
                                         00002550         DC    XL2'D400'
                                           00002560         DC    S(ADRRTN)
                                           00002570         DC    S(NCRTN)
                                           00002580         DC    CL5'OC   '
      OC                                     00002590         DC    CL3'256'
                                             00002600         DC    S(SIZERTN)
                                             00002610         DC    XL2'D600'
                                               00002620         DC    S(ADRRTN)
                                               00002630         DC    S(OCRTN)
                                               00002640         DC    CL5'PACK '
          PACK                                   00002650         DC    CL3'016'
                                                 00002660         DC    S(SIZERT
N2)                                              00002670         DC    XL2'F200
'                                                00002680           DC    S(ADRR
TN)                                                00002690         DC    S(PACK
RTN)                                               00002700         DC    CL8'PR
INT   '       PRINT                                00002710         DC    S+ (PR
TRTN)                                                00002720         DC      XL
2'0000'                                                00002730         DS    CL
4                                                      00002740         DC    CL
8'READ    '       READ                                 00002750         DC    S(
RDRTN)                                                   00002760         DC
XL2'0000'                                                00002770         DS
CL4                                                      00002780         DC
CL5'SP   '          SP                                     00002790         DC
  CL3'016'                                                 00002800         DC
  S(SIZERTN2)                                              00002810         DC
  XL2'FB00'                                                  00002820         DC
    S(ADRRTN)                                                00002830         DC
    S(SPRTN)                                                 00002840         DC
    CL5'SUB  '          SUB                                    00002850
DC    CL3'016'                                                 00002860
DC    S(SIZERTN)                                               00002870
DC    XL2'FB00'                                                00002  880
  DC    S(ADRRTN)                                                00002890
  DC    S(SUBRTN)                                                00002900
  DC    CL8'TPM     '       TPM                                  00002910
  D  C    S(TPMRTN)                                                00002920
    DC    XL2'4720'                                                00002930
    DS    CL4                                                      00002940
    DC    CL5'TRAN  S'     TRANS                                     00002950
      DC    CL3'256'                                                 00002960
      DC    S(SIZERTN)                                               00002970
      DC    XL2'DC00'                                                  00002980
        DC    S(ADRRTN)                                                00002990
        DC    S(TRRTN)                                                 00003000
        DC    CL8'TRZ     '       TRZ                                    0000301
0         DC    S(BRRTN)                                                 0000302
0         DC    XL2'4780'                                                0000303
0         DS    CL4                                                        00003
040         DC    CL5'UNPK '          UNPK                                 00003
050         DC    CL3'016'                                                 00003
060         DC    S(SIZERTN2)                                              000
03070         DC    XL2'F300'                                                000
03080         DC    S(ADRRTN)                                                000
03090         DC    S(UNPKRTN)                                               000
03100        +  DC    CL8'UTC     '       UTC                                  0
0003110           DC    S(BRRTN)
 00003120         DC    XL2'47F0'
 00003130         DS    CL4
 00003140         DC    CL  8'WRITE   '       WRITE
   00003150         DC    S(WRTRTN)
   00003160         DC    XL2'0000'
   00003170         DS    CL4
     00003180         DC    CL5'XC   '          XC
     00003190         DC    CL3'256'
     00003200         DC    S(SIZERTN)
       00003210         DC    XL2'D700'
       00003220         DC    S(ADRRTN)
       00003230         DC    S(XCRTN)
         00003240         DC    CL5'XCONS'          XCONS
         00003250         DC    CL3'020'
         00003260         DC    S(SIZERTN)
           00003270         DC    XL2'0000'
           00003280         DC    S(AADRRTN)
           00003290         DC    S(XCONSRTN)
           00003300           DC    3CL16'ZZZZZZZZZZZZZZZZ'
             00003310OPADRS   DS    0F            * THIS TABLE IS USED TO BINARY
             00003320         DC    XL4'A0'        * SEARCH THE OPCODE TABLE  *
DECIMAL 160  00003330         DC      XL4'50'        *
           80  00003340         DC    XL4'20'        *
           32  00003350         DC    XL4'10'        *
           16  00003360         DC    XL4'10'               *
      *DEC 16    00003370         EJECT
                 00003380IN1      DC    CL6'ITAPE1'
                 00003390ADRA      DC   XL2'7000'     LHE ADR OF R  EC AREA
                   00003400         DC    F'0'                     SIZE OF REC A
REA                00003410         DC    F'0'                     BLOCK FACTOR
                   00003420         DC    F'0'                     BLOCK SIZE
                     00003430         DS    CL20                     STORAGE FOR
 CARD COL 22 THRU 41 00003440IN2      DC    CL6'ITAPE2'
                     00003450ADRB      DC   XL2'8000'
                       00003460         DS    CL32
                       00003470IN3      DC    CL6'ITAPE3'
                       00003480ADRC      DC   XL2'9000'
                       00003490       *    _          DS    CL32
                                     00003500DK1      DC    CL6'DISK1 '
                                     00003510ADRD     DC    H'0'
                                     00003520           DS    CL32
                                       00003530DK2      DC    CL6'DISK2 '
                                       00003540ADRE     DC    H'0'
                                       00003550         DS      CL32
                                         00003560OUT1     DC    CL6'OTAPE1'
                                         00003570ADRJ     DC    XL2'B000'
         0 + R 10                        00003580         DS    CL32
                                           00003590OUT2     DC    CL6'OTAPE2'
                                           00003600ADRK     DC    XL2'B384'
 900 DECIMAL + R 10                        00003610         DS    CL32
                                             00003620OUT3     DC    CL6'OTAPE3'
                                             00003630ADRL     DC    XL2'B708'
  1800 DECIMAL + R 10                        00003640         DS    CL32
                                               00003650         DS    0F
              *FORMAT AABBBBBB                 00003660AINXAR   DC    6XL4'FFFFF
FFF'                                    ****** 00003670BINXAR   DC    6XL4'FFFFF
FFF'                                    *  ***** 00003680INSHOLD  DS    0XL80
                * WHERE  A= SIZE OF INST-1       00003690         DC    10XL8'FF
FFFFFFFFFFFFFF' *        B= INSTRUCTION          00003700XIND     DS    0CL2
  INDEXING INDICATOR                             0000371  0AXIND    DC    XL1'00
'   00=NO INDEXING ON A-ADR F1= INX1 F2=INX2 ***** 00003720BXIND    DC    XL1'00
'   00=NO INDEXING ON B-ADR F1= INX1 F2=INX2 ***** 00003730**** INSTUCTION BUILD
 AREA                                              00003740         DS      0F
                                                     00003750SSINST   DS    0CL6
      OP/L1L2/B1D1/B2D2 OR OP/LENGTH/B1D1/B2D2       00003760RXINST   DS    0CL4
      OP/M1X1/B1D1                                   00003770OP       DS    CL1
                                                       00003780LEN      DS    CL
1       L1L1L2L2 OR LLLLLLLL OR MMMMXXXX               00003790B1D1     DS    0C
L2      BBBBDDDD/DDDDDDDD                              00003800B1       DS    CL
1                                                        00003810D1       DS
CL1                                                      00003820B2D2     DS
0CL2      BBBBDDDD/DDDDDDDD                              00003830B2       DS
CL1                                                        00003840D2       DS
  CL1                                                      00003850**
            EXECUTING THE GENERATED CODE. IF = 1 PROGRAM   00003860LOCERR   DC
  CL1' '   *ERROR FLAGS * SPACE=NO ERROR           +         00003870OPERR    DC
    CL1' '   *               E   =ERROR                        00003880SIZEERR
DC    CL1' '                                                   00003890ADRERR
DC    CL1' '                                                   00003900NOGOSW
DC    CL1'0'   * THIS SW IS SET IF AN ERROR IS FOUND IN A      0  0003910**
                  PARAMETER DURING GENERATION. IS CKED BEFORE    00003920**
                  IS ABORTED.                                    00003930CONTROL
  DS    0CL9                                                     00003940SZEDIT
    DS    CL3       EDIT CRITERIA FOR SIZE RTN.                    00003950ADR1
    DS    CL2                                                      00003960ADR2
    DS    CL2                                                      00003970ISCON
    DC    CL3'  IS '                                                 00003980ISR
CON   DC    CL3'ISR'                                                 00003990EOJ
CON   DC    CL3'EOJ'                                                 00004000END
USER  DC    A(USERBASE+8192)                                           00004010C
ENDUSER DC    A(USERBASE+8192)                                         00004020B
DLIST   DC    XL2'6FFF'                                                00004030
        EJECT                                                            0000404
0         DS    0F                                                       0000405
0RDPARM   EQU   *                                                        0000406
0******** THIS  ROUTINE READS INPUT PARAMETERS.                            00004
070         GET   INCARD,CARD                                              00004
080         CLI   CARD,C'T'    Q. IS THERE A TAG                           00004
090         BNE   NOTAG     NO                                               000
04100         PUT   PRINTER,PRTAREA    YES SPACE 1 LINE                      000
04110NOTAG    MVC   PRTAREA+18(80),CARD                                      000
04120         CLI   CARD,C'*'           Q. IS THIS A REMARK                  000
04130           BNE   NOREMARK              NO                                 0
0004140         PUT   PRINTER,PRTAREA+1        YES PRINT IT                    0
0004150         MVC   PRTAREA(133),PRTAREA-1   CLEAR REMARK OUT OF PRT AREA    0
0004160         B     RD  PARM                   GO READ NEXT RECORD
 00004170NOREMARK MVC   AXIND(2),=XL2'0000'  TURN INDEX IND OFF
 00004180IOSWITCH BC    15,IOCK01          * THIS INS NOP AFTER LAST IO PARM.
 00004190NONIO    CLC   CARD(4),=CL4'ST  OP'
   00004200         BE    PAREND
   00004210         CLC   CARD(4),=C'    '
   00004220         BE    MLRTN
     00004230         BAL   R14,TAGRTN
     00004240         B     MLRTN
     00004250IOCK01   MVI   IOSWITCH+1,X'00'                         +
       00004260         L     R11,RECAR
         00004270         LH    R10,USERBD
         00004280         B     NONIO
         00004290RECAR    DC    A(USERCODE)
           00004300USERBD   DC    S(USERCODE)
           00004310         EJECT
           00004320PARPRT   EQU   *
           000043  30*******  THIS ROUTINE PRINTS THE INPUT CARD AND THE MACHINE
 CODE ****** 00004340*** GENERATED FOR THE PARAMETER. THE MACHINE CODE AND ITS M
ACHINE ***** 00004350*** ADDRESS WILL BE PRINTED IN HEXIDECIMAL.
      ****** 00004360         MV  I   PARM01C+1,X'00'   TURN OFF PRT BYPASS SW
               00004370         LA    R3,AINXAR                *****************
******  ****** 00004380         CLC   AINXAR(2),FFCON        *SET UP INSTRUCTION
 HOLD*  ****** 00004390         BE    PARPRT01                 * AREA FOR PARAME
TER    *  ****** 00004400         CLC   BINXAR(2),FFCON        * PRINT ROUTINE.
       *  ****** 00004410         BNE   PARPRTR                * INSTUCTIONS STA
RT AT  *  ****** 00004420         MVC   BINXAR(80),INSHOLD       *  INSHOLD IF N
O INDEXES*  ****** 00004430         B     PARPRTR                *     IF INDEXI
NG       *  ****** 00004440PARPRT01 LA    R3,BINXAR              *  INSTRUCTIONS
 WILL BE *  ****** 00004450         CLC   BINXAR(2),FFCON        *  IN AINXAR
OR BINXAR  *  ****** 00004460         BNE   PARPRTR                  *      OR
               ***** 00004470         LA    R3,INSHOLD               *     BOTH
               ***** 00004480PARPRTR  LA    R5,8(0)
                       00004490         CLC   LOCERR(4),=CL4'    '
                       00004500         BNE   PARMERR
                       00004510         CLC   0(2,R3),FFCON
                       0000  4520         BE    PARM02
                         00004530PARM01   MVC   HEXHLD(6),FFCON
                         00004540         ST    R11,HEXHLD         STORE ACTUAL
INST ADR                 00004550           BAL   R14,HEXRTN         GO CONVERT
TO HEX PRINT A=C1          00004560         MVC   PRTAREA+111(6),CONVHEX+2
ACT ADR TO PRT LINE        00004570         STH   R10,HEXHLD
                           00004580         C     R11,END  USER      Q. OUT OF M
EM FOR GEN USER INSTRUCTIONS 00004590         BL    PARM01A                 NO
                             00004600         LA    R15,10(0,0)     YES-SET RETU
RN CODE TO 10-OUT OF MEMORY  00004610         LA    R5,USERBASE           LOAD R
5 SO THE RETURN RTN CAN BE USE 00004620         B     RETURN               GO TO
 RETURN                        00004630PARM01A  MVC   0(6,R11),2(R3)      MOVE I
NST TO USERCODE                00004640         LA    R8,1(0)
       +                         00004650         MVI   0(R3),X'00'
                                   00004660         AH    R8,0(R3)
                                   00004670         AR    R10,R8
                                   00004680PARM01B  AR    R11,R8
                                     00004690         BAL   R14,HEXRTN
                                     00004700         MVC   PRTAREA+103(4),CONVH
EX                                   00004710PARM01C  NOP   PARM02A    BYPASS PR
INTING EXCEPT 1ST LINE                 00004720PARM02   PUT   PRINTER,PRTAREA+1
                                       00004730         MVI   PARM01C+1,X'F0'  T
URN ON SW                              00004740PARM02A  MVC   PRTAREA(133),PRTAR
EA-1                                   00004750           MVC   0(2,R3),FFCON
                                         00004760         AR    R3,R5
                                         00004770         CLC   0(2,R3),FFCON
                                         00004780         BNE   P  ARM01
                                           00004790         B     RDPARM
                                           00004800PARMERR  MVI   NOGOSW,C'1'
                                           00004810         CLC   LOCERR(1),=C'E
  '                                          00004820         BE    ERR01
                                             00004830         CLC   OPERR(1),=C'
E'                                           00004840         BE    ERR02
                                               00004850         CLC   SIZEERR(1)
,=C'E'                                         00004860         BE    ERR03
                                               00004870         MVC   PRTAREA+1(
13),=CL13'ADDRESS ERROR'                         00004880ERREXIT  MVC   LOCERR(4
),=C'    '                                       00004890         MVI   AINXAR,X
'FF'                                      ****** 00004900         MVC   AINXAR+1
(127),AINXAR                              ***  *** 00004910         B     PARM02
                                                   00004920ERR01    MVC   PRTARE
A+1(14),=CL14'LOCATION ERROR'                      00004930         B     ERREXI
T                                                  00004940E  RR02    MVC   PRTA
REA+1(15),=CL15'OPERATION ERROR'                     00004950         B     ERRE
XIT                                                  00004960ERR03    MVC   PRTA
REA+1(10),=CL10'SIZE ERROR'                          00004970         B       ER
REXIT                                                  00004980         EJECT
                                                       00004990BXRTN    EQU   *
                                                ****** 00005000*******  THIS  RO
UTINE ALTE  RS THE CODE THAT ALLOWS INDEXING FOR  ****** 00005010**@****  ADDRES
S AT B1D1. THE CODE TO PACK THE INDEX FIELD,       ***** 00005020*******  CONVER
T INDEX TO BINARY AND ADD THE INDEX TO THE BASE   ****** 00005030*******  IS PLA
CED IN LINE. R3= B ADDR I+ ND REG,R2='A'ADDR INX.   ****** 00005040         XR
  R4,R4         *CLEAR   REG 4.                       ****** 00005050         IC
    R4,B1D1       *GET REAL BASE REG.                 ****** 00005060         SR
L   R4,4(0)       *MOVE BASE REG TO LOW DIGIT OF R4.   ***** 00005070         MV
Z   B1D1(1),=X'30'                                          ** 00005080
STC   R4,INSTIX3+3  *BASE REG TO ADD REG INS.            ***** 00005090
MVZ   INSTIX3+3(1),=X'30' *B INDEX REG   TO ADD REG INS.****** 00005100
MVZ   INSTIX2+3(1),=X'30' *B INDEX REG TO CVB INS.        ****** 00005110
  CLI   BXIND,X'F1'   *'B' ADDR NEED INX1 2               ****** 00005120
  BNE   BXRTN02        NO                                 ****** 00005130ABXCOM
  MVC   BINXAR(8),INSTIX1  * PACK INX1 INS TO HOLD AREA.  ****** 000  05140BXRTN
01  MVC   BINXAR+8(6),INSTIX2 * CVB INS TO HOLD AREA.       ****** 00005150
    MVC   BINXAR+16(4),INSTIX3 * AR INS TO HOLD AREA.        ***** 00005160
    BR    R14                    RETURN                     ****** 00005170BXRTN
02    MVC   BINXAR(8),INSTIX4   * PACK INX2 INS TO HOLD AREA. ****** 00005180
      CLI   BXIND,X'F2'        *B ADR NEED IN2                ****** 00005190
      BE    BXRTN01                                           ****** 00005200
      MVI   ADRERR  ,C'E'                                        ***** 00005210
        B     PARPRT                                            ****** 00005220A
XRTN    EQU   *                                                  ***** 00005230*
**  THIS RTN INDEXES THE ADDRESS   AT B2D2.                        ***** 0000524
0         XR    R4,R4         * CLEAR REG 4                        ***** 0000525
0         IC    R4,B2D2       * GET REAL BASE                      ***** 0000526
0         SRL   R4,4(0)       * BASE REG TO LOW   DIGIT OF R4.       ***** 00005
270         STC   R4,INSTIX3+3  * BASE REG TO AR INS.                ***** 00005
280         MVZ   B2D2(1),=X'20'                                        ** 00005
290         MVZ   INSTIX3+3(1),=X'20' 'A' INX REG TO AR INS.           ***** 000
05300         MVZ   INSTIX2+3(1),=X'20' 'A' INX REG TO CVB INS.        ***** 000
05310         CLI   AXIND,X'F1'        *'A' ADDR NEED INX1.?           ***** 000
05320         BNE   AXRTN02                                            ***** 0
0005330         MVC   AINXAR(8),INSTIX1   * PK INX1 INS TO HOLD AREA.    ***** 0
0005340AXRTN01  MVC   AINXAR+8(6),INSTIX2  * CVB INS TO HOLD AREA.       ***** 0
0005350         MVC   AINXAR+16(4),INSTIX3  * AR INS TO HOLD AREA.       ***** 0
0005360           BR    R14                                                *****
 00005370AXRTN02  MVC   AINXAR(8),INSTIX4      * PK INX2 INS TO HOLD AREA. *****
 00005380         CLI   AXIND,X'F2'                                        *****
 00005390         BE    AXRT  N01                                            ***
** 00005400         MVI   ADRERR,C'E'                                        ***
** 00005410         B     PARPRT                                             ***
** 00005420INSTIX1  DC    XL2'05'          +                                   *
**** 00005430         PACK  INXWK(8),INX1  (4)
 ***** 00005440INSTIX2  DC    XL2'03'
 ***** 00005450         CVB   R2,INXWK
 ***** 00005460INSTIX3  DC    XL2'01'
   ***** 00005470         AR    R2,R3
   ***** 00005480INSTIX4  DC    XL2'05'
   ***** 00005490         PACK  INXWK(8),INX2(4)
     ***** 00005500         EJECT
           00005510PRTHDR   EQU   *
           00005520******* THIS ROUTINE PRINTS THE HEADER AND RESTORES THE LINE
COUNT.  **** 00005530         ST    R14,HDRSAVE
             00005540         MVC   PRTAREA(133),PRTAREA-1
             00005550         MVI   PRTAREA,X'89'
             00005560           PUT   PRINTER,PRTAREA+1
               00005570         MVC   PRTAREA+1(132),HEADER1
               00005580         MVI   PRTAREA,X'09'
               00005590         PUT     PRINTER,PRTAREA+1
                 00005600         MVC   PRTAREA+1(132),HEADER2
                 00005610         MVI   PRTAREA,X'19'
                 00005620         PUT   PRINTER,PRT  AREA+1
                   00005630         MVC   PRTAREA(133),PRTAREA-1
                   00005640         MVI   LINECT,X'3E'
                   00005650         PUT   PRINTER,PRTAREA+1           SPACE ATER
 HDRS                00005660         L     R14,HDRSAVE
                     00005670         BR    R14
                     00005680HDRSAVE  DS    F'0'
                       00005690         DS    0F
                       00005700PKONE    DC    PL2'1'
                       00005710PAGECT   DC    PL2'+0'
                         00005720HEADER1  DS    0CL132
                         00005730DATE     DC    CL20'DATE                '
                         00005740         DC    CL31'360 GENERATOR PARAMETER LIS
TING'                    000057  50         DC    CL53' '
                           00005760         DC    CL10'ADDRESS   '
                           00005770         DC    CL18' '
                           00005780HEADER2  DS      0CL132
                             00005790         DC    CL17'ERROR FLAGS     /'
                             00005800         DC    CL29'LOC    OP    SIZE   ADD
RESS  '                      00005810         DC    CL32'    +   CONSTANTS OR RE
MARKS      '                   00005820         DC    CL33'
  BASE/DISP   '                  00005830         DC    CL21'ACTUAL
  '                              00005840LINECT   DS    CL1
                                 00005850         DS    0F
                                   00005860         EJECT
                                   00005870HEXRTN   EQU   *
                                   00005880**** THIS ROUTINE CONVERTS THE SIX BY
TE FIELD   AT HEXHLD. ONE BYTE ***** 00005890***** AT HEXHLD IS CONVERTED TO ITS
 TWO BYTE HEX EQUIVILANT FOR   ***** 00005900*****  PRINTING. ('A' AT HEXHLD =
'C1' AT CONVHEX. CNVCNT IS     ***** 00005910***** USED TO BUMP THE ADDRESS COUN
TERS (R10 AND R11) AFTER   INS   ***** 00005920*****  IS MOVED TO USER AREA.
                                 ***** 00005930         UNPK  CONVHEX(13),HEXHLD
(7)    UNPACK HEXHLD                   00005940         CLC   CONVHEX+8(4),FFCON
      Q. DATA = 6 POS9                   00005950         BNE   HEX01
         A.YES                           00005960         CLC   CONVHEX+4(4),FFC
ON      Q. DATA = 4 POS                  00005970         BNE   HEX02
         A.YES                           00005980           MVI   CNVCNT,X'03'
                                           00005990         B     HEX03
                                           00006000HEX01    MVI   CNVCNT,X'0B'
                                           00006010         B     HEX  03
                                             00006020HEX02    MVI   CNVCNT,X'07'
                                             00006030HEX03    TR    CONVHEX(12),
HEXTAB       CONVERT TO HEX FOR PRINT.       00006040         MVC   HEXHLD(6),FF
CON                 CLEAR HEXHOLD              00006050         BR    R14
                                               00006060         DS    0F
                                               00006070HEXHLD   DC    XL7'FFFFFF
FFFFFF04'                                        00006080         DC    CL1' '
                                                 00006090CONVHEX  DC    XL12'00'
                                                 00006100CNVCNT   DC    XL1'00'
                                                   00006110PACK1    DC    PL2'1'
                                                   00006120PAGECNT  DC    PL2'0'
                                                   00006130LINECNT  DC    H'56'
                                                     00006140         EJECT
                                                     00006150BRRTN    EQU   *
                                                     00006160**** THIS ROUTINE H
ANDLES GENERATION OF TAG ADDRESSES FOR BRANCH ****** 00006170***  ** INSTRUCTION
S. THIS ROUTINE PLACES A '2' IN REG5 FOR TGRTN. ****** 00006180         LA    R4
,2(0)                                                  00006190         BAL   R1
4,TGRTN                                                00006200         MVC   I+
 NSHOLD+2(4),RXINST                                      00006210         MVI
  INSHOLD+1,X'03'                                          00006220         B
  PARPRT                                                   00006230         EJEC
T                                                          00006240TPMRTN   EQU
  *                                                          00006250**** THIS R
TN HANDLES GENERATION OF A&B ADRS FOR TPM INST. THIS  ****** 00006260***** RTN G
ENERATES TWO INST.(BH&BL),PLACES A'2'IN R4 IF'A'ADR OF****** 00006270***** TPM A
ND A'6'IN R4 IF'B'ADR OF TP  M.                         ****** 00006280
LA    R4,2(0)                                                  00006290
BAL   R14,TGRTN                                                00006300
MVI   INSHOLD+1,X'03'                                            00006310
  MVC   INSHOLD+2(4),RXINST                                      00006320
  LA    R4,6(0)                                                  00006330
  MVC   0(4,R11),INSHOLD+2      * MOVE 1 BR IN LINE                00006340
    MVC   OP(2),=XL2'4740'                                         00006350
    MVC   CARD+19(4),CARD+24                                       00006360
    BAL   R14,TGRTN                                                00006  370
      MVI   INSHOLD+9,X'03'                                          00006380
      MVC   INSHOLD+10(4),RXINST                                     00006390
      MVC   INSHOLD+2(4),0(R11) * MOVE IT BACK / TGRTN MAY CHG IT    00006400
      B       PARPRT                                                   00006410
        EJECT                                                          00006420S
IZERTN  EQU   *                                                        00006430*
*** THIS ROUTINE VALID  ATES SIZE ENTRY ACCORDING TO CONTROL INFO.****** 0000644
0***** THE SIZE IS PASSED TO CONVERSION RTN RIGHT JUSTIFIED IN    ****** 0000645
0****** SIZEWK.                                                   ****** 0000646
0         MVC   SIZEWK,SZZERO                                              00006
470         CLC   CARD+13(1),=C' '        Q. SIZE 1 POS.                   00006
480         BE    SZ01                     A.YES                           00006
490         CLC   CARD+14(1),=C' '        Q. SIZE 2   POS                    000
06500         BE    SZ02                     A.YES                           000
06510         CLC   CARD+15(1),=C' '        Q. SIZE TOO BIG                  000
06520         BNE   SZERR                    A.YES                             0
0006530         MVC   SIZEWK+1(3),CARD+12      MOVE 3 POS SIZE TO SIZEWK.      0
0006540         B     SZ03                                                     0
0006550SZ01     MVC   SIZEWK+3(1),CARD+12      MOVE 1 POS SIZE TO SIZEWK.      0
00  06560         B     SZ03
 00006570SZ02     MVC   SIZEWK+2(2),CARD+12      MOVE 2  POS SIZE TO SIZEWK.
 00006580SZ03     CLC   SZEDIT(3),SIZEWK+1      Q. SIZE GREATER THAN MAX.
 00006590        +  BL    SZERR                    A.YES
   00006600           BAL   R14,CNVRTN               PERFORM CONVERSION RTN.
     00006610         C     R3,FFCON                Q. CONVERSION GOOD.
     00006620         BE    SZERR                    A.NO
     00006630         C     R3  ,ZERO                 Q. SIZE = ZERO.
       00006640         BE    SZERR                    A.YES
       00006650         BCTR  R3,0                     DECREMENT SIZE BY 1.
       00006660         ST    R3,SIZEHLD                 HOLD IN SIZE HOLD.
         00006670         MVC   SZEXIT+2(2),ADR1         MOVE NEXT RTN ADR TO BR
.        00006680SZEXIT   B     SZEXIT                   BRANCH TO NEXT RTN.
         00006690SZERR    MVI   SIZEERR,C'E'             SET   SIZE ERROR FLAG.
           00006700         MVI   NOGOSW,C'1'
           00006710         B     PARPRT                   GO PRT PARMETER.
           00006720         DS    0D
             00006730SIZWK    DC    CL4'0000'
             00006740SIZEWK   DC    CL4'0000'
             00006750FFCON    DC    XL8'FFFFFFFFFFFFFFFF'
               00006760SIZEHLD  DC    XL4'00'
               00006770SZZERO   DC    CL4'0000'
               00006780         EJECT
               00006790SI  ZERTN2 EQU   *
                 00006800* THIS RTN HANDLES INST WITH  TWO SIZE ENTRIES  EG 4,6
                 00006810         DS    0F
                 00006820         MVC     HOLDSZ,CARD+12      SAVE SIZE FIELD
                   00006830         MVC   SZ2RTNEX+2(2),ADR1  SAVE ADR OF WHERE
SIZE RTN GOES NEXT 00006840         MVC   ADR1,SZRETRN1       MAKE SIZE RTN COME
 BACK AFTER 1ST    00006850         MVI   CARD+12,X'40'         * CLEAR
                     00006860         MVC   CARD+13(5),CARD+12  *  SIZE FIELD
                     00006870         CLI   HOLDSZ+1,C','       Q. 1 POS SIZE
                     00006880         BNE   SZ2RTN9        NO
                       00006890         MVC   CARD+12(1),HOLDSZ       YES- MOVE
1 POS SIZE BK TO CARD  00006900         MVC   HOLDSZ2(3),HOLDSZ+2      SAVE SECO
ND SIZE                00006910         B     SIZERTN                  PERFORM S
IZE R  TN                00006920SZ2RTN3  MVC   HLDSZRS,SIZEHLD          SAVE SI
ZE FROM SIZE RTN         00006930         MVC   ADR1,SZRETRN2            CHG RET
URN IN SIZE RTN          00006940         MVC   CARD+12(3),HOLDSZ2       MOVE SE
COND SIZE TO SIZE FI  ELD  00006950         B     SIZERTN        GO CONVERT SECO
ND SIZE                    00006960SZ2RTN6  SLA   R3,4(0)                  MOVE
RESULTS TO TOP OF BYTE     00006970         ST    R3,SIZEHLD               STORE
 SHIFTED RESULTS           00006980       *    _          OC    SIZEHLD+3(1),HLD
SZRS+3   PUT SIZES TOGETHER              00006990SZ2RTNEX B     *+0
                                         00007000SZ2RTN9  CLI   HOLDSZ+2,C','
  Q. 2 POS SIZE                          00007010           BNE   SZERR
        NO-SIZE ERROR                      00007020         MVC   CARD+12(2),HOL
DSZ     MOVE 2 POS SIZE TO SIZE FIELD      00007030         MVC   HOLDSZ2(3),HOL
DSZ+3   SAVE 2ND SIZE                      00007040         B       SIZERTN
          PERFORM SIZE RTN/RETURN TO SZ2RTN3 00007050SZRETRN1 DC    S(SZ2RTN3)
                                             00007060SZRETRN2 DC    S(SZ2RTN6)
                                             00007070HOLDSZ   DS    CL6
                                               00007080HLDSZRS  DS    1F
                                               00007090HOLDSZ2  DC    CL6'
'                                              00007100         DS    0F
                                                 00007110         EJECT
                                                 00007120ADRRTN   MVC   ADRWK,CA
RD+24            MOVE B-ADR TO WORK AREA         00007130         BAL   R14,ADR0
1                PERFORM ADR C  ONVERSION          00007140         STH   R4,B1D
1                                                  00007150         CLI   BXIND,
X'00'                                           ** 00007160         BE    *+8
                                                  ** 00007170         BAL   R14,
BXRTN                                             ** 00007180AADRRTN  MVC   ADRW
K,CARD+19            MOVE A-ADR TO WORK AREA         00007190         BAL   R14,
ADR01                PERFORM ADR CONVERSION          0000720  0         STH   R4
,B2D2                                                  00007210         CLI   AX
IND,X'00'                                           ** 00007220         BE    *+
8                                                   ** 00007230         BAL
R14,AXRTN                                             ** 00007240         MVC
ADRRTNX+2(2),ADR2        SET UP TO BR TO INST GEN RTN    00007250         L
R2,OUR8192 LOAD BASE FOR I/O IN CASE THEY USE ADRRTN     00007260ADRRTNX  B
ADRRTNX                    BRANCH TO APPRO RTN             00007270ADR01    ST
  R14,ADRSV                SAVE RETURN ADR                 00007280         CLC
  ADRWK(2),=C'CD'       Q. ADDRESS CD                      00007290         BNE
  ADR05                       NO                             00007300         LH
    R4,ADRCD                  YES-LOAD REG 4 WITH CD ADDRESS 00007310ADR03    MV
C   SIZEWK+2(2),ADRWK+2       MOVE RELATIVE ADR TO SIZE WK   00007320         BA
L   R14,CNVRTN                                                 00007330
C     R3,FFCON              Q. WAS ADR VALID                   00007340
BE    ADR27                    NO                              00007350
CLC   ADRWK+2(2),=C'80'     Q. YES-IS RELATIVE > 80    +         00007360
  BH    ADR27                    YES- INVALID                      00007370ADR04
    N     R4,=X'0000FFFF'                                          00007380
    AR    R4,R3                    NO - ADD RELATIVE ADR TO LHE    00007390
    B     ADR0X                    GO EXIT RTN                     0  0007400ADR
05    CLI   ADRWK,C'P'            Q. ADR  P OR PC                    00007410
      BNE   ADR09                    NO- GO CK FOR OTHER ADRS        00007420
      CLI   ADRWK+1,C'C'          Q. YES - IS IT PC                  00007430
        BNE   ADR07                    NO- MUST BE PRINT               00007440
        LH    R4,ADRPC                 YES- LOAD REG 4 WITH PUNCH ADR  00007450
        B     ADR03                    GO VALIDATE                     00007460A
DR07    LH    R4,A  DRPT                 LOAD REG 4 WITH PRINT ADR       0000747
0         MVC   SIZEWK+1(3),ADRWK+1      MOVE RELATIVE ADR TO SIZE WORK  0000748
0         BAL   R14,CNVRTN                VALIDATE AND CONVERT TO BINARY 0000749
0         C     R3,FFCON           Q. WAS ADR VALID                        00007
500         BE    ADR27               NO-                                  00007
510         CLC   ADRWK+1(3),=C'132' Q. IS RELATIVE > 132                  00007
520         BH    ADR27                 YES- INV  ALID                       000
07530         B     ADR04                 NO-VALID-PREPARE TO EXIT           000
07540ADR09    CLC   ADRWK,=C'SELF'     Q. IS IT SELF ADR                     000
07550         BNE   ADR11                 NO                                   0
0007560         BAL   R14,SELF01            YES-PEFORM SELF RTN                0
0007570         B     ADR0X                 GO EXIT RTN                        0
0007580ADR11    CLC   ADRWK,=C'DATE'     Q. IS IT DATE ADR
 00007590         BNE   ADR13                 NO
 00007600         CLI   CARD+12,C'9'        Q. WANT DD MMM YY
 00007610         BNE   ADR11A                 NO
 00007620           LH    R4,DATEAL9             YES- LOAD IT'S ADR
   00007630         B     ADR0X
   00007640ADR11A   CLI   CARD+12,C'5'        Q. WANT YYDDD
   00007650         BNE   AD  R11B                 NO - ASSUME HE WANTS YYMMDD
     00007660         LH    R4,DATEJU5             YES- LOAD IT'S ADR
     00007670         B     ADR0X
     00007680ADR11B   LH    R4,DATENU6               LOAD ADR OF  YYMMDD
       00007690         B     ADR0X                 GO EXIT RTN
       00007700ADR13    CLI   ADRWK,C'2'      Q. IS IT THE WORK AREA ADR (2000-5
999)   00007710         BL    ADR13A             NO- CK CO  NS
         00007720         LH    R4,ADRWORK            YES-LOAD ADR OF WORK
         00007730         MVC   SIZEWK,ADRWK       MOVE REL ADR TO SIZE WORK
         00007740         BAL   R14,CNVRTN         VALIDATE & CONVERT TO + BINAR
Y          00007750         C     R3,FFCON        Q. WAS IT VALID
             00007760         BE    ADR27              NO
             00007770         CLC   ADRWK,=C'5999'     Q. UNDER 5999
             00007780         BH    ADR27              NO-INVALID
               00007790         L     R2,BIN2000        * MAKE RELATIVE TO *
               00007800         SR    R3,R2                 * ZERO *
               00007810         B     ADR04              YES-VALID PREPARE TO EX
IT             000078  20ADR13A   CLI   ADRWK,C'0'      Q. IS IT THE CONS AREA A
DR (0000-1999)   00007830         BL    ADR15                 NO-CK RECORD AREA
                 00007840         LH    R4,ADRCON             YES- LOAD ADR OF C
ONS              00007850         MV  C   SIZEWK,ADRWK          MOVE RELATIVE AD
R TO SIZE WORK     00007860         BAL   R14,CNVRTN             VALIDATE AND CO
NVERT TO BINARY    00007870         C     R3,FFCON     Q. WAS ADR VALID
                   00007880         BE    ADR27               NO
                     00007890         CLC   ADRWK,=C'1999'     Q. ADR UNDER 2000
                     00007900         BH    ADR27                 NO-INVALID
                     00007910         B     ADR04                   YES-VALID-PR
EPARE TO EXIT          00007920ADR15    CLI   ADRWK,C'A'            Q. INP1 REC
AREA (A)               00007930         BL    ADR27                    NO < A =
INVALID                00007940         BE    ADR17                    YES-PUT I
N   ADDR OF A            00007950ADR15A   CLI   ADRWK,C'E'            Q. DSK2 RE
C AREA (E)               00007960         BH    ADR21                    NO-GO C
K FOR J,K + L            00007970         BE    ADR18                    YES-PUT
 IN ADR OF E               00007980         CLI   ADRWK,C'C'            Q. INP3
REC AREA (C)               00007990         BH    ADR19                    > MEA
NS IT MUST BE (E)          00008000         BL    ADR20                    < MEA
NS IT MUST BE (B)          0000  8010         LH    R4,ADRC                  LOA
D REG 4 WITH C ADR           00008020         B     ADR24                    GO
VALIDATE LENGTH              00008030ADR17    LH    R4,ADRA                  LOA
D REG 4 WITH A ADR           00008040           B     ADR24                    G
O VALIDATE LENGTH              00008050ADR18    LH    R4,ADRD
               D               00008060         B     ADR24                    G
O VALIDATE LENGTH              00008070ADR19    LH    R4,ADRE
                 E               00008080         B     ADR24
 GO VALIDATE LENGTH              00008090ADR20    LH    R4,ADRB
                 B               00008100         B     ADR24
   GO VALIDATE LENGTH              00008110ADR21    CLI   ADRWK,C'J'
Q. OUT1 REC AREA (J)               00008120         BL    ADR28
                                ** 00008130         BE    ADR23
   YES-PUT + IN ADR OF (J)           00008140         CLI   ADRWK,C'L'
  Q. OUT3   REC AREA (L)               00008150         BH    ADR31         > CK
 TO SEE IF RTCD OR RSXX(RESULTOF X//)  00008160         BE    ADR23A
       YES-PUT IN ADR OF (L)           00008170         LH    R4,ADRK
       LOAD REG 4 WITH K   ADR           00008180         B     ADR24
         GO VALIDATE LENGTH              00008190ADR23    LH    R4,ADRJ
         LOAD REG 4 WITH J ADR           00008200         B     ADR24
         GO VALIDATE LENGTH                00008210ADR23A   LH    R4,ADRL
           LOA REG  4 WITH L ADR           00008220ADR24    CLC   ADRWK+1(3),=C'
899'    Q. IS LENGTH VALID (MAX REC 900)   00008230         BH    ADR27
           NO-INVALID                      00008240           MVC   SIZEWK+1(3),
ADRWK+1      MOVE RELATIVE ADR TO WORK       00008250         BAL   R14,CNVRTN
             VALIDATE AND CONVERT TO BINARY  00008260         C     R3,FFCON
          Q. WAS ADR VALID                   00008270         BE    A  DR27
               NO                              00008280         B     ADR04
               YES-GO ADD REL ADR TO LHE ADR   00008290ADR27    MVI   ADRERR,C'E
'              FLAG ADR ERROR                  00008300         MVI   NOGOSW,C'1
'                FLAG NO GO SWITCH (ABORT EXEC)  00008310ADR0X    L     R14,ADRS
V                LOAD RETURN ADR                 00008320         BR    R14
                 BRANCH BACK                     00008330ADR28    CLC   ADRWK(3)
,=CL3'INX'       AD  DR = INDEX                 ** 00008340         BNE   ADR27
                    ERROR                       ** 00008350         CLC   CARD+1
2(2),=C'4 '     Q. SIZE = 4                    *** 00008360         BNE   SZERR
                    ERROR                         ** 00008370         CLI   ADRW
K+3,C'1'             INDEX = 1                    ** 00008380         BNE   ADR3
0                     NO                          ** 00008390         LH    R4,I
NDEX1                GET ADDR OF INDEX1             ** 00008400ADR29    N     R4
,=X'0000FFFF'          CLEAR HIGH HALFWORD IN R4.   ** 00008410         B     AD
R0X                                                 ** 00008420ADR30    CLI   AD
RWK+3,C'2'             INDEX = 2                    ** 00008430           BNE
ADR27                     NO,ERROR                    ** 00008440         LH
R4,INDEX2                GET ADR OF INDEX2.           ** 00008450         B
ADR29                                                 ** 00008460ADR31    CLC
  ADRWK,CRTCD    Q.  RETURN CODE                           00008470         BNE
  ADR32               NO-SEE IF RSXX(RESULT OF X OR /)     00008480         CLC
  CARD+12(2),SP4  Q.  SIZE = 4                             00008490         BNE
  SZERR               NO                                     00008500         LH
    R4,ACRTCD       LOAD R4 WITH B/D ADR OF RETURN CODE      00008510         B
    ADR29                                                    00008520ADR32    CL
C   ADRWK(2),CRS        Q-RSX+ X(RESULT OF MULTIPLY/DISVDE)    00008530
BNE   ADR27               A  -NO                                 00008540
  LH    R4,ARESULT          A-YES/LOAD R4 W/ LHE ADDRESS OF RS   00008550
  MVC   SIZEWK+2(2),ADRWK+2      MOVE RELATIVE ADDR OF SIZE WK   00008560
  BAL   R14,CNVRTN               GO CONVER  T TO BINARY NR         00008570
    C     R3,FFCON            Q-WAS ADDR VALID                     00008580
    BE    ADR27               A-NO                                 00008590
    CLC   ADRWK+2(2),=C'29'   A-YES/BUT IS IT > 29                   00008600
      BH    ADR27               A/YES/INVALID ADDR                   00008610
      B     ADR04               A-NO/VALID ADDR (RS00-RS29)          00008620IND
EX1   DC    S(INX1)                                               ** 000  08630I
NDEX2   DC    S(INX2)                                               ** 00008640A
DRCD    DC    S(CARD)                                                  00008650A
DRPC    DC    S(PCHREC)                                                00008660A
DRPT      DC    S(PRTAREA+1)                                             0000867
0ADRDT    DC    S(DATE)                                                  0000868
0ADRCON   DC    S(CONS)                                                  0000869
0ADRWORK  DC    XL2'A0  00'                                                00008
700ADRWK    DS    CL4                                                      00008
710ADRSV    DS    F                                                        00008
720BIN2000  DC    XL4'000007D0'                                              000
08730DATENU6  DC    S(DATE6)                                                 000
08740DATEAL9  DC    S(DATE9)                                                 000
08750DATEJU5  DC    S(DATE5)                                                   0
0008760CRTCD    DC    CL4'RTCD'                                                0
0008770SP4      DC    CL2'4 '                                                  0
0008780ACRTCD   DC    S(RTCD)
 00008790CRS      DC    C'RS'
 00008800ARESULT  DC    S(RESULT)
 00008810SORTTAGS DC    CL9'0'
 0  0008820         DS    0F
   00008830         EJECT
   00008840ADDRTN   MVC   ADDGEN+18(1),OP
   00008850SUBRTN     EQU   ADDRTN
     00008860         MVI   ADDGEN+3,X'80'    * INIT
     00008870         MVI   ADDGEN+11,X'80'   *   LENGTH
     00008880         MVI   ADDG  EN+39,X'08'    *       FIELDS
       00008890         MVC   ADDGEN+6(2),B1D1
       00008900         MVC   ADDGEN+14(2),B2D2
       00008910         MVC   ADDGEN+40(2),B1D1+
         00008920         OC    ADDGEN+3(1),S  IZEHLD+3
           00008930         OC    ADDGEN+11(1),SIZEHLD+3
           00008940         MVO   SIZEHLD+1(1),SIZEHLD+3(1)
           00008950         OC    ADDGEN+39(1),SIZEHLD+1
             00008960         LR    R4,R10
             00008970         AH    R4,=H'26'
             00008980         STH   R4,ADDGEN+28
               00008990         MVC   INSHOLD(8),INSTA1
               00009000         MVC   INSHOLD+8(8),INSTA2
               00009010         MVC   INSHOLD+16(8),INSTA3
                 00009020         MVC   INSHOLD+24(6),INSTA4
                 00009030         MVC   INSHOLD+32(6),INSTA5
                 00009040         MVC   INSHOLD+40(8),INSTA6
                 00009050           B     PARPRT
                   00009060ADDGEN   DS    0CL44
                   00009070INSTA1   DC    XL2'05'
                   00009080         PACK    AUGSUM,B2D2(1)           B-ADR = B-A
DR OF ADD OR SUB     00009090INSTA2   DC    XL2'05'
                     00009100         PACK  ADDEND,B1D1(1)           B-ADR = A-A
DR OF ADD OR SUB     00009110INSTA3   DC    XL2'05'
                       00009120         AP    AUGSUM,ADDEND            AP OR SP
                       00009130INSTA4   DC    XL2'03'
                       00009140         BM    *+8                        BRANCH
ADR MUST BE FILLED IN    00009150INSTA5   DC    XL2'03'
                         00009160         OI    AUGSUM+8,X'0F'           THIS CH
GS C TO F ON POSITIVE    00009170INSTA6   DC    XL2'05'
                           00009180         UNPK  B2D2(1),AUGSUM
                           00009190         EJECT
                           00009200APRTN    EQU   *
                             00009210CPRTN    EQU   *
                             00009220MVORTN   EQU   *
                             00009230SPRTN    EQU   *
                             000092  40*  THIS WILL MAKE SIZES COMPAT WITH ADDRE
SS  EG. 'B-ADR TO A-ADR        00009250         L     R3,SIZEHLD        LOAD SIZ
E INTO R3                      00009260         NI    SIZEHLD+3,X'0F'  REMOVE HI
GH ORDER SIZE IN SHIEHLD       00009270         SR  A   R3,4(0)           SHIFT
TO REMOVE LOW ORDER SIZE IN R3   00009280         L     R4,SIZEHLD         LOAD
SIZE INTO R4                     00009290         SLA   R4,4(0)             MOVE
 SIZE TO HIGH ORDER BITS-        00009300         OR    R3,R4    +         PUT S
IZES TOGETHER                      00009310         ST    R3,SI  ZEHLD        ST
ORE REVERSED SIZE                    00009320MVNRTN   EQU   *
                                     00009330MVZRTN   EQU   *
                                     00009340NCRTN    EQU   *
                                       00009350XCRTN    EQU   *
                                       00009360OCRTN    EQU   *
                                       00009370TRRTN    EQU   *
                                         00009380COMRTN   EQU   *
                                         00009390**** THIS ROUTINE PUTS LENGTH I
NTO COMPARE INSTRUCTION.          ****** 00009400         MVC   LEN(1),SIZEHLD+3
                                           00009410         LH    R2,B1D1
    *REVERSE                               00009420         MVC   B1D1,B2D2
    * ADDRESS ON COM INST                  00009430         STH   R2,B2D2
    * (ADR-RTN PUTS A IN B2D2 & B IN B1D1    00009440         MVC   INSHOLD+2(6)
,SSINST                                      00009450         MVI   INSHOLD+1,X'
05'                                          00009460         B     PARPRT
                                             00009470           EJECT
                                               00009480CONSRTN  EQU   *
                                               00009490**** THIS RTN PLACE CONST
ANT FROM CONS PARAMETER INTO PROGRAM    ****** 00009500*****  CONSTANT AR  EA.
                                          ****** 00009510         CLI   CARD+19,
X'F0'        Q ADR IN CON AREA                   00009520         BL    MVERR
                  NO-BELOW-INVALID               00009530         CLI   CARD+19,
X'F2'     Q. ADR OUTSIDE CON AREA (1999)           00009540         BNL   MVERR
             YES-INVALID                           00009550         MVC   CONS01
+1(1),SIZEHLD+3    MOVE SIZE TO MOVE INS.          00009560         MVC   CONS01
+2(2),B2D2                                           00009570CONS01   MVC   CONS
01,CARD+33           MOVE CONSTANT TO MEMORY.        00009580         MVC   CONS
02+2(2),B2D2  PUT BASE DISP ADR IN LOAD ADR INST     00009590CONS02   LA    R5,C
ONS02         LOAD R5 WITH ACTUAL ADR   OF CON ADR     00009600         ST    R5
,HEXHLD         STOR CON ADR                           00009610         BAL   R1
4,HEXRTN        GO HAVE HEX RTN CONVERT IT TO ZONE     00009620         MVC   PR
TAREA+111(6),CONVHEX+2   PUT ACTUAL CON ADR IN PRTARE  A 00009630         B
PARPRT                                                   00009640B1D1LHE  DC
XL2'682F'      LHE CONS AREA / BASE DISPLACEMENT FORMAT  00009650         EJECT
                                                         00009660ENT  RTN   EQU
  *                                                        00009670****  THIS RT
N GENERATES ENTER CODING. (I HOPE)                  ****** 00009680         XR
  R4,R4                                                    00009690         IC
  R+ 4,=X'16'                                                00009700         BA
L     R14,TGRTN                PERFORM TAG ROUTINE             00009710
MVC   INSTE5+4(2),B1D1                                         00009720
XR    R4,R4                                 ,                  00009730
IC    R4,=X'18'                                                  00009740
  AR    R4,R10                   R4 POINTS TO NEXT.              00009750
  STH   R4,INSTE4+6                                              00009760
  XR    R5,R5                                   ,                  00009770
    IC    R5,=X'02'                             ,                  00009780
    AR    R4,R5                    R4 POINTS TO NEXT USER INSR.    00009790
    STH   R4,NEXT+2                STORE USER   RETURN ADDR IN LINE  00009800
      MVC   INSHOLD(6),INSTE1        *                               00009810
      MVC   INSHOLD+8(8),INSTE2      * MOVE GENERATE INST. TO HOLD . 00009820
      MVC   INSHOLD+16(6),INSTE3     *                                 00009830
        MVC   INSHOLD+24(8),INSTE4                                     00009840
        MVC   INSHOLD+32(6),INSTE5                                     00009850
        MVC   INSHOLD+40(4),NEXT                                       00009  86
0         B     PARPRT                                                   0000987
0***** ENTER ROUTINE TO BE TAILORED AND PLACED IN USER CODE.      ****** 0000988
0         DS    0F                                                       0000989
0INSTE1   D  C    XL2'03'                  COUNT FIELD.                    00009
900         AH    R4,CON2        BUMP REG4 TO NEXT STACK POSITION.         00009
910INSTE2   DC    XL2'05'                                                  00009
920         CLC   0(2,R4),  FCON                                             000
09930INSTE3   DC    XL2'03'                                                  000
09940         BE    USERR                                                    000
09950INSTE4   DC    XL2'05'                                                    0
0009960         MVC   0(2,R4),NEXT                                             0
0009970INSTE5   DC    XL2'03'                                                  0
0009980         B     ENTRTN
 00009990NEXT     DC    XL4'00010000'            1ST 2 BYTES=COUNT,2ND 2=RETURN
 00010000         EJECT
 00010010EXRTN    EQU   *
   00010020****** THIS RTN GENERATES EXIT CODING. (I HOPE)                  ****
** 00010030         XR    R4,R4
   00010040         IC    R4,=X'0C'
   000  10050         AR    R4,R10                   R4 POINTS TO GEN. BRANCH IN
ST.  00010060         STH   R4,INSTX1+4              MOVE BRANCH ADDR TO MOVE IN
ST.  00010070         MVC   INSHOLD(8),INSTX1        *
     00010080        +  MVC   INSHOLD+8(6),INSTX2      *MOVE GEN INST. TO HOLD A
REA.   00010090           MVC   INSHOLD+16(6),INSTX3     *
         00010100         B     PARPRT
         00010110**** EXIT ROUTINE TO BE TAILORED AND PLACED IN USER CODE.
  ****** 00010120         DS    0F
           00010130INSTX1   DC    XL2'05'                  COUNT FIELD
           00010140         MVC   *+12(2),0(R4)  MOVE ADDR FROM RETURN STACK TO
BRANCH.    00010150INSTX2   DC    XL2'03'
             00010160         SH    R4,CON2        ADJ R4 TO NEXT RETURN ADD.
             00010170INSTX3   DC    XL2'03'
             00010180         B     EXRTN                    BRA  NCH TO STACK A
DR .           00010190         EJECT
               00010200MOVERTN  EQU   *
               00010210**** THIS GENERATES MULTIPLE MOVE INSTRUCTIONS IF THE SI
 ZE OF THE****** 00010220***** IS GREATER THAN 256. IF GENERATED DISPLACEMENT EX
CEEDS BASE****** 00010230****** REG LIMITS(4096) AN ADDRESS ERROR OCCURS.
          ****** 00010240         LA    R8,INSHOLD
                   00010250         LH    R9,=H'8'
                   00010260         L     R3,SIZEHLD
                   00010270         LH    R4,=H'256'
                   00010280           MVZ   BASE1(1),B1D1
                     00010290         MVZ   BASE2(1),B2D2
                     00010300         MVC   AHLD+2(2),B1D1
                     00010310         MVC     BHLD+2(2),B2D2
                       00010320MV01     CR    R3,R4
                       00010330         BL    MV02
                       00010340         MVI   LEN,X'FF'
                         00010350         SR    R3,R4
                         00010360         MVC   0(2,R8),=XL2'05'
                         00010370         MVC   B1D1(2),AHLD+2
                           00010380         MVC   B2D2(2),BHLD+2
                           00010390         MVC   2(6,R8),SSINST
                           00010400         AR    R8,R9
                             00010410         L     R2,AHLD
                             00010420         AR    R2,R4
                             00010430         ST    R2,AHLD
                               00010440         L     R2,BHLD
                               00010450         AR    R2,R4
                               00010460         ST    R2,BHLD
                               00010470       *    _          B     MV01
                                             00010480MV02     STC   R3,LEN
                                             00010490         MVC   B1D1(2),AHLD
+2                                           00010500           MVC   B2D2(2),BH
LD+2                                           00010510         MVC   0(2,R8),=X
L2'05'                                         00010520         MVC   2(6,R8),SS
INST                                           00010530         B       PARPRT
                                                 00010540MVERR    MVI   ADRERR,C
'E'                                              00010550         MVI   NOGOSW,C
'1'                                              00010560         B     PARPRT
                                                   00010570         DS    0F
                                                   00010580AHLD     DC    F'0'
                                                   00010590BHLD     DC    F'0'
                                                     00010600BASE1    DC    XL1'
0F'                                                  00010610BASE2    DC    XL1'
0F'                                                  00010620         EJECT
                                                       00010630TAGRTN   EQU   *
                                                       00010640**** THIS RTN DEF
INES TAG ADDRESSES. IF TAG HAS BEEN REFENCED    ****** 00010650***** BEFORE IT H
AS BEEN DEFINED THE RTN INSERTS THE TAG ADDRESS *  ***** 00010660***** WHERE IT
IS NEEDED USING THE CHAIN SET IN TGRTN.           ****** 00010670         ST
R14,TAGSAVE              SAVE RETURN                     00010680         L
R5,ADRUBASE                                              0001069  0         LA
  R9,TAGTAB                                                00010700         CLC
  CARD(2),=C'TG'          Q.VALID LOC ENTRY.               00010710         BNE
  TAGERR                   A.NO                            00010720         MVC
    SIZEWK+2(2),CARD+2                                       00010730         BA
L   R14,CNVRTN               PERFORM BINARY CONVERSION .     00010740         C
    R3,FFCON                Q. CONVERSION GOOD.              00010750         BE
    TAGERR                                                     00010760
C     R3,ZERO                 Q. TAG # VALID.                  00010770
BE    TAGERR                                                   00010780
SLA   R3,2(0)                    MULTIPLY TAG# BY 4.             00010790
  AR    R3,R9                    R9 HAS LHE TAG TABLE.           00010800
  CLC   0(2,R3),=C'00'                                           00010810
  BNE   TAGERR                   A.YES,DUPLI  CATE TAG.            00010820
    CLI   NOGOSW,C'0'      Q. NO GO SWITCH OFF                     00010830
    BNE   TAGEXIT            NO'IT'S ON' -BYPASS RESOLVING TG ADRS 00010840
    MVC   0(2,R3),CARD+2           MOVE TAG # TO TAG TABLE.+         00010850
      CLC   2(2,R3),=C'00'                                             00010860
        BNE   TAG01                    A. YES                          00010870
        STH   R10,2(R3)                PUT TAG ADR IN TABLE.           00010880
        B     TAGEXIT                                                  0  001089
0TAG01    MVC   TAG02+2(2),2(R3)         MOVE CHAIN ADR TO COMPARE INS.  0001090
0         LA    R6,USERBASE+4095                                         0001091
0         LA    R6,1(0,6)                                                0001092
0           STH   R10,2(R3)                PUT TAG ADR IN TABLE.           00010
930TAG02    CLC   2(2,R3),=C'00'                                           00010
940         BE    TAG05                    A.YES                           00010
950         MVC   TAG0  3+2(2),TAG02+2       SET TAG03 TO CHAIN ENTRY        000
10960         MVC   TAG04+4(2),TAG02+2       SET TAG04 TO CHAIN ENTRY        000
10970TAG04    MVC   TAG02+2(2),TAG04         SET TAG02 TO NEXT CHAIN ENTRY.  000
10980TAG03    STH   R10,TAG03                  INSERT TAG ADR IN GENERATED INS 0
0010990         B     TAG02                                                    0
0011000TAG05    MVC   TAG06+2(2),TAG02+2       SET TAG06 TO CHAIN ENTRY.       0
0011010TAG06    STH   R10,TAG06                INSER  T TAG ADR IN LAST ENTRY
 00011020TAGEXIT  L     R14,TAGSAVE              RETURN
 00011030         L     R6,AOURCODE
 00011040         BR    R14
   00011050TGERR    EQU   *
   00011060TAGERR   L     R6,AOURCODE
   00011070         MVI   LOCERR,C'E'
     00011080         MVI   NOGOSW,C'1'
     00011090         B     PARPRT
     00011100         DS    0F
     00011110TAGS  AVE  DC    CL4' '
       00011120TAGTAB   DC   80C'00000'
       00011130         EJECT
       00011140TGRTN    EQU   *
         00011150*** THIS ROUTINE MUST BE PERFORMED (BAL). THIS ROUTINE RESOLVES
 ******  00011160*** TAG ADDRESSES. IF TAG IS UNDEFINED,REFERENCES ARE CHAINED F
OR ****  00011170*** RESOLUTION AT TIME TAG IS   DEFINED.  REG 4 CONTAIN REL ADR
 OF BRANCH 00011180*   ADDRESS EG  GO TGXX 4 WOULD = 2 (OP/CODE +  MASK = 2)
           00011190         ST    R14,TGSAVE
           00011200         L     R5,ADRUBASE
             00011210         LA    R9,TAGTAB
             00011220         CLC   CARD+19(2),=C'TG'
             00011230         BNE   TG07                                     +
               00011240         MVC   SIZEWK+2(2),CARD+21      MOVE TG# TO   SIZ
E WORK FOR CONV. 00011250         BAL   R14,CNVRTN               PERFORM BINARY
CONVERSION.      00011260         C     R3,FFCON                Q. CONVERSION GO
OD.              00011270         BE    TGERR                    A. NO.
                   00011280         C     R3,ZERO                 Q. TAG # = ZER
O                  00011290         BE    TGERR                    A. YES
                   00011300         SLA   R3,2(0)                  MULTIPLY R3 B
Y 4.               000113  10         AR    R3,R9                    R4 NOW HAS
TAG TABLE ENTRY ADR. 00011320         CLC   0(2,R3),=C'00'          Q. HAS TAG B
EEN DEFINED.         00011330         BE    TG01                     A. NO.
                     00011340         MV  C   B1D1(2),2(R3)              YES,MOV
E TAG ADR TO INS.      00011350TGEXIT   L     R14,TGSAVE                EXIT
                       00011360         L     R6,AOURCODE
                       00011370         BR    R14
                         00011380TG01     AR    R4,R10
                         00011390         L     R5,ADRUBASE
                         00011400         LA    R6,USERBASE+4095    *P  OINT REG
 6                         00011410         LA    R6,1(0,6)           * TO USER
CODE + 4096                00011420         CLC   2(2,R3),=C'00'          Q. ANY
 REFERENCE TO TAG.         00011430         BNE   TG02                     A. YE
S                            00011440         STH   R4,2(0,R3)
                             00011450TG08     L     R6,AOURCODE
                             00011460         MVC   B1D1(2),=C'00'           SET
 END OF CHAIN                  00011470         B     TGEXIT
                               00011480TG02     MVC   TG03+4(2),2(R3)          P
OINT COMPARE TO NEXT CHAIN ENT 00011490TG03     CLC   =CL2'00',TG03           Q.
END OF CHAIN.                  0001  1500         BNE   TG05
 A. NO                           00011510         MVC   TG04+2(2),TG03+4
  ADJUST STORE HALFWORD ADR.     00011520TG04     STH   R4,TG04
                                 00011530           B     TG08
                                   00011540TG05     MVC   TG06+4(2),TG03+4
   SET UP TO CHECK NEXT ENTRY      00011550TG06     MVC   TG03+4(2),TG06
       FOR END OF CHAIN.           00011560         B     TG03
                                     00011570TG07     CLC   CARD+19(3),=C'EOJ'
                                     00011580         BE    TG09
                                     00011590         CLC   CARD+19(4),CSORT  Q.
    IS IT SORT                         00011600         BNE   TGERR
       NO - ERROR                      00011610         L     R6,AOURCODE
 GET 6 POINT CORRECTLY B1D1 USES R6    00011620         MVC   B1D1(2),SORTBD   Y
ES - MOVE IN BA+ SE DISP OF SORT         00011630         B     TGEXIT
         GO E  XIT RTN                     00011640TG09     L     R6,AOURCODE
                                           00011650         MVC   B1D1(2),EOJADR
                                           00011660         B     TGEXIT
                                             00011670         DS    0F
                                             00011680ADRUBASE DC    A(USERBASE)
                                             00011690TGSAVE   DS    CL4
                                               00011700ZERO     DC    XL4'00'
                                               00011710CSORT    DC    CL4'SORT'
                                               00011720SORTBD   DC    S(SORTBR)
                                               00011730           EJECT
                                                 00011740SELF01   ST    R14,SLFS
V                SAVE RETURN ADDRESS             00011750SLFSW    BC    0,SELF05
                                                 00011760         CLC   S  IZEHL
D,=X'00000028'  Q. IS SIZE > 40 DEC                00011770         BH    SELF04
A               YES-MAYBE INVALID                  00011780         L     R8,SIZ
EHLD            PUT BINARY SIZE IN R8              00011790SELF01A  LH    R4,SLF
BD                LOAD BASE DISP ADR OF SELF         00011800         SR    R4,R
8                                                    00011810         S     R4,=
F'1'                                                 00011820         L     R5,S
LFACT             LOAD   ACTUAL ADR OF SELF            00011830         STH   R4
,SLFBD                                                 00011840         A     R4
,=F'1'                                                 00011850         CLC   SL
FBD,SLFBEG                                               00011860         BH
SELF02                                                   00011870         BE
SELF02                                                   00011880         MVI
SLFSW+1,X'F0'                                              00011890         B
  SELF05                                                   00011900SELF02   SR
  R5,R8                                                    00011910         STC
  R8,SELF03+1                                              00011920S  ELF03   MV
C   0(1,R5),CARD+33                                          00011930         S
    R5,=F'1'                 POINT TO NEXT AVAIL POS OF SELF 00011940         ST
    R5,SLFACT                SAVE ACT ADR OF SELF            00011950SELF04   L
      R14,SLFSV                LOAD RETURN ADR                 00011960
BR    R14                      GO BACK                         00011970SELF04A
CLI   PRTAREA+31,C','   Q.  IS THERE 2 SIZES                   00011980
BE    SELF04B                 YES                                00011990
  CLI   PRTAREA+32,C','       CHECK NEXT POS EG X,X OR XX,X      00012000
  BNE   SELF05                NO-FLAG AS ERROR                   00012010SELF04B
  LA    R8,15(0)              YES+ -FORCE SIZE TO 16 (F) LENGTH    00012020
    B     SELF01A                 GO FINISH UP SELF GENERATION       00012030SEL
F05   MVI   ADRERR,C'E'              FLAG AS ADR ERROR               00012040
      MVI   NOGOSW,C'1'              FLAG NO GO SWITCH               00012050
      B     SELF04                   GO EXIT R  TN                     00012060S
LFBEG   DC    S(SELF)                                                  00012070S
LFBD    DC    S(SELF+1771)                                             00012080E
OJADR   DC    S(EOJRTN)                                                  0001209
0SLFACT   DC    A(SELF+1771)                                             0001210
0AOURCODE DC    A(OURCODE)                                               0001211
0SLFSV    DS    F                                                        000  12
120         EJECT                                                          00012
130CNVRTN   EQU   *                                                        00012
140**** THIS ROUTINE PACKS AND CONVERTS TO BINARY THE FULLWORD AT   ****** 00012
150***** SI  ZEWK. THE RESULT IS PLACED IN R3.                        ****** 000
12160         ST    R2,CVREG2     STORE REG 2 (REG2 IS USED AS BASE          000
12170*                            FOR I/O RTNS AND THE TRT USES REG 2)       000
12180         TRT   SIZWK(  8),DECTAB         Q. ALL NUMERIC.                  0
0012190         BC    6,CV02                   A. NO BRANCH.                   0
0012200         PACK  SIZWK(8),SIZWK(8)                                        0
0012210         CVB   R3,SIZWK                   CONVERT TO BINARY IN REG 3.
 00012220CV01     MVC   SIZWK(8),CONF0
 00012230         L     R2,CVREG2     RELOAD REG 2 / IN CASE WE CAME FROM I/O
 00012240         BR    R14
   00012250CV02     L     R3,FFCON
   00012260         B     CV01
   00012270         DS    0F
     00012280CVREG2   DS    1F             HOLD AREA FOR REG 2
     00012290CONF0    DC    CL8'00000000'
     00012300DECTAB   DC    CL16' '
     0  0012310HEXTAB   DC    CL224' '
       00012320         DC    XL10'00'
       00012330         DC    CL6' '
       00012340           DC    CL16'0123456789ABCDEF'
         00012350         EJECT
         00012360CVBINRTN EQU   *
         00012370*  THIS RTN GENERAT  ES THE CODE TO CONVERT ZONED TO BINARY
           00012380         L     R3,SIZEHLD        LOAD SIZE INTO R3
           00012390         NI    SIZEHLD+3,X'0F'  REMOVE HIGH ORDER SIZE IN SIZ
EHOLD      00012400         CLI   SIZEHLD+3,X'0A' Q+ .  SIZE FOR A-ADR 10 OR LES
S            00012410         BH    SZERR                NO - SIZE ERROR
               00012420         SRA   R3,4(0)           SHIFT TO REMOVE LOW ORDE
R SIZE IN R3   00012430         C     R3,CVB4         Q. SIZE FOR B-ADR 4 OR LES
S              00012440         BH    SZERR              NO - SI  ZE ERROR
                 00012450         MVI   CVBIPACK+1,X'70'
                 00012460         OC    CVBIPACK+1(1),SIZEHLD+3  PUT SIZE ON PAC
K INST           00012470         MVC   CVBIPACK+4(2),B2D2      PUT ADR OF DATA
  TO BE PACKED     00012480         MVC   CVBIMVC+2(2),B1D1   PUT ADR TO RECEIVE
 DATA INLINE       00012490         STH   R3,SIZEHLD              STORE SIZE OF
RECEIVING FIELD    00012500         MVC   CVBIMVC+1(1),SIZEHLD+1    MOVE SIZE IN
-LINE                00012510         LH    R4,CVDCON         POINT 4 AT BINARY
RESULTS              00012520         LA    R2,3                 LOAD 2 WITH MAX
 SIZE OF RESULT      00012530         SR    R2,R3                   SUB SIZE FRO
M MAX SIZE           00012540           AR    R4,R2                   ADD RESULT
S TO ADJUST ADR        00012550         STH   R4,CVBIMVC+4            STORE RESU
LTS IN LINE            00012560         MVC   INSHOLD(8),CVBIN1       *  MOVE GE
N-ED                   00012570         MVC     INSHOLD+8(6),CVBIN2     *  INST
                         00012580         MVC   INSHOLD+16(6),CVBIN3    *   INLI
NE                       00012590         MVC   INSHOLD+24(8),CVBIN4    *
                         00012600         B     PARPRT
                           00012610         DS    0F
                           00012620CVB4     DC    XL4'04'
                           00012630CVB10    DC    XL4'0A'
                             00012640*  THIS IS THE GENERATED CODE TO CONVERT ZO
NED TO BINARY (CVBIN)        00012650*
                             00012660CVBIN1   DC    XL2'05'
                               00012670CVBIPACK PACK  CVDWORD(8),*+0(1)   PACK Z
ONED FIELD (A-ADR)             00012680CVBIN2   DC    XL2'03'
                               00012690         CVB   R2,CVDWORD          CONVER
T PACK TO BINARY                 00012700CVBIN3   DC    XL2'03'
                                 00012710         ST    R2,CVDWORD+4        STOR
E BINARY NUMBER                  00012720CVBIN4   DC    XL2'05'
                                 000127  30CVBIMVC  MVC   *+0(1),CVDWORD+4    MO
VE BINARY # TO B-ADR               00012740         EJECT
                                   00012750CVBZNRTN EQU   *
                                   00012760*  THIS RTN   GENERATES THE CODE TO C
ONVERT BINARY TO ZONED               00012770*
                                     00012780         L     R3,SIZEHLD      LOAD
 SIZE INTO R3                        00012790         NI    SIZEHLD+3+ ,X'0F'  R
EMOVE HIGH ORDER SIZE IN SIZEHLD       00012800         SRA   R3,4(  0)
  SHIFT TO REMOVE LOW ORDER SIZE IN R3   00012810         CLI   SIZEHLD+3,X'04'
 Q.  SIZE OF BINARY FIELD= OR < 4        00012820         BH    SZERR
   NO SIZE ERROR                         00012830         MVC   CVBZMVC+1(1),SIZ
EH  LD+3  PUT SIZE INTO MOVE               00012840         LH    R2,CVDCON
    * ADJUST ADR (RECEIVING)               00012850         LA    R4,3
 *  OF MOVE                                00012860         ST    R11,SYSAVE+64
 *   INST FIELD                              00012870         L     R11,SIZEHLD
   *     TO BE                               00012880         SR    R4,R11
   *       CONVERTED                         00012890         L     R11,SYSAVE+6
4 *                                            00012900         AR    R2,R4
     *                                         00012910         STH   R2,CVBZMVC
+2         *                                   00012920         MVC   CVBZMVC+4(
2),B2D2    PUT ADR TO MOVE FROM INLINE           00012930         C     R3,CVB10
          Q. SIZE OF ZONED FIELD= OR < 10        00012940         BH    SZERR
            NO SIZE ERROR                        00012950         MVC   CVBZUNPK
+2(2),B1D1  PUT ADR OF WHERE TO UNPK AT INLINE   00012960           LA    R2,3
     LOAD R2 WITH MAX SIZE-1 FOR RESULTS           00012970         SLA   R3,4(0
)    SHIFT SIZE TO HI ORDER BITS                   00012980         STH   R3,SIZ
EHLD               * PUT SIZE OF UNPACKED          00012990         MVI   CVB  Z
UNPK+1,X'07'  PUT SIZE OF CVDWORD INTO UNPK INST     00013000         OC    CVBZ
UNPK+1(1),SIZEHLD+1  PUT 2 SIZES TOGETHER            00013010         SRA   R3,4
(0)   SHIFT SIZE BACK TO LOWER BYTE                  00013020         LH    R2,B
1D1                     * COMPUTE RHE                  00013030         AR    R2
,R3                   *  TO CHG UNPKED DATA (LAST      00013040         STH   R2
,CVBZOI+2           * POS) TO DISPLAY                  00013050         MVC   IN
SHOLD(8),CVBZN1   * MOVE GE  NERATED INST INLINE         00013060         MVC
INSHOLD+8(8),CVBZN2  *                                   00013070         MVC
INSHOLD+16(6),CVBZN3  *                                  00013080         MVC
INSHOLD+24(6),CVBZN4  *                                    00013090         MVC
  INSHOLD+32(8),CVBZN5   *                                 00013100         MVC
  INSHOLD+40(6),CVBZN6  *                                  00013110         B
  PARPRT                                                     00013120*
      THIS IS THE GENERATED CODE    TO CONVERT BINARY        00013130*
        TO ZONED (CVBZN)                                     00013140CVBZN1   DC
    XL2'05'                                                  00013150
MVC   CVDWORD(8),CVDWORD-1  CLEAR WORK AREA                    00013160CVBZN2
DC    XL2'05'                                                  00013170CVBZMVC
MVC   CVDWORD(1),*+0       *A-ADR MUST BE ADJUSTED BY A-ADR    00013180CVBZN3
DC    X+ L2'03'              *SIZE(E.G. SIZE= 2/A-ADR IS +6)     00013190
 L        R2,CVDWORD+4          LOAD BINARY # INTO REG2            00013200CVBZN
4   DC    XL2'03'                                                  00013210
    CVD   R2,CVDWORD        CONVERT BINARY # TO DECIMAL            00013220CVBZN
5   DC    XL2'05'                                                    00013230CVB
ZUNPK UNPK  *+0(1),CVDWORD        UNPACK DECIMAL INTO B-ADR          00013240CVB
ZN6   DC    XL2'03'                                                  00013250CVB
ZOI   OI    *+0,X'F0'             C  HG SIGN TO F (RHE B-ADR)          00013260C
VDCON   DC    S(CVDWORD+4)                                             00013270
        EJECT                                                          00013280P
ACKRTN  EQU   *                                                          0001329
0         MVC   LEN(1),SIZEHLD+3         MOVE SIZE TO INST               0001330
0         MVC   INSHOLD+2(6),SSINST      MOVE INST TO HOLD AREA          0001331
0         MVI   INSHOLD+1,X'05'     MOVE SIZE OF INSTRUCTION -1            00013
320         B     PARPRT                   GO PRT & PUT INST INLINE        00013
330         EJECT                                                          00013
340UNPKRTN  EQU   *                                                        00013
  350         MVC   LEN(1),SIZEHLD+3         MOVE SIZE TO UNPK INST          000
13360         MVC   INSHOLD+2(6),SSINST      MOVE INST TO HOLD AREA          000
13370         MVI   INSHOLD+1,X'05'          MOVE SIZE OF INST -1            000
13380         L       R3,SIZEHLD               LOAD SIZE                       0
0013390         SRA   R3,4(0)                  SHIFT TO REMOVE SENDING SIZE    0
0013400         MVC    SIZEWK+2(2),B1D1                                        0
0013410         LH    R2,SIZEW  K+2
 00013420         AR    R2,R3
 00013430         STH   R2,UNPKOR+2     STORE RHE ADR IN OR INSTRUCTION
 00013440         MVC   INSHOLD+8(6),UNPKCODE      MOVE 'OI' INST TO HOLD
   00013450         MVC   SIZEWK,SZZERO  CLEAR SIZE WORK AREA
   00013460         B     PARPRT                   'THIS ELIM C ON LAST POS
   00013470UNPKCODE DC    XL2'03'
     00013480UNPKOR   OI    *+0,X'F0'
     00013490         EJECT                    CONVERT SYSTEMS DATE TO YYMMDD, E
TC   00013500DATERTN  EQU   *                  CONVERT SYSTEMS DATE TO YYMM  DD
       00013510         CNOP  0,4
       00013520         TIME  DEC                GET THE TIME
       00013530         ST    R1,DATESY          SAVE IN FORMAT '00YYJJJF'
       000  13540         UNPK  DATEYJ,DATESY+1(3)  GET YYJJJ IN UNPACKED FORMAT
         00013550         UNPK  DATEYMD(3),DATESY+1(2)  GOT YEAR IN 'FYFYXX' FOR
MAT      00013560         PACK  DATEWK(2),DATEYMD(2)    PACK YEAR INTO '0YYC' FO
RMAYY    00013570DATETG1 +  SP    DATEWK(2),DATE4         SUBTRACT 4 FROM YEAR T
RYING TO   00013580           BH    DATETG1                 FIGURE OUT IF IT WAS
 LEAP YEAR   00013590         BL    DATETG2                 NO -JULIAN DAY TABLE
 WAS OKAY    00013600        MVC   DATEJDAY(84),DATEJDAY+84 YES-SUBSTITUTE LEAP
YEAR TABLE   00013610DATETG2  LA    R2  ,DATEJDAY             POINT R2 TO JULIAN
 DAY TABLE     00013620DATETG3  CLC   DATESY+2(2),2(R2)   COMPARE SYSTEMS 'JJJF'
 TO TABLE      00013630         BNH   DATETG4  SYSTEMS JJJ = OR < TABLE ENTRY-SE
ARCH COMPLETE  00013640         LA    R2,7(R2)              POINT TO NEXT TABLE
ENTRY            00013650         SP    DATETLY,DATE1    Q-HAVE WE SEARCHED ALL
ENTRIES          00013660         BNZ   DATETG3          NO-GO BACK AND COMPARE
TO NEXT ENTRY    00013670         MVC   DATEYMD,DATEUNK YES-SYSTEMS   DATE IS BA
D                  00013680         B     DATEXIT             GO BACK TO USER
                   00013690DATETG4  MVC   DATEYMD+2(2),0(R2)  GET MONTH IN 'MM'
FORMAT FROM TABLE  00013700         S     R2,DATEBUMP         BUMP BACK ONE ENTR
Y                    00013710         SP    DATESY+2(2),2(2,R2) SUBTRACT LAST JJ
J OF LAST MONTH FROM 00013720         UNPK  DATEYMD+4(2),DATESY+2(2)  SYSTEM JJJ
 & UNPK IT TO 'FJFJ' 00013730         MVZ   DATEYMD+5(1),DATEYMD+4
                       00013740         MVC   DATEDMY(2),DATEYMD+4  BUILD SYSTEM
S DATE IN DD           00013750         MVC   DATEDMY+3(3),11(R2)
          MMM(ALPHA)   00013760         MVC   DATEDMY+7(2),DATEYMD
          YY  FORMAT   00013770DA  TEXIT  BR    R14                 GO BACK TO U
SER                      00013780         DC    X'000F000000'
                         00013790DATEJDAY DC    X'F0F1031FD1C1D5F0F2059FC6C5C2F0
F3090FD4C1D9'            00013800         DC      X'F0F4120FC1D7D9F0F5151FD4C1E8
F0F6181FD1E4D5'            00013810         DC    X'F0F7212FD1E4D3F0F8243FC1E4C7
F0F9273FE2C5D7'            00013820         DC    X'F1F0304FD6C3E3F1F1334FD5D6E5
F1F2365FC4C5C3'            00013830         DC    X'F0F1031FD1C  1D5F0F2060FC6C5
C2F0F3091FD4C1D9'            00013840         DC    X'F0F4121FC1D7D9F0F5152FD4C1
E8F0F6182FD1E4D5'            00013850         DC    X'F0F7213FD1E4D3F0F8244FC1E4
C7F0F9274FE2C5D7'            00013860         DC    X'F1F0305FD6C3E3F1F1335FD5
D6E5F1F2366FC4C5C3'            00013870DATESY   DC    F'0'
                               00013880DATEYMD  DC    C'      '
                               00013890DATEDMY  DC    C'XX XXX XX'
                                 00013900DATEYJ   DC    C'XXXXX'
                                 00013910DATEWK   DC    C'  '
                                 00013920DATE1    DC    P'1'
                                   00013930DATE4    DC    P'4'
                                   00013940DATETLY  DC    PL2'12'
                                   00013950DATEUNK  DC    C'UNKNOW'
                                   00013960       *    _ DATEBUMP DC    F'7'
                                                 00013970         CNOP  0,4
                                                 00013980         EJECT
                                                 00013990M  PYRTN   EQU   *    M
ULTIPLY ROUTINE                                    00014000*    MPY  XX,YY  A-AD
DRESS BY B-ADDRESS  PRODUCT IN RESULT - 30 BYTES   00014010         MVN   MPYGEN
1+3(1),SIZEHLD+3  -MULTIPLIER SIZE                 00014020         L       R3,S
IZEHLD                                               00014030         SRA   R3,4
(0)                                                  00014040         ST    R3,S
IZEHLD                                               00014050         MVN   MPYG
EN2+3(1)  ,SIZEHLD+3  -MULTIPLICAND SIZE               00014060         MVC   MP
YGEN1+6(2),B2D2       -MULTIPLIER ADDRESS              00014070         MVC   MP
YGEN2+6(2),B1D1       -MULTIPLICAND ADDRESS            00014080         LR    R3
,R10                                                     00014090         AH
R3,=H'30'                                                00014100         STH
R3,MPYGEN5+4                                             00014110         MVC
INSHOLD+00(8),MPYGEN1   *MOVE GENERATE  D INSTRS INLINE    00014120         MVC
  INSHOLD+08(8),MPYGEN2   *                                00014130         MVC
  INSHOLD+16(8),MPYGEN3   *                                00014140         MVC
  INSHOLD+24(6),MPYGEN4   *                                  00014150         MV
C   INSHOLD+32(6),MPYGEN5   *                                00014160         MV
C   INSHOLD+40(6),MPYGEN6   *                                00014170         MV
C   INSHOLD+48(8),MPYGEN7   *                                0001418  0
MVC   INSHOLD+56(8),MPYGEN8   *                                00014190
B     PARPRT                                                   00014200*********
 THEIR GENERATED CODE                                          00014210MPYGEN1
DC      XL2'05'                                                  00014220
  PACK  FIELD8(8),*+0(1)         PACK THEIR MULTIPLIER           00014230MPYGEN2
  DC    XL2'05'                                                  00014240
  PACK  FIELD16,*+  0(1)           PACK THEIR MULTIPLICAND         00014250MPYGE
N3  DC    XL2'05'                                                  00014260
    MP    FIELD16,FIELD8           MULTIPLY                        00014270MPYGE
N4  DC    XL2'03'                                                    00014280
      TM    FIELD16+15,X'01'         Q-NEGATIVE PRODUCT              00014290MPY
GEN5  DC    XL2'03'                                                  00014300
      BO    *+8                      A-YES/LEAVE   NEGATIVE BITS ON    00014310M
PYGEN6  DC    XL2'03'                                                  00014320
        OI    FIELD16+15,X'0F'         A-NO/MAKE PRODUCT DISPLAYABLE   00014330M
PYGEN7  DC    XL2'05'                                          +         0001434
0         UNPK  RESULT(16),FIELD16(9)    UNPACK                            00014
350MPYGEN8  DC    XL2'05'                         PRODUCT INTO             00014
360         UNPK  RESULT+15(15),FIELD16+8(8)           RESULT   - 30 BYTES 00014
370         EJECT                                                          0  00
14380DVDRTN   EQU   *    DIVIDE ROUTINE                                      000
14390*   DVD  XX,YY  A-ADDRESS INTO B-ADDRESS   QUOTENT IN RESULT - 15 BYTES 000
14400*                                          REMAINDER IN RESULT+15 - 15B 000
14410           MVN   DVDGEN1+3(1),SIZEHLD+3  -DIVIDEND SIZE                   0
0014420         L     R3,SIZEHLD                                               0
0014430         SRA   R3,4(0)                                                  0
0014440         ST    R3,S  IZEHLD
 00014450         MVN   DVDGEN2+3(1),SIZEHLD+3  -DIVISOR SIZE
 00014460         MVC   DVDGEN1+6(2),B2D2       -DIVISOR ADDRESS
 00014470         MVC   DVDGEN2+6(2),B1D1         -DIVIDEND ADDRESS
   00014480         LR    R3,R10
   00014490         AH    R3,=H'34'
   00014500         STH   R3,DVDGEN5+4
     00014510         MVC   INSHOLD+00(8),DVDGEN1   *MOVE GENERATED INST INLINE
     00014520         MVC   INSHOLD+08(8),DVDGEN2   *
     00014530         MVC   INSHOLD+16(8),DVDGEN3   *
       00014540         MVC   INSHOLD+24(6),DVDGEN4   *
       00014550         MVC   INSHOLD+32(6),DVDGEN5   *
       00014560         MVC   INSHOLD+40(6),DVDGEN6   *
         00014570         MVC   INSHOLD+48(6),DVDGEN7   *
         00014580         MVC   INSHOLD+56(8),DVDGEN8   *
         00014590         MVC   INSHOLD+64(8),DVDGEN9   *
         00014600           B     PARPRT
           00014610********* THEIR GENERATED CODE
           00014620DVDGEN1  DC    XL2'05'
           00014630         PACK  FI  ELD8(8),*+0(1)         PACK  THEIR DIVISOR
             00014640DVDGEN2  DC    XL2'05'
             00014650         PACK  FIELD16,*+0(1)   1)      PACK  THEIR DIVIDEN
D            00014660DVDGEN3  DC    XL2'05'
               00014670         DP    FIELD16,FIELD8           DIVIDE
               00014680DVDGEN4  DC    XL2'03'
               00014690         TM    FIELD16+7,X'01'          Q-N  EGATIVE QUOT
ENT              00014700DVDGEN5  DC    XL2'03'
                 00014710         BO    *+12                     A-YES/LEAVE NEG
ATIVE BITS ON    00014720DVDGEN6  DC    XL2'03'
 +                 00014730         OI    FIELD16+7,X'0F'          A-NO/MAKE PO
 SITIVE QUOTENT      00014740DVDGEN7  DC    XL2'03'                       DISPLA
YABLE                00014750         OI    FIELD16+15,X'0F'              MAKE P
OSITIVE REMAINDER    00014760DVDGEN8  DC    XL2'05'                       DISPLA
YABLE                  00014770         UNPK  RESULT(15),FIELD16(8)    UNPACK QU
OTENT INTO RESULT      00014780DVDGEN9  DC    XL2'05'
                       00014790         UNPK  RESULT+15(15),FIELD16+8(8) UNPK RE
MAINDER INTO RESULT+15 000148  00         EJECT
                         00014810PRINTER  DCB   DDNAME=SYSOUT,DSORG=PS,MACRF=PM,
RECFM=U,                C00014820               LRECL=120,BLKSIZE=120
                         00014830INCARD   DC  B   DDNAME=SYSIN,DSORG=PS,MACRF=GM
,EODAD=PAREND              00014840         EJECT
                           00014850         DS    0D
                           00014860DISKWRT  EQU   *
                             00014870DISKRD   EQU   *
                             00014880PAREND   EQU   *
                             00014890         L     R5,ADRUBASE
                               00014900SORTSW   B     SORTBP                   /
 NOP IF SORT WAS CALLED        00014910         MVC   CARD+19(4),SORTTAGS      /
GET ADDR                       00014920         LA    R4,2(0)  ONLY NEED TO MEET
 TGRTN RE  QUIREMENTS            00014930         BAL   R14,TGRTN
 / OF  INPUT                     00014940         MVC   INPROC+2(2),RXINST+2
 / AND OUT PUT                   00014950         MVC   CARD+19(4),SORTTAGS+5
 / PROCEDURE TAGS                  00014960         LA    R4,2(0)  ONLY NEED TO
MEET TGRTN REQUIREMENTS            00014970         BAL   R14,TGRTN
   / AND PUT IN                    00014980         MVC   OUTPROC+2(2),RXINST+2
   / COMM AREA FOR SORT            0001  4990SORTBP   LA    R9,TAGTAB          *
 R9=LHE TAG TABLE                    00015000PAR01    MVC   PRTAREA(133),PRTAREA
-1   CLEAR PRT AREA                  00015010PAR02    LA    R9,4(R9)
                                     00015020           CP    TGCNT(2),=PL2'100'
 *ANY MORE TAGS ?                      00015030         BE    PAR10          00'
 *NO                                   00015040         MVC   PRTAREA+1(4),TGO1
 *MOVE TAG ID TO PRT LINE.             00015050         AP    TGCNT(2  ),ONE(1)
1' *BUMP TAG COUNT BY 1.                 00015060         UNPK  TGO1+2(2),TGCNT(
2) *UPDATE TAG ID                        00015070         OI    TGO1+3,X'F0'   (
2) *FIX ZONE                             00015080         CLC   0(2,R9),=C'00'
   *  TAG DEFINED ?                        00015090         BNE   PAR04
     *YES                                  00015100         CLC   2(2,R9),=C'00'
     *TAG REFERENED?                       00015110         BE    PAR02
 (2) *NO           +                         00015120         CLI   NOGOSW,C'1'
    Q. NO GO SWIT  CH SET                      00015130         BE    PAR03
        YES-BYPASS PRINTING UNDEFINED          00015140         MVI   NOGOSW,C'1
'    (2) *YES, ERROR.                          00015150         MVC   PRTAREA+6(
9),=C'UNDEFINED'                                 00015160PAR03    MVI   PRTAREA,
X'09'      *SKIP1 TO PRT CNTL.                   00015170         PUT   PRINTER,
PRTAREA+1                                        00015180         B     PAR01
                                                   00015190PAR04    MVC   HEXHLD
(2),2(R9)    *MOVE TAG ADDR TO CONV WORKAREA.      00015200         BAL   R14,HE
XRTN         *CONVERT TO EBCDIC.                   00015210         MVC   PRTARE
A+6(4),CONVHEX    *EDCDIC TO PRT LINE              00015220           B     PAR0
3                                                    00015230TGCNT    DC    PL2'
1'                                                   00015240TGO1     DC    CL4'
TG01'                                                00015250PAR10    MVC   P  R
TAREA(133),PRTAREA-1                                   00015260         MVI   PR
TAREA,X'89'                                            00015270         PUT   PR
INTER,PRTAREA+1                                        00015280         MVC   PR
TAREA(133),P  RTAREA-1                                   00015290         LA
R4,EXITSK                                                00015300         CLI
NOGOSW,C'0'      Q. ANY PARAMETERS FLAGGED               00015310         BE
PAR20             NO-CONTIN  UE PROCESSING                 00015320TAPECLSW B
  BADPARMS   THIS NOP IF TAPE CLASS HAS BEEN CALLED        00015330         ABEN
D 8           TO FORCE ABNORNAL TERMINATION ON BAD PARMS   00015340         CNOP
 2,4  FORCE ALIGNMENT SO FOLLOWING ACON IS   FULL WORD ORIEN 00015350PAR20    MV
C   DATE6(20),DATEYMD  PUT SYSTEM DATE IN USER AREA          00015360PAREND1  CL
C   IN1MOD,ZEROS      Q. IN 1 MODULE LOADED                  00015370         BE
    PAREND2                                                    00015380
L     15,IN1MOD             YES-LOAD 15 WITH ADR OF MODULE     00015390
BALR  14,15                BRANCH TO MODULE TO EXEC OPEN       00015400
DC    A(OURCODE)    USED BY READ DIRECT (AREA ADDRESS)       * 00015410
  DC    XL2'7000'                                              * 00015420
  DS    CL6                                                      00015430PAREND2
  CLC   IN2MOD,ZEROS                                             00015440
  BE      PAREND3                                                  00015450
    L     15,IN2MOD                                                00015460
    BALR  14,15                                                    00015470
    DC    A(OURCODE)                                               * 00015480
      DC    XL2'8000'                                              * 00015490
      DS    CL6                                                      00015500PAR
END3  CLC   IN3MOD,ZEROS             +                                 00015510
        BE    PAREND4                                                    0001552
0         L     15,IN3MOD                                                0001553
0         BALR  14,15                                                    0001554
0         DC    A(OURCODE)                                               * 00015
550         DC    XL2'9000'                                              * 00015
560         DS    CL6                                                      00015
570PAREND4  CLC   OT1MOD,ZEROS                                               000
15580         BE    PAREND5                                                  000
15590         L     15,OT1MOD                                                000
15600         BALR  14,15                                                    000
  15610         DC    A(OURCODE)     USED BY READ DIRECT MOD FOR AREA ADR      0
0015620         DC    XL2'B000'     *GIVE OUT MODULE ADR OF REC AREA           0
0015630         DS    CL6           *                                          0
0015640PAREND5    CLC   OT2MOD,ZEROS
 00015650         BE    PAREND6
 00015660         L     15,OT2MOD
 00015670         BALR  14,15
   00015680         DC    A(OURCODE)     USED BY READ DIRECT MOD FOR AREA ADR
   00015690         DC    XL2'B384'     *GIVE OUT MODULE ADR OF REC AREA
   00015700         DS    CL6           *
     00015710PAREND6  CLC   OT3MOD,ZEROS
     00015720         BE    PAREND7
     00015730         L     15,OT3MOD
       00015740         BALR  14,15
       00015750         DC    A(OURCODE)     USED BY READ DIRECT MOD FOR AREA AD
R      00015760         DC    XL2'B708'     *GIVE OUT MODULE ADR OF REC ARE  A
         00015770         DS    CL6           *
         00015780PAREND7  CLC   PRTMOD,ZEROS
         00015790         BE    PAREND8
         0  0015800         L     15,PRTMOD
           00015810         BALR  14,15
           00015820         DC    S(PRTAREA)
           00015830PAREND  8  CLC   RDCDMOD,ZEROS
             00015840         BE    PAREND9
             00015850         L     15,RDCDMOD
             00015860         BALR  14,1  5
               00015870         DS    CL4             * DUMMY CODE NEEDED FOR RD
 MODULE        00015880         DC    S(CARD)      REC AREA ADR NEEDED BY RD MOD
ULE            00015890         DS    CL6             N+ EEDED BY RD CD MODULE
                 00015900PAREND9  B     DEBUGAID
                   00015910ZEROS    DC    1F'0'
                   00015920         EJECT
                   00015930         ORG   OURCODE+7700            *
                     00015940CLEAR01  MVI   OURCODE,X'40'           * CLEAR
                     00015950         CLOSE (INCARD,,PRINTER)
                     00015960         LA    R2,28(0,0)              *   7680
                       00015970         LA    R1,OURCODE+256          *     POS
OF OUR CODE            00015980         MVI   OURCODE,X'40'           * TO BE US
ED BY USER             00015990         MVC   OURCODE+1(256),OURCODE  *  FOR WOR
K AREA (2000/5999)       00016000CLEAR02  MVC   0(256,1),OURCODE        *   AND
FOR OUTPUT REC AREAS     00016010         LA    R1,256(0,1)             *
                         00016020         BCT   R2,CLEAR02              *
                         00016030           MVI   0(R11),X'00'      PUT ZEROS AF
TER LAST USER INSTRUCT     00016040         LA    R10,OURCODE         SET 10 TO
WORK AREA                  00016050         LA    R11,OURCODE+4096    SET 11 TO
LHE OF OUT1 REC AREA       00016060         LA      R9,PUNCHID+60    * THIS IS D
ONE IN CASE ONE OF THE       00016070         LA    R8,PUNCHID+30    * INPUT FIL
E ARE DA / OTHERWISE         00016080         LA    R7,PUNCHID       * REGS WILL
 BO RELOADED BY THE I/O MOD  00016090         LA    R6,USERBASE  +4095
                               00016100         LA    R6,1(0,6)
                               00016110         B     USERCODE                 G
O EXEC USER CODE               00016120SYSAVE   DS    18F
                                 00016130         EJECT
                                 00016140RDRTN    L     R2,OUR8192     LOAD BASE
 REG FOR RTN                     00016150         B     RDRTN1
                                   00016160WRTRTN   L     R2,OUR8192     LOAD BA
SE REG FOR RTN                     00016170         B     WRTRTN1
                                   00016180PRTRTN   L     R2,OUR8192     LOAD BA
SE REG FOR RTN                       00016190         B     PRTRTN1
                                     00016200CALLRTN  L     R2,OUR8192    LOAD B
ASE REG FOR RTN                      00016210         B     CALL1
                                     000162  20XCONSRTN L     R2,OUR8192      LO
AD BASE REG FOR RTN                    00016230         B     XCONS1
                                       00016240DEBUGAID L     R2,OUR8192
                                       00016250         B       DEBUGRTN    GO P
RINT DEBUGGING AIDS                      00016260OUR8192  DC    A(OURCODE+8192)
                                         00016270         EJECT
                                         00016280         LTORG          +
                                           00016290         EJECT
                                             00016300         ORG   OURCODE+8192
    PLACE AFTER LTORG                        00016310*  R2 IS LOADED BEFORE BRAN
CHING TO THESE RTNS                          00016320READCARD DC    CL8'RRDCART
'                                              00016330READINP1 DC    CL8'RRDINP
1 '                                            00016340READINP2 DC    CL8'RRDINP
2 '                                            00016350READINP3 DC    CL8'RRDINP
3 '                                              00016360OUT1MOD  DC    CL8'RROU
T1MD'                                            00016370OUT2MOD  DC    CL8'RROU
T2MD'                                            00016380OUT3MOD  DC    CL8'RROU
T3MD'                                              00016390PTMOD    DC    CL8'RR
PRTMOT'       USED TO LOAD MOD (MOD NAME)          00016400OUT1IS   DC    CL8'RR
OT1ISM'                                            00016410OUT2IS   DC    CL8'RR
OT2ISM'                                              00016420OUT3IS   DC    CL8'
RROT3ISM'                                            00016430INP1IS   DC    CL8'
RRINP1IS'                                            00016440INP2IS   DC    CL8'
RRINP2IS'                                            00016450INP3I  S   DC    CL
8'RRINP3IS'                                            00016460INP1ISR  DC    CL
8'RRIN1ISR'                                            00016470INP2ISR  DC    CL
8'RRIN2ISR'                                            00016480INP3ISR  DC    CL
8  'RRIN3ISR'                                            00016490INP1DI   DC
CL8'RRINP1DI'                                          * 00016500INP2DI   DC
CL8'RRINP2DI'                                          * 00016510INP3DI   DC
CL8'RRINP3DI'                                            * 00016520INP1DK   DC
  CL8'RRINP1DK'                                          * 00016530INP2DK   DC
  CL8'RRINP2DK'                                          * 00016540INP3DK   DC
  CL8'RRINP3DK'                                            * 00016550OUT1DA   DC
    CL8'RROUT1DA'                                          * 00016560OUT2DA   DC
    CL8'RROUT2DA'                                          * 00016570OUT3DA   DC
    CL8'RROUT3DA'                                            * 00016580MODNAME1
DS    CL8                                                      00016590MODNAME2
DS    CL8                                                      00016600MODNAME3
DS    CL8                                                        00016610
  EJECT                                                          00016620PRTRTN1
  EQU   *                                                        00016630**** TH
IS ROUTINE GENERATE LINKAGE TO PRINTER IOMODULE AND       ****** 00016640***  **
 CARRIAGE CONTROL INFO.                                     ****** 00016650
    L     R5,ADRUBASE NEED TO POINT TO COMM AREA                   00016660
    CLC   CARD+19(4),=CL4'SKIP'                                    00016670
    BE    P+ RT02                                                    00016680
      CLC     CARD+19(4),=CL4'CHAN'                                    00016690
        BNE   RDERR                                                    00016700
        CLC   CARD+23(2),=CL2'12'                                      00016710
        BH    RDERR                                                      0001672
0         MVC   SIZEWK+2(2),CARD+23                                      0001673
0         LA    R8,CHTAB                                                 0001674
0PRT01    BAL   R14,CNVRTN                                                 00016
750         C     R3,FFCON                                                 00016
760         BE    RDERR                                                    00016
770         AR    R8,R3                                                      000
16780         MVC   PRTCTL+1(1),0(R8)   MOVE CONTROL CHAR TO IN-LINE CODE    000
16790         MVC   INSHOLD(6),PRTCODE1     * MOVE                           000
16800         MVC   INSHOLD+8(6),PRTCODE2   *    IN-LINE                       0
0016810         MVC   INSHOLD+16(4),PRTCODE3  *      CODE                      0
0016820         MVC   INSHOLD+24(4),PRTCODE4  *        TO                      0
0016830         MVC   INSHOLD+32(8),PRTCODE5  *          INST HOLD AREA        0
0016  840         MVC   INSHOLD+40(8),PRTCODE6  *
 00016850PRT01A   NOP   PRT01B    USED TO BYPASS LOAD OF MOD AFTER FIRST TIME
 00016860         LOAD  EPLOC=PTMOD     LOAD PRT MODULE AND STORE
 00016870         S  T    R0,PRTMOD              ADR OF MOD
   00016880         MVI   PRT01A+1,X'F0'     TURN ON SN TO BYPASS RELOADING MOD
   00016890PRT01B   B     PARPRT
   00016900PRT02    CLI   CARD+23,  C'3'
     00016910         BH    RDERR
     00016920         LA    R8,SKTAB
     00016930         MVC   SIZEWK+3(1),CARD+23
       00016940         B     PRT01
       00016950SKTAB    DC    XL4'01091119'
       00016960CHTAB    DC    XL13'01899199A1A9B1B9C1C9D1D9E1'
         00016970         DS    0F
         00016980*INLINE CODE FOR  PRINT INST
         00016990*   I/O MOD MUST RETURN CONTROL VIA REG-14 + 2
           00017000*    (SKIP PRT AREA ADR)
           00017010PRTCODE1 DC    XL2'03'
           00017020PRTCTL   MVI   PRTAREA,C'1' * MOVE IN PRT CONTROL CHAR
           000  17030PRTCODE2 DC    XL2'03'
             00017040         L     R15,PRTMOD     *  LOAD 15 WITH ADR OF PRTMOD
             00017050PRTCODE3 DC    XL2'01'
             00017060        +  BALR  R14,R15        *  BR TO PRTMOD
               00017070PRTC  ODE4 DC    XL2'01'
                 00017080         DC    S(PRTAREA)     * ADR OF PRINT ATEA
                 00017090PRTCODE5 DC    XL2'05'
                 00017100         AP    PR  CNT,ONE      *  ADD 1  TO REC COUNT
                   00017110PRTCODE6 DC    XL2'05'
                   00017120         MVC   PRTAREA(133),PRTAREA-1  * CLEAR PRINT
AREA               00017130         EJECT
                     00017140WRTRTN1  EQU   *
                     00017150*
                     00017160*
                       00017170*
                       00017180         L     R5,ADRUBASE NEED TO POINT TO COMM
AREA                   00017190WRT01    CLC   CARD+19(4),=CL4'OUT1'   Q. OUT1
                         00017200         BNE   WRT05                       NO
                         00017210WRT02    NOP   WRT03                      YES-1
 TIME SWITCH TO BY PASS  00017220         MVC   WRT02(2),WRT04           CHG NOP
 TO B INST                 00017230         CLC   CARD+12(2),ISCON   Q. IS THIS
AN INDEX SEQ DATA SET      00017240         BNE   WRT0201A
                         * 00017250         MVC   OUT1MOD(8),OUT1IS YES-CHG TO L
OAD ISAM MODULE            00017260           B     WRT0201
                           * 00017270WRT0201A CLC   CARD+12(2),DACON   Q. IS THI
S A DIRECT WRT             * 00017280         BNE   WRT0201
                           * 00017290         MVC     OUT1MOD(8),OUT1DA
                             * 00017300WRT0201  LOAD  EPLOC=OUT1MOD   LOAD OF MO
DULE AND STORING               00017310WRT02A   ST    R0,OT1MOD    ENTRY POINT A
DR OF I/O MODULE               00017320WRT03    MVC   IOREC,ADRJ       PUT REC A
REA ADR IN                       00017330         MVC   IOCODE+4(2),WRT02A+2  PU
T ADR OF LOADED MOD INLINE       00017340         MVC   IOADD+2(2),ADROCT1    PU
T ADR OF CT IN GEN CODE          00017350WRT03A   MVC   INSHOLD(6),IOCODE   * MO
VE                                 00017360         MVC   INSHOLD+8(4),IOCODE1
  *   INLINE INST                  00017370         MVC   INSHOLD+16(6),IOCODE2
  *     TO INST HOLD               00017380         MVC   INSHOLD+24(4),IOCODE3
  *       AREA FO  R  PRINT          00017390         MVC   INSHOLD+32(8),IOCODE
4   *         AND BEING              00017400         MVC   INSHOLD+40(8),IOCODE
5   *           MOVED INLINE         00017410WRT04    B     PARPRT
                                       00017420WRT05    CLC   CARD+19(4),=CL4'OU
T2'   Q. OUT2                          00017430         BNE   WRT07
         NO- CK TO SEE IF OUT 3        00017440WRT06    NOP   WRT06B
         YES - 1 TIME SWITCH           00017450       *    _          MVI   WRT0
6+1,X'F0'                CHG SW TO BRANCH AROUND     00017460         CLC   CARD
+12(2),ISCON   Q. IS THIS AN INDEX SEQ DATA SET      00017470         BNE   WRT0
601A       NO                                        00017480           MVC   OU
T2MOD(8),OUT2IS    YES-CHG TO LOAD ISAM                00017490         B     WR
T0601       LOAD MODULE                                00017500WRT0601A CLC   CA
RD+12(2),DACON   Q. IS THIS DIRECT                     00017510         BNE
WRT0601               NO - LOAD SEQ                      00017520         MVC
OUT2MOD(8),OUT2DA  YES-SET TO LOAD WRT DIRECT MODULE     00017530WRT0601  LOAD
EPLOC=OUT2MOD       LOAD OUT 2 MODULE                    00017540WRT06A   ST
R0,OT2MOD           SAVE ENTRY POINT ADR OF OUT 2 MODULE   00017550WRT06B   MVC
  IOREC,ADRK                                               00017560         MVC
  IOCODE+4(2),WRT06A+2  PUT ADR OF LOADED MOD INLINE       00017570         MVC
  IOADD+2(2),ADROCT2    PUT   ADR OF COUNT IN CODE           00017580         B
    WRT03A                GO MOVE IT ALL INLINE              00017590WRT07    CL
C   CARD+19(4),=CL4'OUT3'   Q. OUT 3                         00017600         BN
E   RDERR                       NO- FLAG A  S ADR ERROR        00017610WRT08
NOP   WRT08B                     YES                           00017620
MVI   WRT08+1,X'F0'               CHG SW TO BRANCH AROUND LOAD 00017630
CLC   CARD+12(2),ISCON   Q. IS THIS AN INDEX SEQ DATA SET        00017640
  BNE   WRT0801A       NO                                        00017650
  MVC   OUT3MOD(8),OUT3IS     YES-CHG TO LOAD ISAM               00017660
  B     WRT0801                                                  0001767  0WRT08
01A CLC   CARD+12(2),DACON   Q. IS THIS DIRECT                     00017680
    BNE   WRT0801              NO - LOAD SEQ                       00017690
    MVC   OUT3MOD(8),OUT3DA YES-SET TO LOAD WRT DIRECT MODULE      00017700WRT08
01  LOA  D  EPLOC=OUT3MOD        LOAD OUT 3 MODULE                   00017710WRT
08A   ST    R0,OT3MOD                  SAVE ENTRY POINT OF MODULE    00017720WRT
08B   MVC   IOREC,ADRL                                               00017730
      MVC   IOCODE+4(2  ),WRT08A+2       PUT ADR OF LOADED MOD INLINE  00017740
        MVC   IOADD+2(2),ADROCT3         PUT ADR OF COUNT IN CODE      00017750
        B     WRT03A                     GO MOVE IT ALL INLINE         00017760A
DROCT1  DC    S(O1CNT)                                                   0001777
0ADROCT2  DC    S(O2CNT)                                                 0001778
0ADROCT3  DC    S(O3CNT)                                                 0001779
0REG10    DC    XL2'A000'    REG 10 FOR WRITE OUT 1    REC AREA            00017
800REG11    DC    XL2'B000'           REG 11 FOR OUT 2                     00017
810REG12    DC    XL2'C000'           REG 12 FOR OUT 3                     00017
820DACON    DC    CL2'DA'                                          +       * 000
17830         EJECT                                                            0
0017840** INLINE CODING FOR USER READ AND WRITES OF PS DATA SETS               0
0017850*   I/O MOD MUST ADD 12 TO R14 TO BY PASS PARMS                         0
0017860IOCODE   DC    XL2'03'                                                  0
  0017870         L     R15,SIZEWK   * LOAD ADR OF I/O MOD  *VTO BE FILLED IN
 00017880IOCODE1  DC    XL2'01'
 00017890         BALR  R14,R15            BRANCH TO I/O MOD
 00017900IOCODE  2  DC    XL2'03'
   00017910INPEOF   B     *+0              * BRANCH TO EOF  (FOR READ ONLY)
   00017920IOCODE3  DC    XL2'01'
   00017930IOREC    DC    XL2'  0000'        * REC AREA ADDRESS OR REG
     00017940IOCODE4  DC    XL2'05'
     00017950         DC    XL6'FFFFFFFFFFFF'  FIRST 2 POS KEY ADR BISAM/  4  FU
TURE 00017960IOCODE5  DC    XL2'05'
       00017970IOADD    AP    *+0(4),ONE  * ADD 1 TO RECORD COUNT
       00017980         EJECT
       00017990RDRTN1   EQU   *
         00018000*  THIS RTN SETS UP THE CODE
         00018010*   NECESSARY TO READ CARDS
         00018020*
           00018030         L     R5,ADRUBASE NEED TO POINT TO COMM AREA
           00018040         CLC   CARD+19(4),=CL4'CARD'  Q. READ CARD PARM
           00018050         BE    RDCARD                    YES
             00018060         CLC   CARD+19(3),=CL3'INP'    Q.READ INPUT
             00018070         BE    RDINPUT                   YES
             00018080         B     RDERR                     NO- FLAG AS ADR ER
R            00018090RDIN  PUT  CLC   CARD+12(3),ISCON    Q. SEQ IS READ  (IS)
               00018100         BNE   RDINPUT3
               00018110         MVC   MODNAME1(24),INP1IS    SET MOD NAMES TO IS
               00018120         B     RD  INPUT6               GO CONV
                 00018130RDINPUT3 CLC   CARD+12(3),ISRCON   Q. INDEX SEQ/RANDOM
(ISR)            00018140         BNE   RDINPUT5
                 00018150         MVC   MODNAME1(24),IN  P1ISR   SET MOD NAMES T
O ISR              00018160RDINPUT4 BAL   R14,RDISR01            CONVERT KEY  AD
DRESS              00018170         B     RDINPUT9
                   00018180RDINPUT5 CLC   CARD+12(2),DICON    Q. RD DI  RECT USI
NG BLK ADR (DI)      00018190         BNE   RDINPT5A
                     00018200         MVC   MODNAME1(24),INP1DI    SET MOD NAMES
 TO DI               00018210         B     RDINPUT6
     +                 00018220RDINPT5A CLC   CARD+12(2),DKCON    Q. RD DIRECT U
SIN  G KEY  (DK          00018230         BNE   RDINPT5B
                         00018240         MVC   MODNAME1(24),INP1DK    SET MOD N
AMES TO DK               00018250         B     RDINPUT4
                           00018260RDINPT5B CLI   CARD+12,X'40'       Q. PS OR P
O READ                     00018270         BNE   RDERR                  NO ERRO
R                          00018280         MVC   MODNAME1(24),READINP1  SET MOD
 NAMES TO PS/PO            000182  90RDINPUT6 LA    R4,8(0)                *CONV
-EOF ADR/ GIVE TAGRTN REL    00018300         MVC   CARD+60(4),CARD+19     * LOC
 OF WHERE INST WILL BE AT    00018310         MVC   CARD+19(4),CARD+24        *
 MOVE TAG TO A-ADR-FOR TAGRT 00018320         BA  L   R14,TGRTN              *
PERFORM RTN                    00018330         MVC   INPEOF+2(2),RXINST+2   * M
OVE EOF ADR TO GEN CODE        00018340         MVC   CARD+19(4),CARD+60    * PU
T ORIGINAL A-ADR BACK          00018350RDINPUT9 CLI   CARD+22,C  '1'         Q.
INP 1                            00018360         BE    RDINP1
   YES                           00018370         CLI   CARD+22,C'2'
Q. INP 2                         00018380         BE    RDINP2
     YES                           00018390         CLI   CARD+22,C'3'
  Q. INP 3                         00018400         BE    RDINP3
     YES                           00018410         B     RDERR
     NO-ADR E  RR                    00018420RDCARD   NOP   RDCARD01
                                     00018430         LOAD  EPLOC=READCARD
LOAD CARD READ MODULE                00018440         ST    R0,RDCDMOD
 SAVE ADR OF MOD                       00018450         MVI   RDCARD+1,X'F0'   *
 SET TO BYPASS LOADING MOD AGAIN       00018460RDCARD01 MVC   IOREC,ACONCARD
 * PUT LHE ADR OF RECORD AREA          00018470         MVC   IOADD+2(2),CDCNT
 * PUT ADR OF COUNT IN CODE            0001  8480         MVC   IOCODE+4(2),RDCD
ADR * PUT ADR OF LOAD MOD ADR IN CODE    00018490         LA    R4,8(0)
       *CONV-EOF ADR/ GIVE TAGRTN REL    00018500         MVC   CARD+19(4),CARD+
24        *  MOVE TAG TO A-ADR-FOR TAGRT 00018510           BAL   R14,TGRTN
         *  PERFORM RTN                    00018520         MVC   INPEOF+2(2),RX
INST+2   * MOVE EOF ADR TO GEN CODE        00018530         B     RDMOVE01
      * GO GET EOF ADR & MOVE INST IN      00018540RDMOVE01 MVC   INSHOLD  (6),I
OCODE   * MOVE                               00018550         MVC   INSHOLD+8(4)
,IOCODE1  *  CODE                            00018560         MVC   INSHOLD+16(6
),IOCODE2  * TO BE                           00018570         MVC   INSHOLD+24(4
),IOCODE  3 *     PRINTED                      00018580         MVC   INSHOLD+32
(8),IOCODE4 *       AND                        00018590         MVC   INSHOLD+40
(8),IOCODE5 *        INSERTED IN LINE          00018600         B     PARPRT
GO PRINT + INSERT CODE +                         00018610RDERR    MVI   ADRERR,C
'E'        FLAG AS AD  DRESS ERROR                 00018620         MVI   NOGOSW
,C'1'       SET NO GO SWITCH                       00018630         B     PARPRT
                                                   00018640ACONCARD DC    S(CARD
)                                                    00018650CDCNT    DC    S(CR
DCNT)                                                00018660RDCDADR  DC    S(RD
CDMOD)                                               00018670INP1CT   DC    S(IN
1CNT)                                                  00018680INP1ADR  DC    S(
IN1MOD)                                                00018690INP2CT   DC    S(
IN2CNT)                                                00018700INP2ADR  DC    S(
IN2MOD)                                                00018710INP  3CT   DC
S(IN3CNT)                                                00018720INP3ADR  DC
S(IN3MOD)                                                00018730RDINP1   NOP
RDINP101             ONE TIME SWITCH                     00018740         LOAD
E  PLOC=MODNAME1                                           00018750         ST
  R0,IN1MOD            SAVE ADR OF MOD                     00018760         MVI
  RDINP1+1,X'F0'       SET TO BYPASS LOADING OF MOD AGAIN  00018770RDINP101 MVC
  IOADD+2(2),INP  1CT    PUT ADR OF COUNT IN - INLINE CODE   00018780         MV
C   IOCODE+4(2),INP1ADR  PUT ADR OF LOAD MOD ADR IN  CODE    00018790         MV
C   IOREC,ADRA      PUT REC AREA ADR INLINE                  00018800         B
    RDMOVE01          GO GET EO  F ADR & MOVE INST INLINE      00018810RDINP2
NOP   RDINP201            ONE TIME SW                          00018820
LOAD  EPLOC=MODNAME2                                           00018830
ST    R0,IN2MOD           SAVE ADR OF MOD                        00018840
  MVI   RDINP2+1,X'F0'      SET TO BYPASS LOADING OF MOD AGAIN   00018850RDINP20
1 MVC   IOADD+2(2),INP2CT   PUT ADR OF COUNT IN INLINE CODE      00018860
  MVC   IOCODE+4(2),INP2ADR PUT ADR OF LOAD  MOD ADR IN CODE       00018870
    MVC   IOREC,ADRB      PUT ADR OF REC AREA INLINE               00018880
    B     RDMOVE01            GO GET EOF ADR & MOVE INST INLINE    00018890RDINP
3   NOP   RDINP301            ONE TIME SW                          00018900
      LOAD  EPLOC=MODNAME3                                           00018910
      ST    R0,IN3MOD           SAVE ADR OF MOD                      00018920
      MVI   RDINP3+1,X'F0'      SET TO BYPASS LOADING OF MOD AGAIN   00018930RDI
NP301 MVC     IOADD+2(2),INP3CT   PUT ADR OF COUNT IN INLINE CODE      00018940
        MVC   IOCODE+4(2),INP3ADR PUT ADR OF LOAD MOD ADR IN CODE      00018950
        MVC   IOREC,ADRC      PUT REC AREA ADR INLINE                  00018960
        B     RDMOVE01              GO GET EOF ADR & MOVE INST INLINE    0001897
0RDISR01  EQU   *  THIS RTN HANDLES RANDOM READS TO AN ISAM DATA SET     0001898
0*                 BY CONV OF KEY ADR (COL 24)                           0001899
0         ST    R14,RD14HOLD     SAVE RET+ URN ADR                         00019
000         MVC   ADR2,RDISR1AC          PUT RETURN ADR IN ADR RTN           000
19010         MVC   CARD+60(4),CARD+19   SAVE A ADR                          000
19020         MVC   CARD+19(4),CARD+24   MOVE KEY ADR TO A-ADR               000
19030         B     AADRRTN              CONV KEY ADR                          0
0019040RDISR01A MVC   IOCODE4+2(2),B2D2    MOVE ADR OF KEY TO INLINE CODE      0
0019050         MVC   CARD+19(4),CARD+60   PUT A-ADR BACK                      0
0019060         L     R14,RD14HOLD         RETURN
 00019070         BR    R14
 00019080RD14HOLD DC    1F'0'                HOLD AREA FOR RETURN ADR
 00019090RDISR1AC DC    S(RDISR01A)
 000  19100AMSW     DC    CL1'0'    ACCESS METHOD SW 0=PS 1=IS 2=ISR
   00019110DICON    DC    CL2'DICON'
 * 00019120DKCON    DC    CL2'DKCON'
 * 00019130           EJECT
     00019140         DS    0F
     00019150CALL1    EQU   *
     00019160* THIS RTN GENERATES   THE CODE TO CALL LOAD MODULES
       00019170*   THIS RTN IS RESPONSIBLE FOR LOADING THE MODULE & MAKING SURE
THE    00019180*     MODULE IS ONLY LOADED ONE TIME.
       00019190* FORMAT OF LIST STORED AT END OF   USERCODE
         00019200*         0000-0031 = PARM LIST ADRS (8)
         00019210*         0032-0035 = ACT LIST ADR
         00019220*         0036-0039 = ACT EPLOC
           00019230*         0040-0047 = MOD NAME
           00019240*         0048-0049 = BASE/DISP OF LIST STORED AT END OF USER
CODE       00019250*
             00019260         MVI   CALL02A+1,X'00'   * RESETS SWS THAT MAY HAVE
 BEEN SET    00019270         MVI   CALL02AA+1,X'00'   * BY SORT OR BINARY BUT N
OT RESET     00019280CALLSR01 CLC   RRGENSRT,CARD+19   Q. CALL OF RRGEN SORT
             0  0019290         BE    CALLSR10              YES
               00019300         CLC   RELEASE,CARD+19    Q. CALL OF RELEASE FOR
SORT           00019310         BE    CALLSR20              YES
               00019320           CLC   RETURNC,CARD+19    Q. CALL OF RETURN FOR
 SORT            00019330         BE    CALLSR30              YES
                 00019340         CLC   RRBINARY,CARD+19    Q. CALL OF RRBINARY
                 00019350         BNE   CALL  01                 NO
                   00019360         MVC   BINPARMS,CARD+44   YES-STORE PARMS PAS
SED        C9 (-)  00019370         MVI   CALL02AA+1,X'F0'      SET SW FOR RRBIN
ARY                00019380         MVI   CARD+43,X'40'    +   ONLY LET IT CK FO
R 2 PARMS            00019390CALL01   MVC   MODULENA,CARD  +19  MOVE IN MODULE N
AME FOR LOAD INST      00019400         CLI   CARD+27,X'40'   Q.ARE THE ANY PARA
METERS TO PASS         00019410         BE    CALL01AA          NO-BYPASS CREATI
NG PARAM LIST          00019420         CLC   CARD+27(7),USINGCON    Q.   IS ',U
SING,' IN CARD           00019430         BNE   RDERR                     NO- GO
 TO FLAG AS ERROR        00019440CALL01AA CLC   ENDUSER,CENDUSER    Q. FIRST MOD
ULE TO BE CALLED         00019450         BE    CALL01B                YES
                           00019460         L     R4,ENDUSER
                           00019470CALL01A  CLC   40(8,R4),CARD+19   Q.  MODULE
CALLED BEFORE              00019480         BE    CALL0105               YES
                             00019490         LA    R4,52(R4)       NO - BUMP TO
 LOOK AT NEXT ENTRY          00019500         C     R4,CENDUSER          Q. HAVE
 WE LOOKED AT ALL MOD CALLED 00019510         BNE   CALL01A                NO-TR
Y AGAIN                      00019520           B     CALL01B                NEV
ER USED BEFORE                 00019530CALL0105 MVI   CALL05+1,X'F0'         BRA
NCH AROUND LOAD OF MOD         00019540         MVC   CARD(4),36(R4)    SAVE EPL
OC FOR MODILE                  00019550CALL01B  LH      R4,BDLIST      * KEEP BA
SE/DISP                          00019560         LA    R5,52(0)      * ADR POIN
T TO LIST                        00019570         SR    R4,R5          *  BEING
CREATED                          00019580         STH   R4,BDLIST        *
                                   00019590         L     R4,ENDUSER      *PARMS
 LIST ARE STORE AT END             00019600         LA    R5,52(0)        * OF U
SERCODE                            00019610         SR    R4,R5           * FORM
AT               32POS/PARM-ADR      00019620         ST    R4,ENDUSER      *  4
POS/EPLOC 4POS/LIST ADR  8POS-MODID  00019630         LA    R5,CARD+33       *
  2POS/BD-OF-LIST-ADR  2POS FILLER   00019640         LA    R9,8(0)          *TA
LLY CT 8 PARMS MA  X                   00019650CALL02   CLI   0(R5),C','       *
 Q. LAST PARM                          00019660         BE    CALL03           *
    NO                                 00019670CALL02A  NOP   CALLSR12   THIS BR
 IS EXEC WHEN CALL OF RRGEN SORT   MOD   00019680CALL02AA NOP   CALLBIN1   THIS
BR EXEC WHEN CALL OF RRBINARY            00019690         LA    R3,4(0)       **
*POINT R4                                00019700         SR    R4,R3         **
*BACK TO LAST PARM IN LIST               000197  10CALL02B  MVI   0(R4),X'80'
 * YES FLAG AS LAST ONE                    00019720         L     R4,ENDUSER
                                           00019730         B     CALL04
                                           00019740CALL03   MV  C   CARD+19(4),1
(R5)   MOVE IN NEXT PARM                     00019750         BAL   R14,CALLST01
         GO CONVERT IT TO ACTUAL             00019760         ST    R3,0(R4)
         STORE ACTUAL ADR IN LIST            00019770         LA    R4,4(R4) +
       POINT R4 TO ADR TO STORE NEXT PARM ADR  00019780         LA    R5,5(  R5)
             BUMP 5 TO POINT TO NEXT PARM IN CD  00019790         BCT   R9,CALL0
2          Q. END OF PARM (MAX 8)                00019800         B     CALL02A
           A-YES                                 00019810CALL04   MVC   40(8,R4)
,MODULENA       YES-PUT MOD NAME AT END            00019820         LH    R5,BDL
IST     * BUMP BASE/DISP OF LIST BY 1              00019830         LA    R5,1(R
5)      *  TO ADJUST FOR IT BEING OFF              00019840         STH   R5,48(
R4)     *    STORE RESULT                            00019850         CLI   CARD
+27,X'40'  Q. WERE ANY PARMS PASSED                  00019860         BE    CALL
09A            NO - GO PUT ZEROS IN ACTUAL LIST ADR  00019870         ST    R4,3
2(R4)         PUT ACTUAL LIST ADR IN                   00019880CALL04A  ST    R4
,BINLISTA   STORE ACTUAL LIST ADR FOR BINARY SCH RTN   00019890CALL05   NOP   CA
LL07              SW TO BYPASS CALLING MOD AGAIN       00019900CALL06   LOAD  EP
LOC=MODULENA       LOAD MODULE                           00019910         ST
R0,36(R4)  STORE ENTRY POINT LOC                         00019920         CLC
MODULENA,RRGENSRT  Q. IS IT CALL OF RRGEN SORT           00019930         BNE
CALL08                NO                                 00019940           L
  R5,ADRUBASE  MUST BE LOADED, SRT4,8,12 IN COMM AREA      00019950         L
  R3,36(R4)             YES-GET ACT ADR                    00019960         LA
  R3,10(R3)             BUMP ACT BY 10                     00019970         ST
  R3,  SRT4               STORE FOR RELEASE ADR              00019980         LA
    R3,14(R3)           BUMP ACT BY 14                       00019990         ST
    R3,SRT8               STORE FOR  SORT ADR                00020000         LA
    R3,14(R3)             BUMP ACT BY 14                       00020010
ST    R3,SRT12              STORE FOR RETURN ADR               00020020CALL08
CLC   MODULENA,TAPECLAS       Q. TAPECLASS                     00020030
BNE   CALL08A                     N  O                           00020040
  MVI   TAPECLSW+1,X'00'  TURN ON SW TO TAKE ABEND IF PARMS BAD  00020050
  L     R1,32(R4)                   YES - LOAD LIST ADR          00020060
  L     R15,36(R4)                      LOAD EPLOC                 00020070
    BALR  R14,R15                   GO TO TAPECLASS                00020080
    LA    R14,0(0,0)                                               00020090
    CR    R14,R15                 Q. GOOD RETURN                     00020100
      BNE   RDERR                       NO - GO FLAG AS ERROR        00020110
      B     PARPRT                      YES - GO PRINT               00020120CAL
L08A  CLC   MODULENA,RRBINARY       Q. IS IT THE BINARY SEARCH       00020130
        BNE   CALL09                    NO                             00020140
        MVC   BINADR,36(R4)    YES MOVE IN EPA OF RRBINARY MODULE      00020150C
ALL09   MVC   CALLINST+2(2),48(R4)      BASE/DISP ADR TO GEN CODE      00020160
        MVI   C+ ALL05+1,X'00'        NOP BYPASSING LOAD INST            0002017
0         MVC     INSHOLD(6),CALLGEN1    * MOVE                            00020
180         MVC   INSHOLD+8(6),CALLGEN2  *  GENERATED                      00020
190         MVC   INSHOLD+16(6),CALLGEN3 *   CODE                          00020
200         MVC   INSHOLD+24  (4),CALLGEN4  *    IN-LINE                     000
20210         MVC   INSHOLD+32(6),CALLGEN5                                   000
20220         MVC   INSHOLD+40(8),CALLGEN6                                   000
20230         MVC   INSHOLD+48(6),CALLGEN7                                     0
0020240         CLC   MODULENA,RRBINARY   Q. IS THIS RRBINARY SEARCH           0
0020250         BNE   PARPRT                 NO-GO PRT & INSERT CODE           0
0020260         L     R1,BINLISTA     ACTUAL LIST ADR
 00020270         L     R15,BINADR      EPA OF BINARY SEARCH
 00020280         BALR  R14,R15         GO LET HIM DO HSKING
 00020290         LA    R14,0(0,0)      SET 14 TO ZEROS
   00020300         CR    R14,R15      Q. WAS PARMS VALID
   00020310         BNE   RDERR           NO-GO TO FLAG AS ERROR
   00020320         B     PARPRT         YES- GO PRT & INSERT CODE
   00020  330CALL09A  MVC   32(4,R4),CHEXZERO    R1 WILL EQ ZEROS IF NO PARMS
     00020340         B     CALL04A                WERE PASSED
     00020350CHEXZERO DC    XL4'00'
     00020360CALL07   M  VC   36(4,R4),CARD   PUT EPLOC IN FOR PREVIOUSLY LOADED
       00020370         MVI   CALL05+1,X'00'    NOP BYPASSING LOAD INST
       00020380         B      CALL08
       00020390* GEN CODE FOR CALL MAC  RO
         00020400CALLGEN1 DC    XL2'03'
         00020410CALLINST LA    R2,0(0)            LOAD ADR OF INFO ABOUT MOD
         00020420CALLGEN2 DC    XL2'03'
           00020430         L     R1,32(R2)      LOAD ACTUAL LIST ADR
           00020440CALLGEN3 DC    XL2'03'
           00020450         L     R15,36(R2)     LOAD ACTUAL EPLOC
             00020460CALLGEN4 DC    XL2'01'
             00020470         BALR  R14,R15            GO TO MOD
             00020480CALLGEN5 DC    XL2'03'
               00020490         CVD   R15,RTCD       CONVERT RETURN CODE TO DEC
               00020500CALLGEN6 DC    XL2'05'
               00020510         UNPK  RTCD(4),RTCD+4(4)      CONVERT RETURN CODE
 TO ZONED      000  20520CALLGEN7 DC    XL2'03'
                 00020530         OI    RTCD+3,X'F0'  ELIM C ON LAST POS
                 00020540* THIS RTN CONVERTS LIST ADR  WHICH SHOULD BE IN CARD+1
9 TO:1ST         00020550*  BASE/+ DISP AND THEN TO ACTUAL
                   00020560CALL  ST01 ST    R14,CALLHOLD  SAVE RETURN ADR
                     00020570         CLC   CARD+19(4),C0000    Q. IS ADR > OR =
 0000                00020580         BL    RDERR                  NO . ERROR
                     00020590         CLC   CA  RD+19(4),C5999    Q. IS ADR < 59
99                     00020600         BH    RDERR                  YES - ERROR
                       00020610         MVC   ADR2,CALST03A         *PUT RTN ADR
 IN ADRRTN AND GO LET  00020620         ST    R4,CALLWK         SAVE 4
                         00020630         B     AADRRTN               *ADRRTN CO
NV IT TO BASE/DISP       00020640CALLST03 L     R4,CALLWK          RELOAD 4 AFTE
R ADR RTN                00020650         ST    R10,CALLWK
                           00020660         LA    R10,OURCODE   CHG 10 TO WHAT I
T WILL BE AT USER TIME     00020670         MVC   CALLST04+2(2),B2D2    /CHG BAS
E/DISP                     00020680CALLST04 LA    R3,*+0                /  TO AC
TUAL                         00020690         L     R10,CALLWK           RELOAD
REG 10                       00020700         L     R14,CALLHOLD         (RETURN
                             00020710         BR    R14                    TO US
ER)                            00020720CALLHOLD DC    1F'0'       HOLD AREA FOR
RETURN ADR                     00020730CALLWK   DC    1F'0'
                               00020740CALST03A DC    S(CALLST03)    THE ADR WHE
RE WE WANT THE ADRRTN TO RETN  00020750US  INGCON DC    CL7',USING,'
                                 00020760         DS    0F
                                 00020770C0000    DC    CL4'0000'
                                 00020780C5999    DC      CL4'5999'
                                   00020790MODULENA DC    CL8' '
                                   00020800TAPECLAS DC    CL8'TAPECLAS'
                                   00020810CALLSR10 NOP   RDERR              *CA
N ONLY CALL RRGENSRT                 00020820         MVI   CALLSR10+1,X'F0'   *
 ONE TIME                            00020830         MVC   SORTTAGS,CARD+44
SAVE TGS FOR END OF PARS LOGIC       00020840*  VALID AT TAGS FOR IN + OUT PROCE
DURES                                  00020850         CLC   CARD+44(2),=C'TG'
      Q. VALID TAG , IN ADR            00020860         BNE   RDERR
         NO                            00020870         CLC   CARD+49(2),=C'TG'
      Q. VALID TAG ,   OUTPUT PROC ADR   00020880         BNE   RDERR
           NO                            00020890         MVC   SIZEWK+2(2),CARD
+46                                      00020900         BAL   R14,CNVRTN
           *CONVERT TG # TO BINARY         00020910         C     R3,FFCON
          Q.          WAS IT VALID         00020920         BE    RDERR
             NO                            00020930         C     R3,ZERO
          Q  TAG # ZERO                    00020940       *               BE
RDERR                         YES-INVALID                00020950         MVI
SORTSW+1,X'00'  SET SORT SW IN PAREND LOGIC              00020960         MVC
SIZEWK+2(2),CARD+51                                      00020970           BAL
  R14,CNVRTN                                               00020980         C
  R3,FFCON                Q. VALID TG #                    00020990         BE
  RDERR                             NO-INVALID             00021000         C
    R3,ZERO                 Q. TAG # ZERO                    00021010         BE
    RDERR                         YES-INVALID                00021020         MV
I   CARD+43,C' '        CLEAR COMMA BEFORE TAGS IN CARD      00021030*  ELIMINAT
ES CALL RTN LOOK  ING AT 2 TG ADR IN CALL OF RRGEN SRT CARD '  00021040
MVI   CALL02A+1,X'F0'  THIS WILL SET A SWITCH TO BRANCH BACK   00021050*
                       TO CALLSR12 BEFORE CALL RTN FLAGS       00021060*
                       LAST PAR  M IN LIST. WE MUST ADD TWO ADRS 00021070*
                         TO LIST(INPUT + OUTPUT PROCEDURE ADRS)  00021080*
          NOTE: REG 4 WILL POINT TO WHERE NEXT PARM ADR IS TO    00021090*
                BE STORED                                          00021100
    B     CALL01           GO BACK TO NORMAL CALL LOGIC            00021110CALLS
R12 MVC   0(4,R4),INADR    MOVE ACT ADR OF INPUT PROC TO LIST      00021120
    LA    R4,4(R4)         BUMP BY 4                                 00021130
      MVC   0(4,R4),OUTADR   MOVE ACT ADR OF OUTPUT PROC TO LIST     00021140
      LA    R4,4(R4)     BUMP BY 4                                   00021150
      MVC   0(4,R4),SORTREC   MOVE SORT REC ACT ADR INTO LIST        0002116  0
        B     CALL02B          GO BACK TO NORMAL LOGIC                 00021170C
ALLSR20 MVC   SORTRI1+2(2),BDSRT4  MOVE BD ADR OF EPA OF RELEASE       00021180
        B     CALLSR32                                                 00021190C
ALLSR30 MVC     SORTRI1+2(2),BDSRT12 MOVE BD ADR OF EPA OF RETURN        0002120
0CALLSR32 MVC   INSHOLD(6),SORTRS1   *MOVE GEN CODE                      0002121
0         MVC   INSHOLD+8(4),SORTRS2    IN-LINE                          0002122
0         B     PARPRT                 GO PRINT AND INSERT CODE            00021
230CALLBIN1 L     R5,ADRUBASE   MUST BE LOADED                             00021
240         MVC   0(4,R4),INX1ADRB     MOVE ACT ADR OF INX1 TO LIST        00021
250         LA    R4,4(R4)             BU  MP 4 BY 4                         000
21260         MVC   0(4,R4),BINPMADR   MOVE ADR OF PARMS IN       PARENDS    000
21270         B     CALL02B            GO BACK TO NORMAL       LOGIC         000
21280INADR    DC    A(INPROC)                                                  0
0021290OUTADR   DC    A(OUTPROC)                                               0
0021300SORTREC  DC    A(OURCODE+3000)     SORT RECORD AREA 5000                0
0021310RRBINARY DC    CL8'RRBINARY'                                    +
 00021320BINADR   DC    1F'0'       ENTRY POINT ADR OF RRBINARY STORE  D HERE
   00021330BINPARMS DC    CL20'0'
   00021340BINPMADR DC    A(BINPARMS)
   00021350BINLISTA DC    1F'0'
   0  0021360INX1ADRB DC    A(INX1)
     00021370SORTRS1  DC    XL2'03'
     00021380SORTRI1  L     R15,HEXWORK LOAD ADR OF ENTRY POINT
     00021390SORTRS  2  DC    XL2'01'
       00021400         BALR  R14,R15     BR TO IT
       00021410BDSRT4   DC    S(SRT4)
       00021420BDSRT12  DC    S(SR  T12)
         00021430RRGENSRT DC    CL8'RRGENSRT'
         00021440RELEASE  DC    CL8'RELEASE '
         00021450RETURNC  DC    CL8'RETURN  '
           00021460         EJECT
           00021470XCONS1   EQU   *
           00021480* THIS RTN CONVERTS HEX DIGITS TO BYTES  EG C  1 ON CARD = A
IN STORAGE   00021490*   AFTER  CONVERSION TO BYTES CONTROL IS PASSED TO CONSRTN
 TO PLACE    00021500*    CONSTANT IN MEMORY
             00021510         L     R3,SIZEHLD    *LOAD BINARY SIZE
               00021520         AR    R3,R3         *ADD IT TO ITSELF
               00021530         LA    R3,1(R3)      *ADD 1 TO IT = # OF HEX DIGI
TS             00021540         ST    R3,HEXWORK     STORE IT
                 00021550         MVC   XCONS02+1(1),HEXWORK+3  MOVE COMPUTED SI
ZE TO TRANSLATE  00021560         MVC   XCONS03+1(1),HEXWORK+3
                 00021570         MVC   HEXTR(40),HEXTR+50    CLEAR FIRST 40 POS
ITIONS           00021580XCON  S02  TR    CARD+33(40),HEXTR     TRANSLATE  F0=00
 F9=09 C1=0A C6=0F 00021590XCONS03  NC    HEXTR(40),CARD+33    Q.  ALL TOP BITS
OFF                00021600         BM    ML04A                    NO-BAD HEX DI
GIT - GO FLAG ERR  00021610         MVC   HE  XTR(40),CARD+33     MOVE CARD FOR
PACKING              00021620         PACK  CARD+33(8),HEXTR(15)    * CONVERT
                     00021630         PACK  CARD+40(8),HEXTR+14(15) *  DIGITS TO
                     00021640         PACK  CARD+47(7),HEXT  R+28(13) *   CHARAC
TERS                   00021650         B     CONSRTN         GO LET CONSTANT RT
N STORE IT             00021660HEXWORK  DC    1F'0'
                       00021670HEXTR    DC    CL193' '
                         00021680         DC    XL6'0A0B0C0D0E0F'
                         00021690         DC    CL41' '
                         00021700         DC    XL10'00010203040506070809'
         +                 00021710         DC    CL6' '
                             00021720         EJECT
                             00021730DEBUGRTN EQU   *
                             00021740         L     R5,UBASE      SET 5 TO USER
BASE                           00021750         ST    R5,HEXHLD               ST
ORE ADR                        00021760         BAL   R14,HEXRTN              CO
NVERT TO HEX  A=C1             00021770         MVC   RECCTCON+30(6),CONVHEX+2
                               000217  80         LA    R5,4(R5)
POINT 5 TO INP1 REC COUNT        00021790         ST    R5,HEXHLD
                                 00021800         BAL   R14,HEXRTN
                                 00021810         MV  C   RECCTCON+42(6),CONVHEX
+2                                 00021820         LA    R5,4(R5)
  5=INP2                           00021830         ST    R5,HEXHLD
                                   00021840         BAL   R14,HEXRT  N
                                     00021850         MVC   RECCTCON+54(6),CONVH
EX+2                                 00021860         LA    R5,4(R5)
    INP3                             00021870         ST    R5,HEXHLD
                                       00021880         BAL   R14,HEXRTN
                                       00021890         MVC   RECCTCON+66(6),CON
VHEX+2                                 00021900         LA    R5,4(R5)
      OUT1                               00021910         ST    R5,HEXHLD
                                         00021920         BAL   R14,HEXRTN
                                         00021930         MVC   RECCTCON+78(6),C
ONVHEX+2                                   00021940         LA    R5,4(R5)
          OUT2                             00021950         ST    R5,HEXHLD
                                           00021960         BAL   R14,HEXRTN
                                           0002  1970         MVC   RECCTCON+90(
6),CONVHEX+2                                 00021980         LA    R5,4(R5)
            OUT3                             00021990         ST    R5,HEXHLD
                                             00022000           BAL   R14,HEXRTN
                                               00022010         MVC   RECCTCON+1
02(6),CONVHEX+2                                00022020      LA       R5,4(R5)
              CARD                             00022030         ST    R5,HEXH  L
D                                                00022040         BAL   R14,HEXR
TN                                               00022050         MVC   RECCTCON
+114(6),CONVHEX+2                                00022060         MVC   HEXHLD(4
),P000             CONVERT                         00022070         BAL   R14,HE
XRTN                  ACTUAL PRT ADR               00022080         MVC   AREALC
ON+30(6),CONVHEX+2                                 00022090         MVC   HEXHLD
(4),CD00                   +                         00022100         BAL   R14,
HEXRTN               CARD   ADR                        00022110         MVC   AR
EALCON+114(6),CONVHEX+2                                00022120         MVC   HE
XHLD(4),CONSACT                                        00022130         BAL   R1
4,HEXRTN              CONS ADR                           00022140         MVC
AREALCO2+52(6),CONVHEX+2                                 00022150         LA
R10,OURCODE+4096         R10=LHE OUT 1                   00022160         ST
R10,HEXHLD                                                 00022170         BAL
  R14,HEXRTN                                               00022180         MVC
  AREALCON+78(6),CONVHEX+2                                 00022190         LA
  R10,900(R10)             OUT I                           00022200           ST
    R10,HEXHLD                                               00022210         BA
L   R14,HEXRTN                                               00022220         MV
C   AREALCON+90(6),CONVHEX+2                                 00022230         LA
    R  10,900(R10)            OUT 3                            00022240
ST    R10,HEXHLD                                               00022250
BAL   R14,HEXRTN                                               00022260
MVC   AREALCON+102(6  ),CONVHEX+2                                00022270
  MVC   HEXHLD(4),INX1ACON                                       00022280
  BAL   R14,HEXRTN                                               00022290
  MVC   AREALCO2+10(6),CONVHEX+2                                   00022300
    MVC   HEXHLD(4),INX2ACON                                       00022310
    BAL   R14,HEXRTN                                               00022320
    MVC   AREALCO2+24(6),CONVHEX+2                                   00022330
      MVC   HEXHLD(4),RESULTAC                                       00022340
      BAL   R14,HEXRTN                                               00022350
      MVC   AREALCO2+38(6),CONVHEX+2                                   00022360
        MVC   PRTAREA(133),PRTAREA-1                                   00022370
        PUT   PRINTER,PRTAREA+1                                        00022380
        MVC   PRTAREA+50(14),DEBUGCON   MOVE IN DEBUG HDR              00022390
          PUT   PRINTER,PRTAREA+1                                        0002240
0         MVC   PRTAREA+1(120),RECCTCON  RECORD COUNT LOC                0002241
0         PUT   PRINTER,PRTAREA+1                                        0002242
0         MVC     PRTAREA+1(120),AREALCON   AREA LOCATIONS                 00022
430         PUT   PRINTER,PRTAREA+1                                        00022
440         MVC   PRTAREA(133),PRTAREA-1                                   00022
450         MVC   PRTAREA+16(5  8),AREALCO2                                  000
22460         PUT   PRINTER,PRTAREA+1                                        000
22470         L     R5,UBASE      SET 5 TO USER BASE                         000
22480         MVC   PRTAREA(133),PRTAREA-1   +                                 0
0022490         PUT   PRINTER,PRTAREA+1      SPACE 1 LINE
 00022500         B     CLEAR01
 00022510UBASE    DC    A(USERBASE)
 00022520P000     DC    A(PRTAREA+1)
   00022530CD00     DC    A(CARD)
   00022540CONSACT  DC    A(CONS)
   00022550INX1ACON DC    A(INX1)
     00022560INX2ACON DC    A(INX2)
     00022570RESULTAC DC    A(RESULT)
     00022580DEBUGCON DC    CL14'DEBUGGING AIDS'
     000  22590RECCTCON DC    CL49'RECORD COUNT LOCATIONS  PRINT=XXXXXX INP1=XXX
XXX '  00022600         DC    CL48'INP2=XXXXXX INP3=XXXXXX OUT1=XXXXXX OUT2=XXXX
XX '   00022610         DC    CL23'OUT3=XXXXXX CARD=XXXXXX'
       00022620AREALCON   DC    CL50'AREA LOCATIONS          P000 =XXXXXX A000=R
EG7   B' 00022630ARE      DC    CL50'000=REG8   C000=REG9   J000=XXXXXX K000=XXX
XXX L00' 00022640         DC    CL20'0=XXXXXX CD00=XXXXXX'
         00022650AREALCO2 DC    CL47'       INX1=XXXXXX   INX2=XXXXXX   RS00=XXX
XXX   '    00022660         DC    CL11'0000=XXXXXX'
           00022670         EJECT
           00022680REGS     DSECT
             00022690R0       EQU   0
             00022700R1       EQU   1
             00022710R2       EQU   2
               00022720R3       EQU   3
               00022730R4       EQU   4
               00022740R5       EQU   5
                 00022750R6       EQU   6
                 00022760R7       EQU   7
                 00022770R8       EQU   8
                 0  0022780R9       EQU   9
                   00022790R10      EQU   10
                   00022800R11      EQU   11
                   00022810R12        EQU   12
                     00022820R13      EQU   13
                     00022830R14      EQU   14
                     00022840R15      EQU   15
                       00022850         END   OURCODE
                       00022860 {     *             *      RRIN1DIN  CSECT
                                                   00000010*  THIS MODULE IS CAL
LED BY GEN PROGRAM                                 00000020*   TO READ DA DATA S
ETS / TYPE = DI  (DATA AND KEY)                    00000030           SAVE  (2,1
2),T,*                                               00000040         BALR  11,0
                                                     00000050         USING *,11
                                                     00000060         ST      13
,SAVEAREA+4                                            00000070         LR    4,
13                                                     00000080         LA    13
,SAVEAREA                                              00000090         ST
   13,8(4)                                               00000100ML01     B
ML03         1ST TIME SWITCH                             00000110         MVC
DECBIN+29(1),4(14)   PUT APPRO REG FOR BLK ADR           00000120ML02     READ
DECBIN,DI,DCBIN,*+12,'S',  'S',(7)                         00000130         WAIT
  ECB=DECBIN                                               00000140         TM
  DECBIN+1,X'04'    Q. EOD                                 00000150         BNZ
  ML05                  YES                                  00000160         CH
ECK DECBIN                NO                                 00000170ML02A    L
    13,SAVEAREA+4   *RESTORE                                 00000180         LM
    14,12,12(13)    * HIS REGISTERS                            00000190
LA    14,12(0,14)     * BUMP 14 TO BYPASS PARMS                00000200
BR    14             *       USER                              00000210ML03
MVC   DECBIN+12,0(14)     MOVE IN AREA ADR                     0000022  0
  OPEN  (DCBIN)                                                  00000230
  MVI   ML01+1,X'00'      NOP  1ST TIME SWITCH                   00000240
  B     ML02A                                                    00000250* EOF E
XIT                                                                00000260ML05
    L     13,SAVEAREA+4                                            00000270
    LM    14,12,12(13)                                             00000280
    LA    15,0(0,0)                                                  00000290
      BR    14                                                       00000300SAV
EAREA DC    18F'0'                                                   00000310REC
AREA  DS    CL900                  Q                                   00000320D
CBIN    DCB   DDNAME=INP1,DSORG=DA,MACRF=RCI,RECFM=F                   00000330
        END                                                            00000340
    *             *      RRIN1DKN  CSECT
                 00000010*  THIS MODULE IS CALLED BY GEN PROGRAM
                 00000020*   TO READ DA DATA SETS / TYPE = DI  (DATA AND KEY)
                 00000030           SAVE  (2,12),T,*
                   00000040         BALR  11,0
                   00000050         USING *,11
                   00000060         ST      13,SAVEAREA+4
                     00000070         LR    4,13
                     00000080         LA    13,SAVEAREA
                     00000090         ST         13,8(4)
                       00000100ML01     B     ML03         1ST TIME SWITCH
                       00000110         MVC   DECBIN+29(1),4(14)   PUT APPRO REG
 FOR BLK ADR           00000120         MVC   ML03A+2(2),6(14)  * MOVE   KEY ADR
 TO NEXT INST            00000130ML03A    LA    14,*+0            * CONV BASE/DI
SP TO ACTUAL ADR         00000140         ST    14,DECBIN+20   * STORE ACTUAL AD
R IN READ MACRO          00000150         LA    13,SAVEAREA       * POINT 13 BAC
K TO M  Y SAVEAREA         00000160ML02     READ  DECBIN,DK,DCBIN,*+12,'S',*+20,
(7)                        00000170         WAIT  ECB=DECBIN
                           00000180         TM    DECBIN+1,X'80'   Q.  RECORD NO
T FOUND                      00000190         BZ    CHECK                NO
                             00000200         L     6,HOLD
                             00000210         MVC   0(6,6),NOHIT         MOVE 'N
OHIT' TO AREA                0000022  0         B     ML02A                GO BA
CK                             00000230CHECK    CHECK DECBIN                NO
                               00000240ML02A    L     13,SAVEAREA+4  * RELOAD
                               00000250         LM      14,12,12(13)     *  AND
                                 00000260         LA    15,0(0,0)      *     RET
URN                              00000270         LA    14,12(0,14)    *      TO
                                 00000280         BR    14               *
 USER                              00000290ML03     MVC   DECBIN+12(4),0(14)  MO
VE AREA ADR TO READ INST           00000300         MVC   ML04+2(2),4(14)   MOVE
 REC AREA ADR TO LOAD ADR INST.    00000310         MVC   HOLD,DECBIN+12
                                     00000320ML04     LA    2,*+0             CO
NVERT TO ACT ADR.                    00000330         ST    2,DECBIN+24     STOR
E BLK ADR FOR READ                   00000340         OPEN  (DCBIN)
                                       00000350         MVI   ML01+1,X'00'
NOP  1ST TIME SWITCH                   00000360         B     ML02A
                                       00000370* EOF EXIT
                               +         00000380ML05     L     13,SAVEAREA+4
                                           00000390         LM    14,12,12(13)
                                           00000400         LA    15,0(0,0)
                                           00000410         BR    14
                                           0  0000420SAVEAREA DC    18F'0'
                                             00000430HOLD     DS    CL4
                                             00000440NOHIT    DC    CL8'NOHIT '
                                             00000450DCBIN      DCB   DDNAME=INP
1,DSORG=DA,MACRF=RCK,RECFM=F                   00000460         END
                                               00000470 {     *             *
   RRINP1IS  CSECT                                                         00000
010*  THIS  MODULE  IS CALLED BY THE GENERATOR PROGRAM                     00000
020*         TO HANDLE READ INP1  / ONLY DIFF BETWEEN INP1 2 & 3 ARE       00000
030*            REG USED FOR REC AREA AND DDNAME IN DCB                      000
00040         SAVE  (2,12),T,*                                               000
00050         BALR  12,0                                                     000
00060         USING   *,12                                                     0
0000070         ST    13,SAVEAREA+4                                            0
0000080         LR    4,13                                                     0
0000090         LA    13,SAVEAREA
 00000100         ST    13,8(4)
 00000110ML01     B     ML03             1ST SWITCH
 00000120ML02     GET   DCBIN,RECAREA
   00000130         LA    7,RECAREA      LOAD 7 WITH REC AREA ADR
 * 00000140ML02A    L     13,SAVEAREA+4  RELOAD HIS REGS
   00000150         LM    14,6,12(13)    BYPASS LOADING 7  SINCE   IT IS
     00000160         LM    8,12,52(13)     ASSIGN TO HIS INP1 REC AREA
     00000170         LA    15,0(0,0)      SET RETURN CODE TO 0
     00000180         LA    14,12(0,14)    BUMP 14 BY 12 TO RETURN TO ADD TO RE
 C CT  00000190         BR    14
       00000200ML03     OPEN  (DCBIN)
       00000210         MVI   ML01+1,X'00'   NOP 1ST TIME SWITCH
       0000022  0         B     ML02A
         00000230ML04     L     13,SAVEAREA+4
         00000240         LM    14,12,12(13)
         00000250         LA      15,0(0,0)
           00000260         BR    14
           00000270SAVEAREA DC    18F'0'
           00000280RECAREA  DS    CL900     V
             00000290DCBIN    DCB   DDNAME=INP1,DSORG=IS,MACRF=GM,EODAD=ML04
             00000300         END
             00000310     *             *      RRIN1DIN  CSECT
                                       00000010*  THIS MODULE IS CALLED BY GEN P
ROGRAM                                 00000020*   TO READ DA DATA SETS / TYPE =
 DI  (DATA AND KEY)                    00000030           SAVE  (2,12),T,*
                                         00000040         BALR  11,0
                                         00000050         USING *,11
                                         00000060         ST      13,SAVEAREA+4
                                           00000070         LR    4,13
                                           00000080         LA    13,SAVEAREA
                                           00000090         ST         13,8(4)
                                             00000100ML01     B     ML03
 1ST TIME SWITCH                             00000110         MVC   DECBIN+29(1)
,4(14)   PUT APPRO REG FOR BLK ADR           00000120ML02     READ  DECBIN,DI,DC
BIN,*+12,'S',  'S',(7)                         00000130         WAIT  ECB=DECBIN
                                               00000140         TM    DECBIN+1,X
'04'    Q. EOD                                 00000150         BNZ   ML05
            YES                                  00000160         CHECK DECBIN
              NO                                 00000170ML02A    L     13,SAVEA
REA+4   *RESTORE                                 00000180         LM    14,12,12
(13)    * HIS REGISTERS                            00000190         LA    14,12(
0,14)     * BUMP 14 TO BYPASS PARMS                00000200         BR    14
         *       USER                              00000210ML03     MVC   DECBIN
+12,0(14)     MOVE IN AREA ADR                     0000022  0         OPEN  (DCB
IN)                                                  00000230         MVI   ML01
+1,X'00'      NOP  1ST TIME SWITCH                   00000240         B     ML02
A                                                    00000250* EOF EXIT
                                                       00000260ML05     L     13
,SAVEAREA+4                                            00000270         LM    14
,12,12(13)                                             00000280         LA    15
,0(0,0)                                                  00000290         BR
14                                                       00000300SAVEAREA DC
18F'0'                                                   00000310RECAREA  DS
CL900                  Q                                   00000320DCBIN    DCB
  DDNAME=INP2,DSORG=DA,MACRF=RCI,RECFM=F                   00000330         END
                                                           00000340     *
      *      RRIN1DKN  CSECT
     00000010*  THIS MODULE IS CALLED BY GEN PROGRAM
     00000020*   TO READ DA DATA SETS / TYPE = DI  (DATA AND KEY)
     00000030           SAVE  (2,12),T,*
       00000040         BALR  11,0
       00000050         USING *,11
       00000060         ST      13,SAVEAREA+4
         00000070         LR    4,13
         00000080         LA    13,SAVEAREA
         00000090         ST         13,8(4)
           00000100ML01     B     ML03         1ST TIME SWITCH
           00000110         MVC   DECBIN+29(1),4(14)   PUT APPRO REG FOR BLK ADR
           00000120         MVC   ML03A+2(2),6(14)  * MOVE   KEY ADR TO NEXT INS
T            00000130ML03A    LA    14,*+0            * CONV BASE/DISP TO ACTUAL
 ADR         00000140         ST    14,DECBIN+20   * STORE ACTUAL ADR IN READ MA
CRO          00000150         LA    13,SAVEAREA       * POINT 13 BACK TO M  Y SA
VEAREA         00000160ML02     READ  DECBIN,DK,DCBIN,*+12,'S',*+20,(7)
               00000170         WAIT  ECB=DECBIN
               00000180         TM    DECBIN+1,X'80'   Q.  RECORD NOT FOUND
                 00000190         BZ    CHECK                NO
                 00000200         L     6,HOLD
                 00000210         MVC   0(6,6),NOHIT         MOVE 'NOHIT' TO ARE
A                0000022  0         B     ML02A                GO BACK
                   00000230CHECK    CHECK DECBIN                NO
                   00000240ML02A    L     13,SAVEAREA+4  * RELOAD
                   00000250         LM      14,12,12(13)     *  AND
                     00000260         LA    15,0(0,0)      *     RETURN
                     00000270         LA    14,12(0,14)    *      TO
                     00000280         BR    14               *       USER
                       00000290ML03     MVC   DECBIN+12(4),0(14)  MOVE AREA ADR
TO READ INST           00000300         MVC   ML04+2(2),4(14)   MOVE REC AREA AD
R TO LOAD ADR INST.    00000310         MVC   HOLD,DECBIN+12
                         00000320ML04     LA    2,*+0             CONVERT TO ACT
 ADR.                    00000330         ST    2,DECBIN+24     STORE BLK ADR FO
R READ                   00000340         OPEN  (DCBIN)
                           00000350         MVI   ML01+1,X'00'      NOP  1ST TIM
E SWITCH                   00000360         B     ML02A
                           00000370* EOF EXIT
                   +         00000380ML05     L     13,SAVEAREA+4
                               00000390         LM    14,12,12(13)
                               00000400         LA    15,0(0,0)
                               00000410         BR    14
                               0  0000420SAVEAREA DC    18F'0'
                                 00000430HOLD     DS    CL4
                                 00000440NOHIT    DC    CL8'NOHIT '
                                 00000450DCBIN      DCB   DDNAME=INP2,DSORG=DA,M
ACRF=RCK,RECFM=F                   00000460         END
                                   00000470 {     *             *      RRINP2IS
 CSECT                                                         00000010*  THIS
MODULE  IS CALLED BY THE GENERATOR PROGRAM                     00000020*
 TO HANDLE READ INP1  / ONLY DIFF BETWEEN INP1 2 & 3 ARE       00000030*
    REG USED FOR REC AREA AND DDNAME IN DCB                      00000040
  SAVE  (2,12),T,*                                               00000050
  BALR  12,0                                                     00000060
  USING   *,12                                                     00000070
    ST    13,SAVEAREA+4                                            00000080
    LR    4,13                                                     00000090
    LA    13,SAVEAREA                                                00000100
      ST    13,8(4)                                                  00000110ML0
1     B     ML03             1ST SWITCH                              00000120ML0
2     GET   DCBIN,RECAREA                                              00000130
        LA    8,RECAREA      LOAD 7 WITH REC AREA ADR                  00000140M
L02A    L     13,SAVEAREA+4  RELOAD HIS REGS                           00000150
        LM    14,7,12(13)    BYPASS LOADING 8  SINCE   IT IS             0000016
0         LM    9,12,56(13)     ASSIGN TO HIS INP1 REC AREA              0000017
0         LA    15,0(0,0)      SET RETURN CODE TO 0                      0000018
0         LA    14,12(0,14)    BUMP 14 BY 12 TO RETURN TO ADD TO RE  C CT  00000
190         BR    14                                                       00000
200ML03     OPEN  (DCBIN)                                                  00000
210         MVI   ML01+1,X'00'   NOP 1ST TIME SWITCH                       00000
22  0         B     ML02A                                                    000
00230ML04     L     13,SAVEAREA+4                                            000
00240         LM    14,12,12(13)                                             000
00250         LA      15,0(0,0)                                                0
0000260         BR    14                                                       0
0000270SAVEAREA DC    18F'0'                                                   0
0000280RECAREA  DS    CL900     V
 00000290DCBIN    DCB   DDNAME=INP2,DSORG=IS,MACRF=GM,EODAD=ML04
 00000300         END
 00000310     *             *      RRIN1DIN  CSECT
                           00000010*  THIS MODULE IS CALLED BY GEN PROGRAM
                           00000020*   TO READ DA DATA SETS / TYPE = DI  (DATA A
ND KEY)                    00000030           SAVE  (2,12),T,*
                             00000040         BALR  11,0
                             00000050         USING *,11
                             00000060         ST      13,SAVEAREA+4
                               00000070         LR    4,13
                               00000080         LA    13,SAVEAREA
                               00000090         ST         13,8(4)
                                 00000100ML01     B     ML03         1ST TIME SW
ITCH                             00000110         MVC   DECBIN+29(1),4(14)   PUT
 APPRO REG FOR BLK ADR           00000120ML02     READ  DECBIN,DI,DCBIN,*+12,'S'
,  'S',(7)                         00000130         WAIT  ECB=DECBIN
                                   00000140         TM    DECBIN+1,X'04'    Q. E
OD                                 00000150         BNZ   ML05
YES                                  00000160         CHECK DECBIN
  NO                                 00000170ML02A    L     13,SAVEAREA+4   *RES
TORE                                 00000180         LM    14,12,12(13)    * HI
S REGISTERS                            00000190         LA    14,12(0,14)     *
BUMP 14 TO BYPASS PARMS                00000200         BR    14             *
     USER                              00000210ML03     MVC   DECBIN+12,0(14)
  MOVE IN AREA ADR                     0000022  0         OPEN  (DCBIN)
                                         00000230         MVI   ML01+1,X'00'
  NOP  1ST TIME SWITCH                   00000240         B     ML02A
                                         00000250* EOF EXIT
                                           00000260ML05     L     13,SAVEAREA+4
                                           00000270         LM    14,12,12(13)
                                           00000280         LA    15,0(0,0)
                                             00000290         BR    14
                                             00000300SAVEAREA DC    18F'0'
                                             00000310RECAREA  DS    CL900
           Q                                   00000320DCBIN    DCB   DDNAME=INP
3,DSORG=DA,MACRF=RCI,RECFM=F                   00000330         END
                                               00000340     *             *
 RRIN1DKN  CSECT                                                         0000001
0*  THIS MODULE IS CALLED BY GEN PROGRAM                                 0000002
0*   TO READ DA DATA SETS / TYPE = DI  (DATA AND KEY)                    0000003
0           SAVE  (2,12),T,*                                               00000
040         BALR  11,0                                                     00000
050         USING *,11                                                     00000
060         ST      13,SAVEAREA+4                                            000
00070         LR    4,13                                                     000
00080         LA    13,SAVEAREA                                              000
00090         ST         13,8(4)                                               0
0000100ML01     B     ML03         1ST TIME SWITCH                             0
0000110         MVC   DECBIN+29(1),4(14)   PUT APPRO REG FOR BLK ADR           0
0000120         MVC   ML03A+2(2),6(14)  * MOVE   KEY ADR TO NEXT INST
 00000130ML03A    LA    14,*+0            * CONV BASE/DISP TO ACTUAL ADR
 00000140         ST    14,DECBIN+20   * STORE ACTUAL ADR IN READ MACRO
 00000150         LA    13,SAVEAREA       * POINT 13 BACK TO M  Y SAVEAREA
   00000160ML02     READ  DECBIN,DK,DCBIN,*+12,'S',*+20,(7)
   00000170         WAIT  ECB=DECBIN
   00000180         TM    DECBIN+1,X'80'   Q.  RECORD NOT FOUND
     00000190         BZ    CHECK                NO
     00000200         L     6,HOLD
     00000210         MVC   0(6,6),NOHIT         MOVE 'NOHIT' TO AREA
     0000022  0         B     ML02A                GO BACK
       00000230CHECK    CHECK DECBIN                NO
       00000240ML02A    L     13,SAVEAREA+4  * RELOAD
       00000250         LM      14,12,12(13)     *  AND
         00000260         LA    15,0(0,0)      *     RETURN
         00000270         LA    14,12(0,14)    *      TO
         00000280         BR    14               *       USER
           00000290ML03     MVC   DECBIN+12(4),0(14)  MOVE AREA ADR TO READ INST
           00000300         MVC   ML04+2(2),4(14)   MOVE REC AREA ADR TO LOAD AD
R INST.    00000310         MVC   HOLD,DECBIN+12
             00000320ML04     LA    2,*+0             CONVERT TO ACT ADR.
             00000330         ST    2,DECBIN+24     STORE BLK ADR FOR READ
             00000340         OPEN  (DCBIN)
               00000350         MVI   ML01+1,X'00'      NOP  1ST TIME SWITCH
               00000360         B     ML02A
               00000370* EOF EXIT
       +         00000380ML05     L     13,SAVEAREA+4
                   00000390         LM    14,12,12(13)
                   00000400         LA    15,0(0,0)
                   00000410         BR    14
                   0  0000420SAVEAREA DC    18F'0'
                     00000430HOLD     DS    CL4
                     00000440NOHIT    DC    CL8'NOHIT '
                     00000450DCBIN      DCB   DDNAME=INP3,DSORG=DA,MACRF=RCK,REC
FM=F                   00000460         END
                       00000470 {     *             *      RRINP3IS  CSECT
                                                   00000010*  THIS  MODULE  IS C
ALLED BY THE GENERATOR PROGRAM                     00000020*         TO HANDLE R
EAD INP1  / ONLY DIFF BETWEEN INP1 2 & 3 ARE       00000030*            REG USED
 FOR REC AREA AND DDNAME IN DCB                      00000040         SAVE  (2,1
2),T,*                                               00000050         BALR  12,0
                                                     00000060         USING   *,
12                                                     00000070         ST    13
,SAVEAREA+4                                            00000080         LR    4,
13                                                     00000090         LA    13
,SAVEAREA                                                00000100         ST
13,8(4)                                                  00000110ML01     B
ML03             1ST SWITCH                              00000120ML02     GET
DCBIN,RECAREA                                              00000130         LA
  9,RECAREA      LOAD 7 WITH REC AREA ADR                  00000140ML02A    L
  13,SAVEAREA+4  RELOAD HIS REGS                           00000150         LM
  14,8,12(13)    BYPASS LOADING 9  SINCE   IT IS             00000160         LM
    10,12,60(13)    ASSIGN TO HIS INP1 REC AREA              00000170         LA
    15,0(0,0)      SET RETURN CODE TO 0                      00000180         LA
    14,12(0,14)    BUMP 14 BY 12 TO RETURN TO ADD TO RE  C CT  00000190
BR    14                                                       00000200ML03
OPEN  (DCBIN)                                                  00000210
MVI   ML01+1,X'00'   NOP 1ST TIME SWITCH                       0000022  0
  B     ML02A                                                    00000230ML04
  L     13,SAVEAREA+4                                            00000240
  LM    14,12,12(13)                                             00000250
  LA      15,0(0,0)                                                00000260
    BR    14                                                       00000270SAVEA
REA DC    18F'0'                                                   00000280RECAR
EA  DS    CL900     V                                                00000290DCB
IN    DCB   DDNAME=INP3,DSORG=IS,MACRF=GM,EODAD=ML04                 00000300
      END                                                            00000310
  *             *      RRIN1ISR  CSECT
               00000010*  THIS  MODULE  IS CALLED BY THE GENERATOR PROGRAM
               00000020*                TO HANDLE READ OF ISAM DATA SETS  (BISAM
)              00000030           SAVE  (2,12),T,*
                 00000040         BALR  11,0
                 00000050         USING *,11
                 00000060         ST      13,SAVEAREA+4
                   00000070         LR    4,13
                   00000080         LA    13,SAVEAREA
                   00000090         ST    13,8(4)
                     00000100ML01     B     ML03             1ST SWITCH
                     00000110         L     13,SAVEAREA+4      *
                     00000120         L     14,12(13)          *
                       00000130         LA    14,6(0,14)         * POINT 14 TO K
EY ADR (BASE DISP)     00000140         MVC   ML03A+2(2),0(14)   * MOVE KEY ADR
TO NEXT INST           00000150ML03A    LA    14,*+0             * CONV BASE DIS
P TO   ACTUAL            00000160         ST    14,ML02+24         * STORE ACTUA
L KEY ADR IN READ MACRO  00000170         LA    13,SAVEAREA        * POIMT 13 BA
CK TO MY SAVEAREA        00000180ML02     READ  DECBIN,K,DCBIN,'S','S',*+0
                           00000190         WAIT  ECB=DECBIN
                           00000200         TM    DECBIN+24,X'80'     Q.  REC NO
T FOUND                    00000210         BZ    CHECK                  NO - IS
SUE CHECK                  0000022  0         LA    7,NOHIT                LOAD
7 WITH ADR OF NO HIT MSG     00000230         B     ML02A                  RETUR
N TO PROG                    00000240CHECK    CHECK DECBIN,DSORG=IS
                             00000250         L       7,DECBIN+16         POINT
REG 7 TO RECORD                00000260ML02A    L     13,SAVEAREA+4  RELOAD HIS
REGS                           00000270         LM    14,6,12(13)    BYPASS LOAD
ING 7  SINCE IT IS             00000280         LM    8,12,52(13  )     ASSIGN T
O HIS INP1 REC AREA              00000290         LA    15,0(0,0)      SET RETUR
N CODE TO 0                      00000300         LA    14,12(0,14)    BUMP 14 B
Y 12 TO RETURN TO ADD TO REC CT  00000310         BR    14
                                   00000320ML03     OPEN  (DCBIN)
                                   00000330         MVI   ML01+1,X'00'   NOP 1ST
 TIME SWITCH                       00000340         B     ML02A
                                     00000350ML04     L     13,SAVEAREA+4
                                     00000360         LM    14,12,12(13)
                                     00000370         LA    15,0(0,0)
                             +         00000380         BR    14
                                         00000390SAVEAREA DC    18F'0'
                                         00000400DCBIN    DCB   DDNAME=INP1,DSOR
G=IS,MACRF=RSC,EODAD=ML04                00000410NOHIT    DC    CL6'NOHIT '
                                         0  0000420         END
                                           00000430 {     *             *      R
RIN2ISR  CSECT                                                         00000010*
  THIS  MODULE  IS CALLED BY THE GENERATOR PROGRAM                     00000020*
                TO HANDLE READ OF ISAM DATA SETS  (BISAM)              00000030
          SAVE  (2,12),T,*                                               0000004
0         BALR  11,0                                                     0000005
0         USING *,11                                                     0000006
0         ST      13,SAVEAREA+4                                            00000
070         LR    4,13                                                     00000
080         LA    13,SAVEAREA                                              00000
090         ST    13,8(4)                                                    000
00100ML01     B     ML03             1ST SWITCH                              000
00110         L     13,SAVEAREA+4      *                                     000
00120         L     14,12(13)          *                                       0
0000130         LA    14,6(0,14)         * POINT 14 TO KEY ADR (BASE DISP)     0
0000140         MVC   ML03A+2(2),0(14)   * MOVE KEY ADR TO NEXT INST           0
0000150ML03A    LA    14,*+0             * CONV BASE DISP TO   ACTUAL
 00000160         ST    14,ML02+24         * STORE ACTUAL KEY ADR IN READ MACRO
 00000170         LA    13,SAVEAREA        * POIMT 13 BACK TO MY SAVEAREA
 00000180ML02     READ  DECBIN,K,DCBIN,'S','S',*+0
   00000190         WAIT  ECB=DECBIN
   00000200         TM    DECBIN+24,X'80'     Q.  REC NOT FOUND
   00000210         BZ    CHECK                  NO - ISSUE CHECK
   0000022  0         LA    8,NOHIT                LOAD 7 WITH ADR OF NO HIT MSG
     00000230         B     ML02A                  RETURN TO PROG
     00000240CHECK    CHECK DECBIN,DSORG=IS
     00000250         L       8,DECBIN+16         POINT REG 8 TO RECORD
       00000260ML02A    L     13,SAVEAREA+4  RELOAD HIS REGS
       00000270         LM    14,7,12(13)    BYPASS LOADING 7  SINCE IT IS
       00000280         LM    9,12,56(13  )     ASSIGN TO HIS INP1 REC AREA
         00000290         LA    15,0(0,0)      SET RETURN CODE TO 0
         00000300         LA    14,12(0,14)    BUMP 14 BY 12 TO RETURN TO ADD TO
 REC CT  00000310         BR    14
           00000320ML03     OPEN  (DCBIN)
           00000330         MVI   ML01+1,X'00'   NOP 1ST TIME SWITCH
           00000340         B     ML02A
             00000350ML04     L     13,SAVEAREA+4
             00000360         LM    14,12,12(13)
             00000370         LA    15,0(0,0)
     +         00000380         BR    14
                 00000390SAVEAREA DC    18F'0'
                 00000400DCBIN    DCB   DDNAME=INP2,DSORG=IS,MACRF=RSC,EODAD=ML0
4                00000410NOHIT    DC    CL6'NOHIT '
                 0  0000420         END
                   00000430 {     *             *      RRIN3ISR  CSECT
                                               00000010*  THIS  MODULE  IS CALLE
D BY THE GENERATOR PROGRAM                     00000020*                TO HANDL
E READ OF ISAM DATA SETS  (BISAM)              00000030           SAVE  (2,12),T
,*                                               00000040         BALR  11,0
                                                 00000050         USING *,11
                                                 00000060         ST      13,SAV
EAREA+4                                            00000070         LR    4,13
                                                   00000080         LA    13,SAV
EAREA                                              00000090         ST    13,8(4
)                                                    00000100ML01     B     ML03
             1ST SWITCH                              00000110         L     13,S
AVEAREA+4      *                                     00000120         L     14,1
2(13)          *                                       00000130         LA    14
,6(0,14)         * POINT 14 TO KEY ADR (BASE DISP)     00000140         MVC   ML
03A+2(2),0(14)   * MOVE KEY ADR TO NEXT INST           00000150ML03A    LA    14
,*+0             * CONV BASE DISP TO   ACTUAL            00000160         ST
14,ML02+24         * STORE ACTUAL KEY ADR IN READ MACRO  00000170         LA
13,SAVEAREA        * POIMT 13 BACK TO MY SAVEAREA        00000180ML02     READ
DECBIN,K,DCBIN,'S','S',*+0                                 00000190         WAIT
  ECB=DECBIN                                               00000200         TM
  DECBIN+24,X'80'     Q.  REC NOT FOUND                    00000210         BZ
  CHECK                  NO - ISSUE CHECK                  0000022  0         LA
    9,NOHIT                LOAD 7 WITH ADR OF NO HIT MSG     00000230         B
    ML02A                  RETURN TO PROG                    00000240CHECK    CH
ECK DECBIN,DSORG=IS                                          00000250         L
      9,DECBIN+16         POINT REG 9 TO RECORD                00000260ML02A
L     13,SAVEAREA+4  RELOAD HIS REGS                           00000270
LM    14,8,12(13)    BYPASS LOADING 8  SINCE IT IS             00000280
LM    10,12,60(1  3)    ASSIGN TO HIS INP1 REC AREA              00000290
  LA    15,0(0,0)      SET RETURN CODE TO 0                      00000300
  LA    14,12(0,14)    BUMP 14 BY 12 TO RETURN TO ADD TO REC CT  00000310
  BR    14                                                         00000320ML03
    OPEN  (DCBIN)                                                  00000330
    MVI   ML01+1,X'00'   NOP 1ST TIME SWITCH                       00000340
    B     ML02A                                                      00000350ML0
4     L     13,SAVEAREA+4                                            00000360
      LM    14,12,12(13)                                             00000370
      LA    15,0(0,0)                                        +         00000380
        BR    14                                                         0000039
0SAVEAREA DC    18F'0'                                                   0000040
0DCBIN    DCB   DDNAME=INP3,DSORG=IS,MACRF=RSC,EODAD=ML04                0000041
0NOHIT    DC    CL6'NOHIT '                                              0  0000
420         END                                                            00000
430 {     *             *      OUT1IS    CSECT
                       00000010*  THIS IS A MOD THAT IS LOADED BY THE PROGRAM GE
NERATOR                00000020*   TO HANDLE  THE WRITES TO OUT1  REC AREA = REG
 10                    00000030*
                         00000040         SAVE  (2,12),T,*
                         00000050         BALR  12,0
                         00000060         USING   *,12
                           00000070         ST    13,SAVEAREA+4
                           00000080         LA    13,SAVEAREA
                           00000090ML01     B     ML03                 SW TO BRA
NCH TO OPEN FIRST TIME       00000100ML02     PUT   DCBOT,*+0         WRITE
                             00000110ML02A    L     13,SAVEAREA+4      RELOAD HI
S                            00000120         LM    14,12,12(13)               R
EGS                            00000130         LA    15,0(0,0)          SET RET
URN CODE TO 0                  00000140         LA    14,12(0,14)        BUMP 14
 BY 12 TO RETURN TO ADD        00000150         BR    14
                                 00000160ML03     OPEN  (DCBOT,(OUTPUT))
                                 00000170         MVI   ML01+1,X'00'       NOP M
L01                              00000180         LA    11,4(0,14)        14+4 P
OINTS TO ADR OF RECORD AREA        00000190         MVC   ML02+6(2),0(11)   PUT
REC AREA ADR IN PUT MACRO          00000200         B     ML02A
                                   00000210SAVEAREA DC    18F'0'
                                   0000022  0         DC    CL2'  '
                                     00000230RECAREA  DS    CL900
                                     00000240DCBOT    DCB   DDNAME=OUT1,DSORG=IS
,MACRF=PM                            00000250         END
                                       00000260     *             *      OUT1IS
   CSECT                                                         00000010*  THIS
 IS A MOD THAT IS LOADED BY THE PROGRAM GENERATOR                00000020*   TO
HANDLE  THE WRITES TO OUT1  REC AREA = REG 10                    00000030*
                                                                   00000040
    SAVE  (2,12),T,*                                               00000050
    BALR  12,0                                                     00000060
    USING   *,12                                                     00000070
      ST    13,SAVEAREA+4                                            00000080
      LA    13,SAVEAREA                                              00000090ML0
1     B     ML03                 SW TO BRANCH TO OPEN FIRST TIME       00000100M
L02     PUT   DCBOT,*+0         WRITE                                  00000110M
L02A    L     13,SAVEAREA+4      RELOAD HIS                            00000120
        LM    14,12,12(13)               REGS                            0000013
0         LA    15,0(0,0)          SET RETURN CODE TO 0                  0000014
0         LA    14,12(0,14)        BUMP 14 BY 12 TO RETURN TO ADD        0000015
0         BR    14                                                         00000
160ML03     OPEN  (DCBOT,(OUTPUT))                                         00000
170         MVI   ML01+1,X'00'       NOP ML01                              00000
180         LA    11,4(0,14)        14+4 POINTS TO ADR OF RECORD AREA        000
00190         MVC   ML02+6(2),0(11)   PUT REC AREA ADR IN PUT MACRO          000
00200         B     ML02A                                                    000
00210SAVEAREA DC    18F'0'                                                   000
0022  0         DC    CL2'  '                                                  0
0000230RECAREA  DS    CL900                                                    0
0000240DCBOT    DCB   DDNAME=OUT2,DSORG=IS,MACRF=PM                            0
0000250         END
 00000260     *             *     }OUT1MOD   CSECT
                           00000010*  THIS IS A MOD THAT IS LOADED BY THE PROGRA
M GENERATOR                00000020*   TO HANDLE  THE WRITES TO OUT1  REC AREA =
 REG 10                    00000030*
                             00000040         SAVE  (2,12),T,*
                             00000050         BALR  12,0
                             00000060         USING   *,12
                               00000070         ST    13,SAVEAREA+4
                               00000080         LA    13,SAVEAREA
                               00000090ML01     B     ML03                 SW TO
 BRANCH TO OPEN FIRST TIME       00000100ML02     PUT   DCBOT,*+0         WRITE
                                 00000110ML02A    L     13,SAVEAREA+4      RELOA
D HIS                            00000120         LM    14,12,12(13)
   REGS                            00000130         LA    15,0(0,0)          SET
 RETURN CODE TO 0                  00000140         LA    14,12(0,14)        BUM
P 14 BY 12 TO RETURN TO ADD        00000150         BR    14
                                     00000160ML03     OPEN  (DCBOT,(OUTPUT))
                                     00000170         MVI   ML01+1,X'00'       N
OP ML01                              00000180         LA    11,4(0,14)        14
+4 POINTS TO ADR OF RECORD AREA        00000190         MVC   ML02+6(2),0(11)
PUT REC AREA ADR IN PUT MACRO          00000200         B     ML02A
                                       00000210SAVEAREA DC    18F'0'
                                       0000022  0         DC    CL2'  '
                                         00000230DCBOT    DCB   DDNAME=OUT3,DSOR
G=IS,MACRF=PM                            00000240         END
                                         00000250     *             *     }OUT1D
A    CSECT                                                         00000010*  TH
IS IS A MOD THAT IS LOADED BY THE PROGRAM GENERATOR                00000020*   T
O HANDLE  THE WRITES TO OUT1  REC AREA = REG 10                    00000030*
                                                                     00000040
      SAVE  (2,12),T,*                                               00000050
      BALR  11,0                                                     00000060
      USING   *,11                                                     00000070
        ST    13,SAVEAREA+4                                            00000080
        LA    13,SAVEAREA                                              00000090M
L01     B     ML03                 SW TO BRANCH TO OPEN FIRST TIME       0000010
0ML02     WRITE DECBOUT,SF,DCBOUT,*+0,'S'                                0000011
0         CHECK DECBOUT                                                  0000012
0ML02A    L     13,SAVEAREA+4      RELOAD   HIS                            00000
130         LM    14,12,12(13)             REGS                            00000
140         LA    15,0(0,0)          SET RETURN CODE TO 0                  00000
150         LA    14,12(0,14)        BUMP 14 BY 12 TO RE  TURN TO ADD        000
00160         BR    14                                                       000
00170ML03     OPEN  (DCBOUT,(OUTPUT))                                        000
00180         MVI   ML01+1,X'00'       NOP ML01                                0
0000190         MVC   ML02+16(4),0(14)  PUT AREA ARD IN WRITEH MACRO           0
0000200         B     ML02A                                                    0
0000210SAVEAREA DC    18F'0'                                                   0
000022  0DCBOUT   DCB   DDNAME=OUT1,DSORG=PS,MACRF=(WL),DEVD=DA
 00000230         DC    CL2'  '
 00000240         END
 00000250     *             *     }OUT1MOD   CSECT
                           00000010*  THIS IS A MOD THAT IS LOADED BY THE PROGRA
M GENERATOR                00000020*   TO HANDLE  THE WRITES TO OUT1  REC AREA =
 REG 10                    00000030*
                             00000040         SAVE  (2,12),T,*
                             00000050         BALR  12,0
                             00000060         USING   *,12
                               00000070         ST    13,SAVEAREA+4
                               00000080         LA    13,SAVEAREA
                               00000090ML01     B     ML03                 SW TO
 BRANCH TO OPEN FIRST TIME       00000100ML02     PUT   DCBOT,*+0         WRITE
                                 00000110ML02A    L     13,SAVEAREA+4      RELOA
D HIS                            00000120         LM    14,12,12(13)
   REGS                            00000130         LA    15,0(0,0)          SET
 RETURN CODE TO 0                  00000140         LA    14,12(0,14)        BUM
P 14 BY 12 TO RETURN TO ADD        00000150         BR    14
                                     00000160ML03     OPEN  (DCBOT,(OUTPUT))
                                     00000170         MVI   ML01+1,X'00'       N
OP ML01                              00000180         LA    11,4(0,14)        14
+4 POINTS TO ADR OF RECORD AREA        00000190         MVC   ML02+6(2),0(11)
PUT REC AREA ADR IN PUT MACRO          00000200         B     ML02A
                                       00000210SAVEAREA DC    18F'0'
                                       0000022  0         DC    CL2'  '
                                         00000230DCBOT    DCB   DDNAME=OUT1,DSOR
G=PS,MACRF=PM                            00000240         END
                                         00000250     *             *     }OUT1D
A    CSECT                                                         00000010*  TH
IS IS A MOD THAT IS LOADED BY THE PROGRAM GENERATOR                00000020*   T
O HANDLE  THE WRITES TO OUT1  REC AREA = REG 10                    00000030*
                                                                     00000040
      SAVE  (2,12),T,*                                               00000050
      BALR  11,0                                                     00000060
      USING   *,11                                                     00000070
        ST    13,SAVEAREA+4                                            00000080
        LA    13,SAVEAREA                                              00000090M
L01     B     ML03                 SW TO BRANCH TO OPEN FIRST TIME       0000010
0ML02     WRITE DECBOUT,SF,DCBOUT,*+0,'S'                                0000011
0         CHECK DECBOUT                                                  0000012
0ML02A    L     13,SAVEAREA+4      RELOAD   HIS                            00000
130         LM    14,12,12(13)             REGS                            00000
140         LA    15,0(0,0)          SET RETURN CODE TO 0                  00000
150         LA    14,12(0,14)        BUMP 14 BY 12 TO RE  TURN TO ADD        000
00160         BR    14                                                       000
00170ML03     OPEN  (DCBOUT,(OUTPUT))                                        000
00180         MVI   ML01+1,X'00'       NOP ML01                                0
0000190         MVC   ML02+16(4),0(14)  PUT AREA ARD IN WRITEH MACRO           0
0000200         B     ML02A                                                    0
0000210SAVEAREA DC    18F'0'                                                   0
000022  0DCBOUT   DCB   DDNAME=OUT2,DSORG=PS,MACRF=(WL),DEVD=DA
 00000230         DC    CL2'  '
 00000240         END
 00000250     *             *      OUT1IS    CSECT
                           00000010*  THIS IS A MOD THAT IS LOADED BY THE PROGRA
M GENERATOR                00000020*   TO HANDLE  THE WRITES TO OUT1  REC AREA =
 REG 10                    00000030*
                             00000040         SAVE  (2,12),T,*
                             00000050         BALR  12,0
                             00000060         USING   *,12
                               00000070         ST    13,SAVEAREA+4
                               00000080         LA    13,SAVEAREA
                               00000090ML01     B     ML03                 SW TO
 BRANCH TO OPEN FIRST TIME       00000100ML02     PUT   DCBOT,*+0         WRITE
                                 00000110ML02A    L     13,SAVEAREA+4      RELOA
D HIS                            00000120         LM    14,12,12(13)
   REGS                            00000130         LA    15,0(0,0)          SET
 RETURN CODE TO 0                  00000140         LA    14,12(0,14)        BUM
P 14 BY 12 TO RETURN TO ADD        00000150         BR    14
                                     00000160ML03     OPEN  (DCBOT,(OUTPUT))
                                     00000170         MVI   ML01+1,X'00'       N
OP ML01                              00000180         LA    11,4(0,14)        14
+4 POINTS TO ADR OF RECORD AREA        00000190         MVC   ML02+6(2),0(11)
PUT REC AREA ADR IN PUT MACRO          00000200         B     ML02A
                                       00000210SAVEAREA DC    18F'0'
                                       0000022  0         DC    CL2'  '
                                         00000230RECAREA  DS    CL900
                                         00000240DCBOT    DCB   DDNAME=OUT2,DSOR
G=PS,MACRF=PM                            00000250         END
                                           00000260     *             *     }OUT
1DA    CSECT                                                         00000010*
THIS IS A MOD THAT IS LOADED BY THE PROGRAM GENERATOR                00000020*
 TO HANDLE  THE WRITES TO OUT1  REC AREA = REG 10                    00000030*
                                                                       00000040
        SAVE  (2,12),T,*                                               00000050
        BALR  11,0                                                     00000060
        USING   *,11                                                     0000007
0         ST    13,SAVEAREA+4                                            0000008
0         LA    13,SAVEAREA                                              0000009
0ML01     B     ML03                 SW TO BRANCH TO OPEN FIRST TIME       00000
100ML02     WRITE DECBOUT,SF,DCBOUT,*+0,'S'                                00000
110         CHECK DECBOUT                                                  00000
120ML02A    L     13,SAVEAREA+4      RELOAD   HIS                            000
00130         LM    14,12,12(13)             REGS                            000
00140         LA    15,0(0,0)          SET RETURN CODE TO 0                  000
00150         LA    14,12(0,14)        BUMP 14 BY 12 TO RE  TURN TO ADD        0
0000160         BR    14                                                       0
0000170ML03     OPEN  (DCBOUT,(OUTPUT))                                        0
0000180         MVI   ML01+1,X'00'       NOP ML01
 00000190         MVC   ML02+16(4),0(14)  PUT AREA ARD IN WRITEH MACRO
 00000200         B     ML02A
 00000210SAVEAREA DC    18F'0'
 0000022  0DCBOUT   DCB   DDNAME=OUT3,DSORG=PS,MACRF=(WL),DEVD=DA
   00000230         DC    CL2'  '
   00000240         END
   00000250     *             *     }OUT1MOD   CSECT
                             00000010*  THIS IS A MOD THAT IS LOADED BY THE PROG
RAM GENERATOR                00000020*   TO HANDLE  THE WRITES TO OUT1  REC AREA
 = REG 10                    00000030*
                               00000040         SAVE  (2,12),T,*
                               00000050         BALR  12,0
                               00000060         USING   *,12
                                 00000070         ST    13,SAVEAREA+4
                                 00000080         LA    13,SAVEAREA
                                 00000090ML01     B     ML03                 SW
TO BRANCH TO OPEN FIRST TIME       00000100ML02     PUT   DCBOT,*+0         WRIT
E                                  00000110ML02A    L     13,SAVEAREA+4      REL
OAD HIS                            00000120         LM    14,12,12(13)
     REGS                            00000130         LA    15,0(0,0)          S
ET RETURN CODE TO 0                  00000140         LA    14,12(0,14)        B
UMP 14 BY 12 TO RETURN TO ADD        00000150         BR    14
                                       00000160ML03     OPEN  (DCBOT,(OUTPUT))
                                       00000170         MVI   ML01+1,X'00'
 NOP ML01                              00000180         LA    11,4(0,14)
14+4 POINTS TO ADR OF RECORD AREA        00000190         MVC   ML02+6(2),0(11)
  PUT REC AREA ADR IN PUT MACRO          00000200         B     ML02A
                                         00000210SAVEAREA DC    18F'0'
                                         0000022  0         DC    CL2'  '
                                           00000230DCBOT    DCB   DDNAME=OUT3,DS
ORG=PS,MACRF=PM                            00000240         END
                                           00000250     *             *      RRP
RTMOD  CSECT                                                         00000010* T
HIS MOD IS USED FOR PRINTING WHEN THE PRINT INST                     00000020*
  IS USED IN THE PROGRAM GENERATOR                                   00000030*
                                                                       00000040
        SAVE  (2,12),T,*                                               00000050
        BALR  11,0                                                     00000060
        USING   *,11                                                     0000007
0         ST    13,SAVEAREA+4                                            0000008
0         LA    13,SAVEAREA                                              0000009
0ML01     B     ML03             SWITCH TO OPEN 1 TIME                     00000
100ML02     PUT   DCBPRT,*+0    B-ADR DUMMY/FILLED IN BEFORE OPEN          00000
110         L     13,SAVEAREA+4                                            00000
120         LM    14,12,12(13)    RELOAD HI  S REGS                          000
00130         LA    15,0(0,0)       SET RETURN CODE TO 0                     000
00140         LA    14,2(0,14)      BUMP 14 BY 2 TO RETURN TO ADD INST       000
00150         BR    14                                                         0
0000160ML03     MVC   ML02+6(2),0(14) R14 POINT TO PRT AREA ADR IN-LINE        0
0000170         OPEN  (DCBPRT,(OUTPUT))                                        0
0000180         MVI   ML01+1,X'00'      NOP BRANCH TO OPEN
 00000190         MVC   ML04+2(2),0(14)      PUT PRT REC ADR IN NEXT INST
 00000200ML04     MVI   *+0,X'89'      SET TO DO HSK PAGE CHG
 00000210         B     ML02
 0000022  0DCBPRT   DCB   DDNAME=PRINT,DSORG=PS,MACRF=PM,RECFM=FM,
  C00000230               LRECL=133,BLKSIZE=133
   00000240SAVEAREA DC    18F'0'
   00000250         END
     00000260     *                    *PROCESS SUPRWARN(303)
                                       RRSORT   START
                               00000010         USING *,15
                               00000020           MVC   SAVEX+2(2),FTADR
* SET SAVE EXIT TO FTRTN.        00000030         B     SAVEM
* GO SAVE REGISTERS.             00000040         L     15,42(15)
* EP FROM RELEASE.               00000050         MVC     SAVEX+2(2),RLSEADR
  * SET SAVE EXIT TO RLSERTN.      00000060         B     SAVEM
  * GO SAVE REGISTERS.             00000070         L     15,28(15)
  * EP FROM IN PROC EXIT.          00000080         MVC   SAVEX+2(2),I  STXADR
    * SET SAVE EXIT TO ISTXRTN.      00000090         B     SAVEM
    * GO SAVE REGISTERS.             00000100         L     15,14(15)
    * EP FROM RETURN.                00000110         MVC   SAVEX+2(2),OSTXADR
    *   SET SAVE EXIT TO OSTXRTN.      00000120         B     SAVEM
      * GO SAVE REGISTERS.             00000130EPADR    DC    A(RRSORT)
                                       00000140FTADR    DC    S(FTRTN)
                                         00000150RLSEADR  DC    S(RELEASE)
                                         00000160ISTXADR  DC    S(SORTEM)
                                         00000170OSTXADR  DC    S(RETURN)
                                           00000180SAVEM    SAVE  (14,12)
          * SAVE RRGEN REGS                00000190         BALR  12,0
          *                                00000200         USING *,12
          *                                0000021  0START    LA    11,MYSAVE
            *                                00000220         ST    11,8(13)
            *                                00000230         ST    13,4(11)
            *                                00000240         LR      13,11
              *                                00000250SAVEX    B     FTRTN
                                               00000260* THIS ROUTINE CALLS THE
SORT AND PASSES THE PARAMETER ADDRESS. THIS    00000270*  ROUTINE IS ENTERED WHE
  N THE SORT MACRO IS EXECUTED IN THE COMPILED   00000280*  RRGEN PROGRAM. THE S
ORT RETURNS TO THIS MODULE AT END OF SORT.       00000290*  THIS ROUTINE THEN RE
TURNS TO THE RRGEN PROGRAM AT TGEF.              00000300FTRTN    MVC   LHESCD(4
),0(1)            * MOVE LHE SORT STAT TO PARM.    00000310         MVC   LHEREC
D(4),4(1)         * MOVE LHE REC STAT TO PARM.     00000320         MVC   ADRIN(
4),8(1)           * RRGEN INPUT PROC ADDR TO HOLD. 00000330         MVC   ADROUT
(4),12(1)         * RRGEN OUT   PROC ADDR TO HOLD.   00000340         MVC   RECA
R(4),16(1)          * RECAR ADDR TO HOLD.            00000350         ST    14,A
DREOF               * STORE RETURN ADDR.             00000360* FIND RHE OF SORT
STATEMENT .                                  +         00000370         L     5,
LHESCD                * 5 POINT TO LHE OF S  ORT STAT.   00000380         LA
6,45(5)                 * SET SEARCH LIMIT.              00000390FT01     CLC
0(6,5),=C'FIELDS'       * START OF FIELD PARAMETER?      00000400         BE
FT02                    * YES                            0  0000410         LA
  5,1(5)                  * NO, 5 UP BY 1.                 00000420         CR
  5,6                     * END OF SEARCH?                 00000430         BL
  FT01                    * NO.                            00000440           ST
    6,RHESCD                * YES, BAD SORT STATEMENT.       00000450         B
    FT04                                                     00000460         LA
    5,6(5)                                                   00000470FT02     CL
I   0(5)  ,C' '               * END OF SORT STATEMENT?         00000480
BE    FT03                    * YES                            00000490
LA    5,1(5)                  * NO, 5 UP BY 1                  00000500
B     FT02                      *  GO LOOK AT NEXT POS.          00000510FT03
  ST    5,RHESCD                * RHE SORT STAT TO HOLD.         00000520* FIND
RECORD  SIZE FOR MOVE OF RECORD AND RHE OF RECORD STATEMENT.     00000530FT04
  L     5,LHERECD               * 5 TO   LHE RECORD STATEMENT.     00000540
    LA    6,45(5)                 * SET SEARCH LIMIT.              00000550FT05
    CLC   0(6,5),=C'LENGTH'       * LENGTH PARM?                   00000560
    BE    FT06                    * YES                              00000570
      LA    5,1(5)                  * 5 UP BY 1.                     00000580
      CR    5,6                     * SEARCH LIMIT REACHED?          00000590
      BL    FT05                    * NO, GO CHECK NEXT POS.           00000600
        ST    6,RHERECD               * BAD RECORD STATEMENT           00000610
        B     FT13                                                     00000620F
T06     TRT   7(5,5),NUMTAB           * 5 POS SIZE.                    00000630
          BNZ   FT06A                   * NO, CHECK 4.                   0000064
0         MVC   SIZWK+3(5),7(5)         * YES, MOVE TO WORK.             0000065
0         B     FT08                                                     0000066
0FT06A    TRT   7(  4,5),NUMTAB           * 4 POS SIZE.                    00000
670         BNZ   FT06B                   * NO, CHECK 3.                   00000
680         MVC   SIZWK+4(4),7(5)         * YES, MOVE TO WORK.             00000
690         B     FT08                                                       000
00700FT06B    TRT   7(3,5),NUMTAB           * 3 POS SIZE?                    000
00710         BNZ   FT07                                                     000
00720         MVC   SIZWK+5(3),7(5)         * RE  CORD SIZE TO HOLD AREA.      0
0000730         B     FT08                                                     0
0000740FT07     TRT   7(2,5),NUMTAB           * SIZE 2 POS ?                   0
0000750         BNZ   FT08                    * NO - BUT LET SO+ RT BRING DOWN.
 00000760         MVC   SIZWK+6(2),7(5)         * MOVE 2 POS   SIZE TO HOLD AREA
.  00000770FT08     CLI   0(5),C' '               * END OF RECORD STATEMENT.
   00000780         BE    FT09                    * YES
   00000790         LA    5,1(5)                  * NO, 5 UP BY 1.
     00000800         B     FT08                    * GO LOOK AT NEXT POS.
     00000810FT09     ST 5,RHERECD                  * RHE RECORD STATEMENT TO HO
LD.  00000820         CLC   SIZWK+3(5),=C'00900'    * RECORD GREATER THAN 900 PO
S.   000008  30         BH    FT13
       00000840         PACK  SIZWK(8),SIZWK(8)       * PACK RECORD SIZE.
       00000850         CVB   7,SIZWK                 * RECORD SIZE TO BINARY.
       00000860         LT  R   7,7                     * RECORD SIZE ZERO.
         00000870         BZ    FT13                    * YES. ERROR.
         00000880         LH    5,=H'256'               * 5 = MAX MOVE CNT.
         00000890         LA    6,MOVE1                   * 6 TO 1ST MOVE INS
           00000900         BCTR  7,0                     * REC SIZE DOWN BY 1.
           00000910FT10     CR    5,7                     * REC SIZE LESS THAN 2
56?        00000920         BH    FT11                      * YES.
             00000930         MVI   7(6),X'00'              * NO,SET MOVE SWITCH
.            00000940         SR    7,5                     * REC SIZE DOWN BY 2
56.          00000950         LA    6,10(6)                 * 6 TO NEXT   MOVE I
NS             00000960         B     FT10                    *
               00000970FT11     STC   7,1(6)                  * REMAINDER TO MOV
E INS.         00000980         LA    1,SORTPARM
                 00000990         LINK  EP=SORT,MF=(E,(1))      * GO SORT.
                 00001000FT12     L     14,ADREOF
                 00001010         L     13,MYSAVE+4
                 0000  1020         LM    0,12,20(13)
                   00001030         BR    14
                   00001040FT13     LA    15,11(0)                * SET RETURN C
ODE.               00001050           B     FT12
                     00001060APROCOUT DC    A(PROCOUT)
                     00001070* THIS ROUTINE PASSES A RECORD FROM RRGEN INPUT PRO
CEDURE TO THE SORT.  00001080*  RETURN FROM SORT IS   TO PROCIN.
                       00001090RELEASE  ST    14,ADRIN                * SET RRGE
N RETURN ADDR.         00001100         L     13,SRTSAVE              * GET SORT
 SAVE AREA ADDR.       00001110         L     1,RECAR                   * R1 POI
NTS TO RECORD.           00001120         LM    14,0,12(13)
                         00001130         LM    2,12,28(13)
                         00001140         LA    15,12(0)                * R15 =
R+ ETURN CODE              00001150         BR    14                      * RET
 URN TO SORT.                00001160* THIS ROUTINE GOES TO THE SORT AT END OF I
NPUT PROCEDURE.              00001170*  RETURN FROM SORT IS TO PROCOUT.
                             00001180SORTEM   L     13,SRTSAVE              * GE
T SORT SAVE AR  EA ADDR.       00001190         RETURN (14,12),,RC=8          *
RETURN TO SORT.                00001200* THIS ROUTINE GOES TO THE SORT TO GET AN
OTHER RECORD.                  00001210*  RETURN FROM SORT IS AT PROCOUT
                                 00001220RETURN   ST    14,ADROUT
* SET RRGEN RETURN ADDR.         00001230         L     13,SRTSAVE
* GET SORT SAVE AREA ADDR.       00001240FTSW1    BC    0,RETURN01
* ONE TIME SWITCH.               00001250           MVI   FTSW1+1,X'F0'
  * RESET ONE TIME SWITCH.         00001260         MVI   FTSW2+1,X'00'
  * RESET OUT PROC ONE TIME SW.    00001270         L     5,24(13)
  * GET SORT RECAR ADDR.           00001280         L     5  ,0(5)
                                     00001290         L     15,APROCOUT
                                     00001300         B     MOVEREC
    * GO GET FIRST RECORD.           00001310RETURN01 RETURN (14,12),,RC=4
      * RETURN TO SORT.                00001320         DS    0F
                                       00001330         DC    X'0000'
                                       00001340SRTPARM  DC    XL2'001C'
                                         00001350LHESCD   DC    A(0)
                                         00001360RHESCD   DC    A(0)
                                         00001370LHERECD  DC    A(0)
                                           00001380RHERECD  DC    A(0)
                                           00001390INPROC   DC    A(PROCIN)
                                           00001400OUTPROC  DC    A(PROCOUT)
                                             00001410         DC    XL4'FF00C1D7
'                                            00001420ADRIN    DC    A(0)
                                             00001430ADROUT   DC    A(0)
                                             00001440A  DREOF   DC    A(0)
                                               00001450RECAR    DC    A(0)
                                               00001460SORTPARM DC    X'80'
                                               00001470         DC      AL3(SRTP
ARM)                                             00001480SRTSAVE  DC    A(0)
                                                 00001490MYSAVE   DC    18F'0'
                                                 00001500* THIS ROUTINE IS THE I
NPUT   PROCEDURE FOR THE SORT. THE SORT LINKS TO   00001510*  THIS ROUTINE AND T
HIS ROUTINE BRANCHES TO RRGEN AT TGSI.             00001520         USING *,15
                                                   00001530PROCIN   SAVE  (14,12
)                 *+  SAVE SORT REGS.                00001540         L     12,I
BASE                  * ESTABLISH MYBASE.              00001550         ST    13
,SRTSAVE              * SAVE SORT SAVE AREA ADR.       00001560         L     13
,MYSAVE+4             * GET RRGEN SAVE AREA.           00001570         L     14
,ADRIN                * POINT 14   TO TGSI.              00001580         LM
15,12,16(13)            * RESTORE RRGEN REGS.            00001590         BR
14                      * BRANCH TO TGSI                 00001600IBASE    DC
A(START)                                                   00001610** THIS ROUTI
NE IS THE OUTPUT PROCEDURE FOR THE SORT. THE SORT LINK     00001620**  TO THIS R
OUTINE WHEN IT IS THROUGH SORTING. THIS ROUTINE MOVE A     00001630*   RECORD TO
 RECAR AND BRANCHES TO RRGEN AT TGSO. AT END OF FILE       000  01640*   THIS RO
UTINE BRANCHES BACK TO THE SORT.                             00001650         US
ING *,15                                                     00001660PROCOUT  SA
VE  (14,12)                 * SAVE SORT REGS.                00001670
L     12,OBASE                * ESTABLISH MY BASE.             00001680
ST    13,SRTSAVE              * SAVE SORT SAVE AREA ADR.       00001690
L     5,0(1)                  * 5=RECAR FROM SORT              00001700
LTR   5,5                       * EOF ?                          00001710
  BZ    SRTEOF                  * YES                            00001720FTSW2
  BC    15,PROCX                * FIRST TIME FROM SORT SWITCH.   00001730MOVEREC
  L     6,RECAR                   * GET RRGEN RECAR ADDR.          00001740MOVE1
    MVC   0(256,6),0(5)           * MOVE 1ST PART OF RECORD.       00001750SW1
    BC    15,PROCX                * BRANCH IF NO MORE RECORD.      00001760MOVE2
    MVC   256(256,6),256(5)       * MOVE 2  ND PART OF REC.          00001770SW2
      BC    15,PROCX                * BRANCH IF NO MORE.             00001780MOV
E3    MVC   512(256,6),512(5)       * MOVE 3RD PART OF RECORD.       00001790SW3
      BC    15,PROCX                * BRANCH IF NO MORE.               00001800M
OVE4    MVC   768(132,6),768(5)       * MOVE REST OF REC (MAX 900)     00001810P
ROCX    L     13,MYSAVE+4             * GET RRGEN SAVE AREA ADDR.      00001820
        L     14,ADROUT               * GET TGSO ADDR.                 0  000183
0         LM    15,12,16(13)            * RESTORE RRGEN REGS.            0000184
0         BR    14                      * GO TO TGSO.                    0000185
0SRTEOF   RETURN (14,12),,RC=8          * GO TO SORT.                    0000186
0OBASE      DC    A(START)                                                 00001
870         DS    0D                                                       00001
880SIZWK    DC    CL8'00000000'                                            00001
890NUMTAB   DC    CL24  0' '                                                 000
01900         DC    XL10'00'                                                 000
01910         DC    CL6' '                                                   000
01920         END                                                              0
0001930 {                          //RRGENASM JOB (RCPAC),'SPENCER, AL'
                           00000101//RRGEN    PROC  MEMBER=MISSING,
                           00001700//             INSTLIB='SSO.RRGEN.SOURCE'
                           00001800/  /* INVOKE HIGH LEVEL ASSEMBLER
                             00002000//ASM      EXEC  PGM=ASMA90,REGION=32M,
                             00002100//             PARM=(NORLD,TERM,OBJ,
                             00002200//               'XREF(SHORT,UNREFS),SIZE(M
AX,ABOVE)',                    00002300//             'SYSPARM(RCPAC)')
                               00002400//SYSUT1   DD  UNIT=VIO,SPACE=(4096,(120,
1200),,,ROUND),DCB=BUFNO=1     00002700//SYSLIN   DD  UNIT=VIO,SPA  CE=(TRK,(5,5
)),DISP=(NEW,PASS),              00002801//             DCB=BLKSIZE=3120
                                 00002900//SYSPRINT DD  SYSOUT=*
                                 00003000//SYSTERM  DD  SYSOUT=*
                                   00003100//SYSIN    DD  DISP=SHARE,DSN=&INSTLI
B.(&MEMBER)                        00003200//SYSLIB   DD  DSN=SYS1.MODGEN,DISP=S
HARE                               00003300//         DD  DSN=SYS1.MACLIB,DISP=S
HARE                                 00003400//         DD  DSN=&INSTLIB,DISP=SH
ARE                                  00003500//LKED     EXEC  PGM=IEWL,REGION=32
M,                                   00007800//             COND=(0,LT,ASM),
                                       00007900//             PARM='MAP,NCAL'
                                       00008000//SYSPRINT DD  SYSOUT=*
                                       00008100//SYSLIN   DD  DSN=*.ASM.SYSLIN,D
ISP=(OLD,DELETE)                       0000820  1//SYSLMOD  DD  DISP=SHARE,DSN=S
SO.RRGEN.LOAD(&MEMBER)                   00008301//SYSUT1   DD  UNIT=VIO,SPACE=(
1024,(120,120),,,ROUND),                 00008400//             DCB=BUFNO=1
                                         00008500//         P  END
                                           00008600//RRGEN    EXEC  RRGEN,MEMBER
=RRGEN                                     00008700//RRBINARY EXEC  RRGEN,MEMBER
=RRBINARY                                  00008901//RRDCART  EXEC  RRGEN,ME  MB
ER=RRDCART                                   00009001//RRDINP1  EXEC  RRGEN,MEMB
ER=RRDINP1                                   00009101//RRDINP2  EXEC  RRGEN,MEMB
ER=RRDINP2                                   00009201//RRDINP3  EXEC  RRGEN,MEMB
ER=RRDINP3                                     00009301//RREOJMOT EXEC  RRGEN,ME
MBER=RREOJMOT                                  00009401//RRGENSRT EXEC  RRGEN,ME
MBER=RRGENSRT                                  00009501//RRINP1DI EXEC  RRGEN,ME
MBER=RRINP1DI                                    00010001//RRINP1DK EXEC  RRGEN,
MEMBER=RRINP1DK                                  00020001//RRINP1IS EXEC  RRGEN,
MEMBER=RRINP1IS                                  00030001//RRINP2DI EXEC  RRGEN,
MEMBER=RRINP2DI                          +         00040001//RRINP2DK EXEC  RRGE
N,MEMBER=RRINP2DK                                    00050001//RRINP2IS EXEC  RR
GEN,MEMBER=RRINP2IS                                  00060001//RRINP3DI EXEC  RR
GEN,MEMBER=RRINP3DI                                  00070001//RRINP3DK EXEC  RR
GEN,MEMBER=RRINP3DK                                  0  0080001//RRINP3IS EXEC
RRGEN,MEMBER=RRINP3IS                                  00090001//RRIN1ISR EXEC
RRGEN,MEMBER=RRIN1ISR                                  00100001//RRIN2ISR EXEC
RRGEN,MEMBER=RRIN2ISR                                  00110001//RRIN  3ISR EXEC
  RRGEN,MEMBER=RRIN3ISR                                  00120001//RROT1ISM EXEC
  RRGEN,MEMBER=RROT1ISM                                  00130001//RROT2ISM EXEC
  RRGEN,MEMBER=RROT2ISM                                  00140001//RROT3ISM EXEC
  RR  GEN,MEMBER=RROT3ISM                                  00150001//RROUT1DA EX
EC  RRGEN,MEMBER=RROUT1DA                                  00160001//RROUT1MD EX
EC  RRGEN,MEMBER=RROUT1MD                                  00170001//RROUT2DA EX
EC  RRGEN,MEMBER=RR  OUT2DA                                  00180001//RROUT2MD
EXEC  RRGEN,MEMBER=RROUT2MD                                  00190001//RROUT3DA
EXEC  RRGEN,MEMBER=RROUT3DA                                  00200001//RROUT3MD
EXEC  RRGEN,MEMBER=RROUT3MD                                    00210001//RRPRTMO
T EXEC  RRGEN,MEMBER=RRPRTMOT                                  00220001 {
                 _ GENERAL
 
                   a. RRGEN was developed in the early 1970's at USA RCPAC, St.
Louis, MO          (  SHARE installation code URV).  RRGEN translates program in
structions           and creates IBM System/360 machine instructions in memory b
efore passing        control to them for execution.  The results of most RRGEN i
nstructions          are stored in   the second operand (B-address).  The except
ion to this            is the System Programmer instructions which operate as do
cumented in            the IBM System/360 Principles of Operation.
 
                         b. The program instructions of an RRGEN program usually
 reside in-              stream with other JCL (job control language) statements
 and are                 accessed via the SYSIN DD statement.  Ho  wever, these
instructions can           be also defined as a member of a partitioned data set
 and referenced            using that data set name.
 
                             c. Each RRGEN program must have at least one input
file.  The file can          be defined using either the CARD DD statement or th
e INPx statement(s)          (See paragraph 3.3 below).
 
                               d. There is a PROCedure available which EXECutes
program RRGEN5.                Included in the PROC are the JCL DD statements fo
r STEPLIB,                       SYSUDUMP, SYSOUT, and PRINT.
 
                                 REQUIRED JCL STATEMENTS
                                 STATEMENT                     PURPOSE
                                   (REQ)    JOB                Initiates the job
.                                  (REQ)    EXEC               Specifies the pro
gram name, PGM=RRGENx,                                           where   x is th
e version number.                    (REQ)    SYSOUT DD          Defines a seque
ntial data set used for listing                                  RRGEN instructi
ons and associated generated                                     machine in  str
uctions or error messages.     It                                  also includes
 total number of records read or                                   written for e
ach data set.                           *       INP1/2/3 DD        Defines an in
put data s  et.  This can include a                                  sequential
data set (PS/PDS), an index                                          sequential
data set (IS), or a direct data set                                  (DA).
                         +                  *       CARD DD            Specifies
 input from a card read  er only.
                                              *       NOTE: One of these DDname
statements must be used to specify                          the input data set.
 
                                               (OPT)    OUT1/2/3 DD        Defin
es an output data set.   It can include                                    a seq
uential data set (PS/PDS), an index                                          ind
ex sequential data set (IS), or a direct                                     dat
a set (DA).                                      (OPT)    PRINT DD           Def
ines an output data set being written to a                                     p
rinter.                                            (OPT)    SORTLIB DD         D
efines a data set that contains sort/                                          m
erge program modules.                              (OPT)    SORTWK01 DD        D
efi  nes intermediate storage data sets                       SORTWK02 DD
 used by a sort program.                                      SORTWK03 DD
 
                                                       (REQ)    SYSIN DD
   Defines the instruction data set.  The
   instruction data set normally resides in the
   input stream; however, it can   be defined as a
     member of a partitioned data set.
                                                         EXAMPLE:
                                                           ----+----1----+----2-
---+----3----+----4----+----5                              //STEP01   EXEC  RRGE
N                                                          //OUT1     DD  DSN=DA
RGTE.UES.GTE3101,UNIT=DISK,                                //               DISP
=(,CATLG,DELETE),                                            //             DCB=
(RECFM=FB,LRECL=80,BLKSIZE=6080),                            //             SPAC
E=(TRK,(5,5),RLSE)                                           //CARD      DD *
                                                               .
                                                               input data (80-co
lumn records)                                                  .
                                                                 /*
                                                                 //SYSIN     DD
*                                                                .
                                                                   RRGEN instruc
tions                                                              .
                                                                   /*
                                           +
                                                                       PROCedure
 RRGEN                                                                 a. Below
are the JCL statements contained in the PROC named RRGEN.
                                                                         ----+--
--1----+----2----+----3----+----4----+----5                              //RRGEN
    PROC  RPTNAME='*'                                                    //RRGEN
    EXEC  PGM=RRGEN,REGION=128K                                            //STE
PLIB  DD  DSN=SSO.RRGEN.LOAD.DISP=SHR                                      //SYS
UDUMP DD  SYSOUT=*                                                         //SYS
OUT   DD  SYSOUT=*                                                         //PRI
NT      DD  SYSOUT=&RPTNAME
                                                                             REQ
UIRED FORMAT FOR INSTRUCTIONS                                                a.
There can be five par  ts to an RRGEN instruction.  These five parts are       d
escribed in detail below.  All instructions must contain an Operation.         G
enerally, most RRGEN instructions will require at least an Operation and       a
n Address (Exception: the EXIT instr  uction does not require an address).
 
 (1) Location.  Provides a unique address (tag) to the line of coding
 or indicates a comment statement if an asterisk (*  ) appears in
   column 1.  Valid tags are TG0l thru TG99.  Tags are always coded
   in column 1 thru column 4.    (See example below)
 
     (2) Operation.  This entry is used to designate a programming
     instruction or an I/O macro.  The Operation is always coded in
     column 7 thru column 11.      (See example below)
 
       (3) Size. This entry is used to designate a count for the
       programming instruction appearing in the Operation field.  When
       used, Siz  e is always coded beginning in column 13. (Example
         below)
 
         (4) Address.  This fie  ld is used for A or B addresses of
           programming instructions.  A Address should be coded beginning
           in column 20; B Address should be coded beginning in column 25.
           If A or B addresses contain SELF, c  olumns 34 thru 73 are used for
             the contents of the SELF constant.  If there is a B Address, it mus
t            be preceded by a comma in column 24.  (See example below)
                                                             +
               (5) Constants or Remarks.     Self explanato  ry.
 
                 (6) Sample coding:
 
                    1      2      3        4                   5
                   LOC   OPN   SIZE   ADDRESS       CONSTANT OR REMARKS
                   0        1         2         3         4         5         6
                     123456789012345678901234567890123456789012345678901
0                     * READ AND WRITE CARDS
                     TG01  READ         CARD,EOJ
                             MOVE  80     CD00,J000
                             MOVE  3      SELF,J080     JOE
                             WRITE        OUT1
                             GO             TG01
 
                         AREA ADDRESS
                         Refer to the section in this   chapter which shows the
assigned                   addresses for all available records or work areas.
 
                           STORAGE OF CONSTANT DATA
                             a. Storage of Constant data. There are two storage
areas assigned to            hold constant data: SELF and the Constant Area (pos
itions 0000-1999).
                               b. SELF. The SELF storage area is used by the pro
gram to store                  constants which are used in the execution of the
instruction.
                                        (1) Sample coding.
 
                                 LOC   OPN   SIZE   ADDRESS       CONSTANT OR RE
MARKS                            0          1         2         3         4
    5         6                    1234567890123456789012345678901234567
678901234567890                          CONS  3      0000          000
                                         ADD   3        SELF,0000     001
 
                                           NOTE: The ADD instruction above would
 be read as:                               Add the 3-digit numbe  r stored at ad
dress 0000 to the                            3-digit number stored in the addres
s SELF. The                                  contents of SELF are defined in the
 constant area of                            the same line of code as the instr+
 uction being                                  executed.
 
                                           c. The Constant Area. The Constant Ar
ea from 0000-1999 is initialized to        blanks prior to storage of constant d
ata supplied   via the CONS or XCON          parameters.   Detailed descriptions
 of the CONS and XCON parameters             follow.
 
                                               (1) CONS. This parameter is used
to store character constants.                  No object code is generated.
 
                                                        FORMAT:
                                                        Operation =  CONS
                                                        Size      =  Size of con
stant(Max 40 bytes)                                     A   Address =  LHE addre
ss of area to receive constant                                         (0000-199
9)                                                        CC 34-73  =  Constant
data
                                                            (a) Sample Coding.
 
                                                     LOC   OPN   SIZE   ADDRESS
      C  ONSTANT OR REMARKS                            0        1         2
    3         4         5         6                    12345678901234567
67890123456789012345678901234567890                          CONS  3      0000
        123                                                    CONS  4      0003
          ABCD
                                                         (2) XCONS.    This para
meter is used to store hexadecimal                         constants.   The hexa
decimal digits, (0-9 and A-F), are converted to            one byte per pair of
digits. No object code is generated.
                                                                    FORMAT:
                                                                    Operation  =
  XCONS                                                             Size       =
  Size of constant (max 20 bytes)                                     A Address
 =  LHE address of area to receive
    constant (0000-1999)                                              CC 34-74
 =  Hexadecimal digits
                                                                        (a) Samp
le Coding.
                                                                 LOC   OPN   SIZ
E   ADDRESS      +  CONSTANT OR REMARKS                            0        1
      2           3         4         5         6                    123
2345678901234567890123456789012345678901234567890                          XCONS
 3      1000          F1F2F3                                               XCONS
 4      1003          C1C2C3C4
                                                                       Acceptabl
e Branch Addresses                                                     a. Accept
able addresses are TG0l through TG99, EOJ, an  d SORT, if the            sort ha
s been CALLed. A branch to EOJ will close all files and terminate        the pro
gram.
                                                                           RTCD
(Return Code)                                                              a. Th
e return code can be set or tested by either MOVEing to or                 COMpa
ring against the RTCD field.  The field is initialized to zero. The          max
imum value is 4095.  A size of four (4) should be used when  moving          to
or comparing against the RTCD field.  Appendix B of this Section             con
tains a table which shows standard RRGEN return code meanings.
                                                                               b
. Sample Coding.
                                                                               L
OC   OPN   SIZE   ADDRESS         CONSTANT OR REMARKS
 0        1         2         3         4         5         6
 123456789012345678901234567890123456789012345678901234567890
       MOVE  4      SELF,RTCD     0016
         GO           EOJ
 
   INSTRUCTION SET
 
     a. READ (Sequential). The READ sequential macro instruction obtains the
     next record from a Physical Sequential (PS) or a Partitioned Data   Set
       (PDS).  Transfer of control to B operand will take place when the end of
       the data set is reached.
 
                (1) FORMAT:
                    Operation = READ
                    Size      = blank
                      A Address = ddname (CARD, INP1, INP2 or INP3)
                      B Address = Valid TAG or EOJ
 
                  (2) Sample Coding+ .
 
               LOC   OPN   SIZE   ADDRESS       CONSTANT OR REMARKS
               0        1         2         3         4         5         6
               123456789012345678901234567890123  456789012345678901234567890
                       READ         INP1,TG01
 
 
                   b. READ (Index sequential). The READ index sequential macro i
nstruction         obtains records sequentially or randomly from index sequentia
l data sets.       If a record is not found when processing randomly, the
                     corresponding record area will contain "NOHITb".  It is the
 programmer's        responsibility to check for this condition after each read.
 
                              (1) FORMAT:
                                  Operation = READ
                                  Size      = IS if processing sequentially ISR
if processing                                   randomly
                                    A Address = ddname (INP1, INP2 or INP3)
                                    B Address = Valid TAG or EOJ if processing s
equentially;                                      Key Address if processing rand
omly (SELF not                                    valid).
                                  (2) Sample Coding.
 
                             LOC   OPN   SIZE   ADDRESS       CONSTANT OR REMARK
S                            0        1         2         3         4         5
        6                    12345678901234567890123456789012345678901234  56789
01234567890                          READ  IS     INP1,TG01     NOTE: TG01 = End
 of Data address                     READ  ISR    INP1,0000     NOTE: 0000 = Add
ress of area containing the Key
 
                                 c. READ (Direct). The READ direct macro instruc
tion causes a data block         (max 4000 bytes) to be retrieved from a direct
data set and placed int  o the     Work Area (2000-5999).  The associated Record
 Area (A000, B000, or              C000) must contain the Block Address (Relativ
e track, relative block, or        actual device address - See OS Data Managemen
t Services Guide for               fur  ther details).  The programmer is respon
sible for any de-blocking that is    required, If DI is specified in the Size fi
eld, transfer of control to B operandwill take place if end-of-data is reached.
   If DK is specified, and the       request Key cann+ ot be found, the Work Are
a will contain "NOHITb".
                                                (1) FORMAT:
                                                    Operation = READ
                                                    Size      = DI   specifies t
hat data and a key, if any,                                       are to be read
.   The address of the data                                       block to be re
ad is contained in the Record                                     Area.  If a ke
y   exists, it will precede the data                                block in the
 Work Area. DK specifies that data                                  only is to b
e read and that a key is to be used                                 as the searc
h argument.  The   search for the                                     key starts
 at the block address contained in the                                record are
a.                                                        A Address = ddname (IN
P1, INP2 or INP3)                                           B Address = Valid TA
G or EOJ if DI is specified; Key                                        Address
if DK is specified.
                                                          (2) Sample Coding.
 
                                                   LOC   OPN   SIZE   ADDRESS
    CONSTANT OR REMARKS                            0        1           2
  3         4         5         6                    1234567890123456789
890123456789012345678901234567890                          CONS  3      0000
      000                                            TG01  CVZB  3,3    0000  A0
00      NOTE: Read entire file                               READ  DI     INP1,E
OJ            by relative block                              ADD   3      SELF,0
000     001   address                                        GO           TG01
                                                         *
                                                               READ  DK     INP1
,0000     NOTE: 0000 = Address of                              COM   6      2000
,SELF     NOHIT area conta  ining the key
 
                                                           d. WRITE.  The WRITE
macro is used to place a record into an o  utput             data set.  WRITE ca
n be used to: (1) create a Physical Sequential (PS)          data set, (2) add a
 member to a Partitioned data set (PDS), (3) create an       Direct data set (DA
).
                                                                      (1) FORMAT
:                                                                         Operat
ion   =  WRITE                                                         +    Size
        =  IS if an index sequential data set is to be
             created.
             DA if a direct data set is to be created.
             blank if a sequential or partitioned data set
               is to be created.
A Address   =  ddname (OUT1, OUT2 or OUT3)
B Address   =  not used
                                                                              (2
) NOTE: If a Direct data set is being created, the programmer is              re
sponsible for any blocking that is required (record area does not             ex
ist for DA data sets).  The Work A  rea (2000-5999) is used for the
block area.  If keys are used, the key must start in 2000 followed
by the data block.
 
  (3) Sample Coding.
                                                                           LOC
 OPN   SIZE   ADDRESS       CONSTANT OR REMARKS                              0
      1         2         3         4         5         6                    123
456789012345678901234567890123456789012345678901234567890
   WRITE IS     OUT1
     WRITE DA     OUT2
     WRITE        OUT3
 
 
 e. GO (Unconditional Branch).  This instruction causes an unconditional
 break in the normal sequence of performed instructions.  Control is
 transferred to the specified   TAG.
          (1) FORMAT:
              Operation = GO
              Size      = not used
                A Address = Tag representing the next instruc tion to
                            be executed (TG01 thru TG99, EOJ, or SORT).
                B Address = not used
 
              (2) Sample Coding.
 
         LOC   OPN   SIZE   ADDRESS       CONSTANT OR REMARKS
         0        1         2         3         4         5         6
         123456789012345678901234567890123456789012345678901234567890
                     _       GO           TG01
                             GO           EOJ
 
 
                         f. MOVE. This instruction transfers a specified number
of consecutive           bytes from one area to another area.
                                (1) FOR  MAT:
                                      Operation  =  MOVE
                                      Size       =  Number of bytes (1-900) to b
e transferred.                        A Address  =  Ad  dress of Sending area
                                        B Address  =  Address of Receiving area
 
                                    (2) Sample Coding.
 
                               LOC   OPN   SIZE   ADDRESS       CONSTANT OR REMA
RKS                            0        1         2         3         4
5           6                    123456789012345678901234567890123456789
8901234567890                          MOVE   80    CD00,J000
 
 
                                   g. COM (Compare).    This instruction is used
 to determine the relative         magnitude of two operands of equal length.
                                            (1) FORMAT:
                                                Operation = COM
                                                Size      = Number of bytes (1-2
56) to be compared.                             A   Address = Address of first o
perand                                            B Address = Address of second
operand
                                              (2) Sample Coding.
 
                                         LOC   OPN   SIZE   ADDRESS       CONSTA
NT OR REMARKS                            0        1         2         3
  4         5         6                    12345678901234567890123456789
89012345678901234567890                          COM   3      SELF,A000     JOE
                                                 GE           TG03
 
                                             NOTE:  > indicator set if A > B. (A
 high) < indicator set if A < B. (A          low) = indicator set if A = B. (A e
qual B) = indicator set if A + = B. (A         not equal B)
 
 
                                                 h. Test COMPARE results. This i
nstruction senses the indicators set by            the compare (COM) instruction
 and branches accordingly.
                                                          (1) FORMAT:
                                                                Operation  =  GE
, GH, GL or GNE *                                               Size       =  no
t used                                                          A Address  =  TG
 (tag) to go to if condition is true.                           B Addres  s  =
not used
                                                                  GE (Go Equal)
     go on A = B  (A equal B)                                     GL (Go Low)
     go   on A < B  (A low)                                         GH (Go High)
       go on A > B  (A high)                                        GNE (Go Not
Equal) go on A = B  (A not equal B)
                                                                  (2) Sample Cod
ing.
                                                           LOC   OPN   SIZE   AD
DRESS       CONSTANT OR REMARKS                              0        1
2         3         4         5         6                    12345678901
01234567890123456789012345678901234567890                          COM   3
A000,CD000                                                           GE
  TG02                                                               GNE
  TG01                                                               COM    2
  A100,SELF     00                                                     GH
    TG03                                                               GL
    TG04
 
                                                                   i. ADD. This
instruction performs decimal addition on zoned decimal             operands.  Th
e result is stored in the area originally occupied by the B        operand.  The
 two operands mus  t be equal in length and may not exceed           16 bytes pe
r operand.
 
                                                                              (1
) FORMAT:
  Operation   =  ADD
  Size        =  Number of bytes (1-16) to be a+ dded.
    A Address   =  Address of the Addend (fir  st of the numbers
                     being added)
      B Address   =  Address of the Augend (number added to first
                     number) and Sum (result of addition)
 
    (2) Sample Coding.
                                                                               L
OC   OPN   SIZE   ADDRESS       CONSTANT OR REMARKS                            0
        1         2         3         4         5         6                    1
23456789012345678901234567890123456789012345678901234567890
     ADD     6      SELF,A003     000001
 
 
 j. SUB. This instruction   performs decimal subtraction on zoned decimal
   operands.  The result is stored in the area originally occupied by the B
   operand.  The two operands must be equal in length and may not exceed
    16 bytes per operand.
            (1) FORMAT:
                Operation   =  SUB
                Size        =  Number of bytes (1-16) t  o be subtract ed
                  A Address   =  Address of the Subtrahend (first of the
                                 numbers being subtracted)
                  B Address   =  Address of the Minuend (number added   to
                                   first number) and Difference (result of
                                   subtraction)
                (2) Sample Coding.
 
           LOC   OPN   SIZE   ADDRESS       CONSTANT OR REMARKS
           0        1         2         3         4         5         6
           123456789  012345678901234567890123456789012345678901234567890
                   SUB    5     SELF,CD00     00126
 
 
               k. MPY. (Multiply).  This instruction performs decimal multiplica
tion with      zoned decimal operands.      The product is right-justified in a
30-position    result area (RS00-RS29).
                        (1) FORMAT:
                            Operation   =  MPY
                            Size        =  Number of bytes (1-15)+  in multiplie
r, a comma,                                  number of bytes (1  -15) in multipl
icand.                          A Address    = Address of Multiplier (number use
d to multiply                                  by).
                                B Address    = Address of Multiplicand (number
 being                                           multiplied).
 
                              (2) Sample Coding.
 
                         LOC   OPN   SIZE   ADDRESS       CONSTANT OR REMARKS
                         0        1         2         3         4         5
    6                    123  456789012345678901234567890123456789012345
4567890                          CONS  7      0000          1234567
                                 MPY   2,7    SELF,0000     10
                                 MOVE  9        RS21,P0000
 
                                   NOTE: After execution of this instruction, P0
00=012345670
 
                               l. DVD (Divide).  This instruction performs decim
al division with zoned         decimal operands.  The quotient is right-j  ustif
ied in the first 15 positions of the Result Area (RS00-RS14) and the remainder i
s right-justified in the         last 15 positions of the Result Area (RS15-RS29
).                                      (1) FORMAT:
                                              Operation   =  DVD
                                              Size        =  Number of bytes (1-
15) in divisor, a comma,                                     and number of bytes
 (1-15) in dividend.                            A Address   =  Address of Diviso
r (number used to divide by).                   B Address   =  Address of Divide
nd (number being divided).
                                              (2) Sample Coding.
 
                                       LOC   OPN   SIZE   ADDRESS       CONSTANT
 OR REMARKS                            0        1           2         3
4         5         6                    1234567890123456789012345678901
012345678901234567890                          CONS  5      OUT1          45001
                                               DVD   2,5    SELF,000  0     22
                                                 MOVE  5      RS10,P000
                                                 MOVE  2      RS28,P020
 
   +                                               NOTE: After execution of this
   instruction, P000=02045 P020=11
 
                                               m. PRINT.    The PRINT instructio
n is used to pri  nt a record (ddname            PRINT).
                                                        (1) FORMAT:
                                                               Operation   = PRI
NT                                                               Size        =
not used                                                         A Address   =
SKIP0, SKIP1, SKIP2, SKIP3 or CHANxx                                           (
where xx = Channel Number 01 thru 12)                              B Address   =
  not used
                                                            NOTE:  Spacing takes
 place after printing.
                                                              (2). Sample Coding
.
                                                       LOC   OPN   SIZE   AD  DR
ESS       CONSTANT OR REMARKS                            0        1         2
      3         4         5         6                    123456789012345
4567890123456789012345678901234567890                          PRINT        SKIP
2                                                                PRINT        CH
AN01
 
                                                             n. CALL. The CALL m
acro instruction causes control to be passed to a            specified load modu
le.  The load module containing the program is               brought into main s
torage if a useable copy is not already a  vailable. The       CALL macro also p
rovides, via the USING option, the ability to pass             address parameter
s to the CALLed program.  If the CALLed module sets            the return code b
efore returning, this return code will be available to t  he     user in the RTC
D field. (Refer to RTCD)                                                (1) FORM
AT:                                                                           Op
eration  =  CALL
Size       =  not used
Address    =  aaaaaaaa,USING,bbbb,.....
Where:
aaaaaa  aa =  the name of the program that is being CALLed
              or the name of the entry point in the CALLed
              program.  The name must be padded with
              blanks + to eight bytes, if necessary.
    USING   =   ind  icates that address parameters are to be
            passed to the CALLed program.   bbbb = addresses
            of parameters (max of 8) to be passed to the CALLed
            program.   The address  es must be in either the
              constant storage area (0000-1999) or in Working
              Storage area (2000-5999).
 
    (2) Sample Coding.
                                                                             LOC
   OPN   SIZE   ADDRESS       CONSTANT OR REMARKS                              0
        1         2         3         4         5         6                    1
23456789012345678901234567890123456789012345678901234567890                    T
G01  CALL         GETPMFSQ,USING,0000,0100
       COM   4      RTCD,SELF     0000
       GE           TG02
       COM   4      RTCD,SELF     0002
       GE             TG03
         GO           EOJ
   TG02  MOVE  450    0100,J000
         WRITE        OUT1
           GO           TG01
     TG03  MOVE  4      SELF,RTCD
           GO           EOJ
 
 
       o. ENTER. This instruction permits the execution of   a subroutine and, w
ith      the use of EXIT, returns control to the instruction following the ENTER
.               (1) FORMAT:
                    Operation = ENTER
                      Size      = not used
                      A Address = TG (tag) representing the next instruction to
                                  be executed.
                        B Address = not used
 
 
             p. EXIT. Th  is instruction reverses the actions performed by the E
NTER           instruction and provides the exit from a subroutine.
 
               NOTE: Executing an EXIT + without a previous ENTER will cause
                 termination of the p  rogram with a completion code of 901.
 
                          (1) FORMAT:
                              Operation = EXIT
                                Size      = not used
                                A Address = not used
                                B Address = not used
 
                              (2) Sample Coding.
 
                         LOC   OPN   SIZE   ADDRESS       CONSTANT OR REMARKS
                         0        1         2         3         4         5
    6                    12345678901234567890123456789012345678901234567
67890                            ENTER        TG01
                                 MOVE  2      A000,J000
                                 GO           TG02
                           TG01    READ         INP1,EOF
                                   EXIT
                             TG02  WRITE        OUT1
 
 
                               q. CVBZ   (Convert binary to zoned).  The format
of A operand is changed        from binary to zoned, and the r  esult is placed
in the B operand.                       (1) FORMAT:
                                            Operation  =  CVBZ
                                            Size       =  Number of bytes (1-  4
) in A operand, a comma,                                    and number of bytes
(1-10) in B operand                           A Address  =  Address of Sending a
rea (binary)                                  B Address  =  Address of Receiving
 area (zoned   results)
                                            (2) Sample Coding.
 
                                       LOC   OPN   SIZE   ADDRESS       CONSTANT
 OR REMARKS                            0        1         2         3         4
        5         6                    123456789012345678901234567890123
2345678901234567890                            CVBZ  4,10   A000,0100     After
execution:                               *                                A000 =
 499602D2                                *                                0100 =
 F1F2F3F4F5F6F7F8F9F0                          CVBZ  1,2 +    1000,2000     Afte
r execution:                               *                                  10
00 = 0A                                      *                                20
00 = F1F0
 
                                               r. CVZB (Convert zoned to binary)
.   The format of A operand is changed         from zoned to binary, and the res
ult is placed in the B operand.  The A         operand is assumed to have the zo
ned f  ormat.  All zones are ignored             except the zone over the low-or
der digit.  The largest number that can be       converted is:  2,147,483,647; t
he smallest number is:  - 2,147,483,648.                (1) FORMAT:
                                                                  Operation   =
 CVZB                                                             Size        =
 Number of bytes (1-4) in A operand, a comma,
 and number of bytes (1-10) in B op  erand                          A Address
=  Address of Sending area (zoned)                                  B Address
=  Address of Receiving area (binary results)
                                                              (2) Sample Coding.
 
                                                       LOC   OPN   SIZE   ADDRES
S       CONSTANT OR REMARKS                            0        1           2
      3         4         5         6                    123456789012345
4567890123456789012345678901234567890                          CVZB  10,4   0000
,0100     After execution:                               *
            0000 = F1F2F3F4F5F6F7F8F9F0                    *
            0100 = 499602D2                                      CVZB  2,1    01
00,0200     After execution:                               *
            010  0 = F1F0                                    *
              0200 = 0A
 
                                                               s. PACK. The form
at of the A operand is changed from zoned to packed,           and the result is
 placed in the B operand.  The A operand is assumed to         have the zoned fo
rmat.  All zones are ignored execpt the zone   over              the low-order d
igit.                                                                   (1) FORM
AT:
Operation = PACK
  Size      = Number of bytes (1-16) in A operand, a comma,
              and number of bytes (1-16) in B operand.
  A Address = Address of Sending area (zoned)                              +
    B Address = Address of Receiving area (packed results)
                                                                              (2
) Sample Coding.
                                                                       LOC   OPN
   SIZE     ADDRESS       CONSTANT OR REMARKS                            0
  1         2         3         4         5         6                    1234567
89012345678901234567890123456789012345678901234567890                          P
ACK  5,3    A000,J000       After execution:
                            A000 = F1 F2 F3 F4 F5
                            J000 = 12 34 5F
 PACK  5,4    A000,J000     After exec  ution:
                              A000 = F1 F2 F3 F4 F5
                              J000 = 00 12 34 5F
   PACK  5,2    A000,J000     After execution:
                                A000 = F1 F2 F3 F4 F5
                                J000 = 34 5F
 
 
 t. UNPK (Unpack).    The format of the A operand is changed from packed
 to zoned, and the result is placed in the B operand.
          (1) FORMAT:
                 Operation = UNPK
                 Size      = Number of bytes (1-16) in A operand, a comma,
                               and number of bytes (1-16) in B operand.
                   A Address = Address of Sending area (packed)
                   B Address = Address of Receiving area (zoned results)
 
              (2) Sample Coding.
 
       LOC   OPN   SIZE   ADDRESS       CONSTANT   OR REMARKS
         0        1         2         3         4         5         6
         123456789012345678901234567890123456789012345678901234567890
               UNPK  3,5    J000,A000     After execution:
                                            A000 = 12 34 5F
                                            J000 = F1 F2 F3 F4 F5
                 UNPK  3,6    J000,A000     After execution:
                                              A000 = 12 34 5F
                                              J000 = F0 F1 F2 F3 F4 F5
                   UNPK  3,3    J000,A000     After execution:
                         _                                  A000 = 12 34 5F
                                                            J000 = F3 F4 F5
 
 
                             u. TRANS. (Translate).   This instruction translate
s bytes from one bit         configuration to another by the use of a 256-byte t
ranslate table. The hex      value of each   byte to be translated is added to t
he left hand                   end address of the table to generate the address
within the table that          holds the translated equivalent.
 
                                        (1) FORMAT:
                                               Operation  =  TRANS
                                               Size       =  Number of by  tes (
1-256) to be translated                          A Address  =  Data to be transl
ated and results of translation                  B Address  =  Address of 256-by
te table to be used for                                        translation
                                            (2) Sample Coding.
 
                                     LOC   OPN   SIZE   ADDRESS       CONSTANT O
R REMARKS                              0        1         2         3         4
        5         6                    123456789012345678901234567890123
2345678901234567890                          CONS  1      0064          1
                                               CONS  9      0193          222222
222                                            CONS  9      0209          333333
333                                            CONS  8      0226          444444
444                                            CONS    10     0240          ABCD
EFGHIJ                                           TRANS 21     J000,0000
 
                                           NOTE 1: CONS Area (0000-1  999) is in
itialized to blanks                          prior to storing user constants.
 
                                             NOTE 2: Before execution, J000 = 01
234  56789bbAIJRSZ*$&                          After execution, J000 = ABCDEFGHI
J11223344bbb
                                               INDEXING
                                                 a. There are two index register
s available (INX1 and INX2).  The size of        each register is four positions
. To set or increment an index register, the     programmer must MOVE or ADD a v
alue to either INX1 or INX2.  The+                 index registers may be assign
ed to A or B addresses by suffi  xing the            address with a dash   - and
 either 1 or 2 (see Address field of 4th line of     code below).  The index reg
ister will then be added to the address before       execution.  Numbers used wh
en moving, adding, subtracting, or                     comparing an index regist
er must be four positions in size.
                                                       b. Sample Coding.
 
                                                         LOC   OPN   SIZE   ADDR
ESS       CONSTANT OR REMARKS                            0        1         2
      3         4         5         6                    1234567890123456789  01
234567890123456789012345678901234567890                          CONS  15     00
00          AA1BB2CC3DD4EE5                                      MOVE  4      SE
LF,INX1     0000                                                 MOVE  4      SE
LF,INX2       0000                                           TG01  MOVE  1
0002-1,P000-2                                                      COM   4
INX1,SELF     0012                                                 GE
TG02                                                                 ADD    4
  SELF,INX1     0003                                                 ADD    4
  SELF,INX2     0001                                                 GO
  TG01                                                           TG02  PRINT
    SKIP1                                                              GO
    EOJ
                                                                   Program would
 execute as follows:                                                       Line
1 initializes a constant                                                   Line
2 sets INX1 to zero                                                          Lin
e 3 sets INX2 to zero                                                        Lin
e 4 TG01 - moves data to print area                                          Lin
e 5 checks to see if all data has been moved to print area                   Lin
e 6 go  es to TG02 if all data moved                                           L
ine 7 adds 3 to INX1 if all data not moved                                     L
ine 8 adds 1 to INX2                                                           L
ine 9 goes back to be  ginning of program (MOVE)
 Line 10 TG02 - prints data
 Line 11 ends program
                                                                           NOTE:
 Printed output = "12345"
 
                                                   +                         SOR
T                                                                              a
. General. The RRGENSRT, RELEASE, and RETURN subroutines                       p
rovide the linkage for RRGEN users to sort a file and define procedures        f
or handling these files both before and after they have been sor  ted.  Both
 an Input and Output procedure MUST be coded.  The input and output
 area for the sort is 5000-5999.   The user must branch to the tag SORT to
 initiate the sort after all desired records have been RELEASEd to the Sort.
   Only one sort may be executed within a RRGEN program.  A Region Size
   of approximately 80K will be necessary if SORT is used.  Refer to the
   section on RRGEN examples.
 
     b. RRGENSRT. This subroutine provides the information that controls the
     sort operation.  Control is received following this CALL when the last
     record has been RETURNed   to the user.  The user is responsible for
       checking the return code (RTCD) for successful completion of the sort.
              (1) FORMAT:
                      Operation = CALL
                        Size      = not used
                        Address   = RRGENSRT,USING,aaaa,bbbb,TGcc,TGdd
                Where:
                          aaaa = location of the SORT statement *
                                 within the CONS area.
 
                            bbbb = location of the RECORD statement *
                                   within the CONS area.
                            TGcc = Tag of the user Input procedure.
                              TGdd = Tag of the user Output procedure.
 
                            * NOTE: See OS SORT/MERGE manual for description.
 
                 c. RELEASE. Transfers a record located at 5000 to the input pha
se of the        Sort operation.
                        (1) FORMAT:
                                 Operation = CALL
                                 Size      = not used
                                 Address   = RELEASE
 
                     d. RETURN. Obtains individual records in sorted order from
the final            phase of the sort and moves them to 5000-5999 fo+ r process
ing by the             user.  After the last record has been RETURN  ed, the sor
t passes control         to the instruction following the call of RRGENSRT.
                                (1) FORMAT:
                                       Operation = CALL
                                         Size      = not used
                                         Address   = RETURN
 
 
                             BINARY SEARCH
                             a. General. The binary search subroutine performs a
 logical binary search       of   a table for a specified argument.
 
                               b. When an equal key is found:
                                      (1) Index   Register One (INX1) is set to
the relative address of the             table entry that produced the equal cond
ition.                                  (2) Control is returned to the user foll
owing the CALL instruction              with the 'EQUAL' condi  tion code set.
 
                                   c. When an equal key is NOT found:
                                          (1) Contents of INX1 are unpredicta  b
le.                                         (2) Control is returned to the user
following the CALL instruction              with the 'NOT EQUAL' condition code
set.
                                       d. FORMAT:
                                              Operation = CALL
                                              Size      = not used
                                                Address   = RRBINARY,USING,aaaa,
bbbb,(c,d,e,f)                                         where:
                                                              aaaa = CONS/Workin
g Storage address for the                                              argument
to be searched against the table.                               bbbb = CONS/Work
ing Storage address for the table                                      being sea
rched.
 
                                                                  c = Number of
entries in the table.                                             d = Si  ze of
each entry.                                                         e = Size of
key within the entry (0-255).                                       f = Relative
 position of the key within the entry (first                            position
 = 0, m+ aximum = 255).
                                                   SYSTEM PROGRAMMER INSTRUCTION
S                                                  a. The following instructions
 have been provided for programmers who            are familiar with IBM Assembl
y language.  The for  mat of the instructions        are the same as for the RRG
EN instruction set.  The description of their        operation can be found in t
he IBM Principles of Operation Manual.
                                                       b. Instructions.
                                                              AP   (Add decimal)
         MVN   (Move numerics)                                CP   (Compare deci
mal)     MVO   (Move with offset)                               SP   (Subtract d
ecimal)    MVZ   (Move zones)                                   NC   (Logical AN
D)                                                              OC   (Logical OR
)                                                               X  C   (Logical
Exclusive OR)
                                                           c. Sample Coding.
 
                                                             LOC   OPN   SIZE
ADDRESS       CONSTANT OR REMARKS                            0        1
2         3         4         5         6                    12345678901
012345678901234  56789012345678901234567890                          XCONS 1
  0000          0F                                                   XCONS 1
  1000          F1                                                   NC    1
  0000,1000     LOGICAL AND
                                                                 After execution
:  0000 = Hex 01      e.g. 0000 1111    1st operand
   1000 = Hex F1           1111 0001    2nd o  perand
                             0000 0001    Results in 1st
                                                                   NOTE: Operand
s and Results are as described in the Principle of                          Oper
ations manual.
                                                                     TABLE OF AS
SIGNED RECORD/WORK AREAS ADDRESSES
                                                                            AREA
                     ADDRESS         SIZE                              CARD reco
rd area              CD00-CD79       80                                PRINT rec
ord area               P000-P131       132                               INP1 re
cord area              A000-A899       900                               INP2 re
cord area              B000-B899       900                               INP3 re
cord area              C0+ 00-C899       900                               OUT1
record area                J000-J899       900                               OUT
2 record area              K000-K899       900                               OUT
3 record area              L000-L899       900                               Con
stant Storage area *       0000-1999         2000                              W
ORK AREA **                  2000-5999       4000                              R
esult of Multiply or Divide  RS00-RS29       30                                S
ELF constant storage ***     SELF            1772
 RETURN CODE                   RTCD            4
 INDEX 1                       INX1            4
 INDEX 2                       INX2            4
   JULIAN DATE (YYJJJ) ****      DATE            5
   NUMERIC DATE (YYMMDD) ****    DATE            6
   ALPHA DATE (DD_MMM_YY) ****   DATE            9
 
 
     * NOTE: The Constant Area (0000-1999) is initialized to blanks prior to
     storage of us  er-supplied CONS or XCONS.
 
       ** NOTE: The Work Area (2000-5999) is initialized to blanks.   This area
is     also where the data block   is written from or read into if direct access
 data    sets are being processed.
 
         *** NOTE: This area is used by the prog  ram to store constants which
           appear in an instruction parameter.
 
           **** NOTE: The size determines which date is being a  ddressed.  Tabl
e of         Standard RRGEN Return Codes
 
             TABLE OF STANDARD RRGEN RETURN CODES
 
               Return Code                         Meaning
                  0000             Successful completion (unless changed by user
).                  0008             Parameter errors.
                    0009             EXIT executed without a corresponding ENTER
.                   0010             8096 bytes available for storing user-gener
ated                                   instructions has been exceeded.
                      0011             Sort RECORD statement invalid (length > 9
00 or = 0).
                                           +
                     RRGEN Program Exampl  es
 
                       Example 1 - RRGEN program within a Job JCL stream
 
                         LOC   OPN   SIZE   ADDRESS       CONSTANT OR REMARKS
                         0        1         2         3         4         5
    6                    1234567890123456789012345678901234567890123456  7890123
4567890
                           //MYJOB    JOB
                           //STEP1    EXEC  RRGEN
                             //OUT1     DD  DSN=&&TESTDATA,UNIT=DISK,DISP=(NEW,P
ASS),                        //             DCB=(RECFM=FB,LRECL=85,BLKSIZE=170,
                             //             SPACE=(TRK,(1,1))
                               //CARD     DD  *
                               //SYSIN    DD  *
                                     CONS  5      0000          00001
                               TG01    READ         CARD,EOJ      READ CARD
                                       MOVE  80     CD00,J000     MOVE CARD TO O
UT1 RECORD AREA                        MOVE  5      0000,J080     MOVE COUNT TO
END OF RECORD                          MOVE  85       J000,P000     MOVE OUT1 RE
C TO PRINT AREA                          PRINT        SKIP1         PRINT RECORD
                                         WRITE        OUT1          WRITE OUT1 R
ECORD                                    ADD   5      SELF,0000       00001    A
DD 1 TO COUNT                              GO           TG01          GO TO READ
 NEXT CARD                           //STEP2    EXEC
 
                                       Example 2 - RRGEN program with required J
CL statements
                                       LOC   OPN   SIZE   ADDRESS       CONSTANT
 OR REMARKS                              0        1         2         3
4         5         6                    1234567890123456789012345678901
012345678901234567890
                                           //STEP2    EXEC  RRGEN
                                           //OUT1     DD  DSN=SP-A001,UNIT=DISK,
DISP=(NEW,PASS),                           //             DCB=(RECFM=FB,LRECL=45
0,BLKSIZE=2250),                           //               SPACE=(TRK,(20))
                                             //PMFMAST  DD  DSN=ATENLMAS,DISP=SH
R,VOL=PRIVATE,UNIT=(DISK,1)                  //         DD  DSN=ATOFFMAS,DISP=SH
R,VOL=PRIVATE,UNIT=AFF=PMFMAST               //PMFGAIN  DD  D+ SN=ATEGAINS,DISP=
SHR,VOL=PRIVATE,UNIT=(DISK,1)                  //         D  D  DSN=ATOGRAIN,DIS
P=SHR,VOL=PRIVATE,UNIT=AFF=PMFGAIN               //SYSIN    DD  *
                                                       MOVE  8      SELF,0000
  RCPACGEN USER PASSWORD                               MOVE  7      SELF,0  008
    SW1=NO   NO DELETE RECS                              MOVE  7      SELF,0015
    SW2=YES  WANTS RECS UNPACKED                   TG01  CALL         GETPMFSQ,U
SING,0000,1000,0008,0015                                 COM   4      SELF,RTCD
    0000       Q. NORMAL RETURN?                           GE           TG02
                  YES IF GE IS TAKEN                       COM   4      SELF,RTC
D     0002     Q. END OF DATA?                             GE           EOJ
                  YES IF   GE IS TAKEN                       MOVE  35     SELF,P
000     OUT OF SEQUENCE OR BAD PARM                          PRINT        CHAN01
                                                             GO           EOJ
                                                         TG02  COM   2      1014
,SELF     99  SELECT SSN'S ENDING 99                           GNE          TG01
                                                               MOVE  450    1000
,J000     MOVE TO RECORD AREA                                    WRITE        OU
T1                                                               GO           TG
01
                                                           Example 3   - RRGEN S
ORT subroutine
                                                             LOC   OPN   SIZE
ADDRESS       CONSTANT OR REMARKS                            0        1
2           3         4         5         6                    123456789
8901234567890123456789012345678901234567890
                                                                     NOTE: "SORT
" and "RECORD" stat  ements must be preceded and                             fol
lowed by a space.
                                                                       CONS  24
    0000           SORT FIELDS=(1,  4,CH,A)                              CONS  2
6     0040           RECORD TYPE=A,LENGTH=100                      *1    CALL
      RRGENSRT,USING,0000,0040,TG05,TG09                           *4    COM   4
      RTCD,SELF     0000 CONTROL RECEIVED HERE AF  TER                     GE
        EOJ           THE LAST REC RETURNED                                MOVE
 12     SELF,P000     SORT NO GOOD                                         PRINT
        SKIP1                                                                GO
          EOJ                                                          ***   INP
UT PROCEDURE   ***                                                     *2
                                                                       TG05  RE+
 AD         INP1,SORT     AT EOF GO SORT RELEASE RECORDS
 MOVE  100    A000,5000     MOVE RECORD TO SORT AREA
 CALL         RELEASE       RELEASE RECORD AT 5000 TO SORT
 GO           TG05                                                         ***
 OUTPUT PROC  EDURE   ***                                                    *3
                                                                             TG0
9  CALL         RETURN        ASK SORT FOR A SORTED RECORD
   MOVE  100    5000,P000       MOVE SORTED RECORD TO PRINT AREA
     PRINT        SKIP1         PRINT RECORD
     GO           TG09          GO GET NEXT RECORD
 
 * Execution Sequence
   1 will execute one time
   2 will execute n times ( n = nr of recs RELEASEd)
     3 will execute n times ( n = nr of recs RETURNed)
     4 will execute one time
 
     Example 4 - RRGEN binary search routine
 
     LOC   OPN   SIZE   ADDRESS       CONSTANT OR REMARKS
     0          1         2         3         4         5         6
       123456789012345678901234567890123456789012345678901234567890
             CONS  2      0000          WORK AREA FOR ARGUMENT
             CONS  30       0100          01JAN02FEB03MAR04APR05MAY06JUN
               CONS  30     0130          07JUL08AUG09SEP10OCT11NOV12DEC
         TG01  READ         CARD,EOJ
               MOVE  2      CD05,0000       MOVE NUMERIC MONTH TO ARGUMENT
                 CALL         RRBINARY,USING,0000,0100,(12,5,2,0)
                 GNE          TG02
                 MOVE  3      0102-1,P000   MOVE ALP  HA MONTH TO PRINT AREA
                   PRINT        SKIP1         PRINT ALPHA MONTH
                   GO           TG01
             TG02  MOVE  21     SELF,P000     INVALID NUMERIC MONTH
                     PRINT        SKIP1
                     GO           TG01
 
                 Example 5 - RRGEN PDS directory list
 
                 LOC   OPN   SIZE   ADDRESS       CONSTANT OR REMARKS
                              {0        1         2         3         4
5         6                    12345678901234567890123456789012345678901
01234567890
                               /  /RRGEN    EXEC  PGM=RRGEN
                                 //STEPLIB  DD  DSN=SSO.RRGEN.LOAD,DISP=SHR
                                 //SYSOUT   DD  SYSOUT=*
                                 //SYSUDUMP DD    SYSOUT=*
                                   //PRINT    DD  SYSOUT=*
                                   //INP1     DD  DSN=SYS1.PROCLIB,DISP=SHR,
                                   //             DSORG=PS,REC  FM=F,LRECL=256,B
LKSIZE=256                           //OUT1     DD  SYSOUT=*,DSORG=PS,RECFM=FB,L
RECL=80,BLKSIZE=0                    //SYSIN    DD  *
                                           XCONS 1      0000          1F
  ISOLATE USERDATA LENGTH                    XCONS 1      0001          80
  ISOLATE ALIAS INDICATOR                    XCONS 1      0002          0F
  SIGN HALF BYTE                             XCONS 8      0010          FFFFFFFF
FFFFFFFF  HI  GH VALUES                        CONS  40     0020          MEMBER
     VV.MM CDATE  MDATE  TIME                  CONS  40     0060          SIZE
 INIT  ID       XSIZE     XINIT                XCONS 4      1000          000000
00  USED BYTES                                   XCONS 1      1004          00
      PDS2INDC                                   XCONS 1      1005          00
      PDS2INDC                                   XCONS 1      1006          0F
      SPF STATS                                    XCONS 1      1007          14
        SPF XSTATS                                 CONS  4      1008          00
00                                                 XCONS 3      1012          00
0000    0HHMM0 AFTER MVO                           MOVE    80     0020,J000
HEADER                                               WRITE        OUT1
                                                     MOVE  80     0500,J000
CLEAR OUTPUT                                         WRITE        OUT1
                                                 TG01  READ         INP1,EOJ
  READ DIRECTORY BLOCK                                 CVBZ  2,4    A000,1000
  USED BYTES IN BLOCK                                  MOVE  4      SELF,INX1
  0002    SKIP USED BYTES IN BLOCK                 TG05  COM   4      INX1,1000
    INDEX >= USED?                                       GE           TG01
    YES                                                  GH           TG01
    YES                                                    COM   8      A000-1,0
010   MEMBER NAME = HIGH VALUES?                           GE           EOJ
      YES, DONE                                            MOVE  4      INX1,INX
2     SAVE MEMBER NAME START         +                       ADD   4      SELF,I
NX1     0011  SKIP MEMBER NAME/TTR                             ENTER        TG10
                                                               MOVE  1      A000
-1,1004   PDS2INDC                                             NC    1      1004
,0000     <--- ISOLATE USERDATA LENGTH                           CVBZ  1,4    10
04,1008                                                          ADD   4      SE
LF,INX1     0001  SKIP PDS2INDC                                  ADD   4      10
08,INX1     USERDATA LENGTH IN HALFWORDS                           ADD   4
1008,INX1     *2                                                   GO
TG05                                                         TG10  MOVE  80
0500,J000     CLEAR OUTPUT                                         MOVE  8
  A000-2,J000   PDS2NAME                                             MOVE  1
  A000-1,1005   PDS2INDC                                             NC    1
  1005,0001     <--- ISOLATE ALIAS IDENTIFIER                        COM   1
  1005,0001       ALIAS?                                               GNE
    TG15          NO                                                   MOVE  2
    SELF,J007     -A                                             TG15  MOVE  1
    A000-1,1005   PDS2INDC                                               NC    1
      1005,0000     <--- ISOLATE USERDATA LENGTH                         COM   1
      1005,1006     SPF STATS?                                           GE
      TG20          YES                                                    COM
 1      1005,1007     SPF XSTATS?                                          GE
        TG20          YES                                                  GO
        TG99                                                           TG20  ADD
   4      SELF,INX2     0012  SKIP MEMBER NAME/TTR/INDICATOR                 CVB
Z  1,2    A000-2,J011         ISPVERS                                        MOV
E  1      SELF,J013     .                                                      A
DD   4      SELF,INX2     0001                                                 C
VBZ  1,2    A000-2,J014         ISPMOD                                         A
DD   4      SELF,INX2     0004                                                 U
NPK  3,5      A000-2,J017         ISPCDATE
 ADD   4      SELF,INX2     0004
 UNPK  3,5    A000-2,J024         ISPMDATE
 ADD   4      SELF,INX2       0003
   MOVE  2      A000-2,1013         ISPMTIME
   MVO   3,3    1012,1012     0HHMM0
   OC    1      1014,0002     0HHMMF
     UNPK  3,4    1012,J031     HHMM
     ADD   4      SELF,INX2     0002
     CVBZ  2,5    A000-2,J040         ISPCLINE         +
       ADD   4      SELF,INX2     0002
         CVBZ  2,5    A000-2,J047         ISPILINE
         ADD   4      SELF,INX2     0004
         MOVE  8      A000-2,J053         ISPUSRID
           COM   1      1005,1007     SPF XSTATS?
           GNE          TG99          NO
           ADD   4      SELF,INX2     0008
             CVBZ  4,8    A000-2,J062         ISPECLIN
             ADD   4      SELF,INX2     0004
             CVBZ  4,8    A000-2,J072         ISPEILIN
       TG99  WRITE          OUT1
               EXIT
 
         Example 6 - RRGEN Call J  ES2 separator routine
 
           LOC   OPN   SIZE   ADDRESS       CONSTANT OR REMARKS
           0        1         2         3           4         5         6
             123456789012345678901234567890123456789012345678901234567890
 
             //RRGEN    EXEC  PGM=RRGEN
               //STEPLIB  DD  DSN=SSO.RRGEN.LOAD,DISP=SHR
               //SYSOUT   DD  SYSOUT=*
               //SYSUDUMP DD  SYSOUT=*
                 //PRINT    DD  SYSOUT=*
                 //CARD     DD  *
                 JOHNNY
                   ROTTEN
                   //SYSIN    DD  *
                         CONS  8      0000                    P1
                         XCO  NS 4      0008          00000000  P2 LINE NUMBER (
BINARY)              *                                          P3 LINE OUTPUT A
REA                        CONS  40     0100
                           CONS  40     014  0
                             CONS  30     0180
                             XCONS 4      0210          00000008  P4 LENGTH(P1)
 (BINARY)                    CONS  8      0214                      P5
                               CONS  8      0222                    P6
                               CONS  8      0230                    P7
                               CONS  40     0300                         +
                                 CONS  40     0340
                                   CONS  30     0380
                             *
                             TG05  READ         CARD,TG99
                                     MOVE  8      CD00,0000     8-BYTE STRING
                                     MOVE  4      SELF,INX1     0001
                                     ENTER        TG10
                                       GO           TG05
                                 TG10  COM   4      INX1,SELF     0012
                                       GH           TG20
                                         CVZB  4,4    INX1,0008     P2    LINE 1
-12                                      MOVE  110    0300,0100
                                         CALL         IEFSD095,USING,0000,0008,0
100,0210                                 MOVE  110      0100,P000
                                           PRINT        SKIP1
                                           ADD   4      SELF,INX1     0001  NEXT
 LINE                                      GO           TG10
                                       TG20  MOVE  110    0300,P000
                                             PRINT        SKIP1         BLANK LI
NE                                           EXIT
                                         TG99  MOVE  4      SELF,RTCD     0000
                                               GO           EOJ
 
                                           Example 7 - RRGEN Call SMS Data Set A
ttribute Retrieval
                                           LOC   OPN   SIZE   ADDRESS       CONS
TANT OR REMARKS                              0        1         2         3
    4         5         6                    123456789012345678901234567
6789012345678901234567890
                                             /  /RRGEN    EXEC  PGM=RRGEN
                                               //STEPLIB  DD  DSN=SSO.RRGEN.LOAD
,DISP=SHR                                      //SYSOUT   DD  SYSOUT=*
                                               //PRINT    DD    SYSOUT=*
                                                       XCONS 4      0000
  00000000                                             XCONS 4      0004
  00000000                                             XCONS 8      0008
    0000000000000000                                     XCONS 4      0016
    0000002C                                             CONS  40     0020
    SSO.SMS.PARMLIB                                      CONS  4      0060
           +                                               CONS  30     0100
                                                             CONS  30     0130
                                                             CONS  30     0160
                                                             CONS  4      0200
                                                               CALL         IGWA
SMS ,USING,0000,0004,0008,0016,0020,0100,0200                  MOVE  9      SELF
,P000     STORCLAS=                                            MOVE  8      0100
,P009                                                            PRINT        SK
IP1                                                              MOVE  9      SE
LF,P000     MGMTCLAS=                                            MOVE  8      01
30,P009                                                            PRINT
SKIP1                                                              MOVE  9
SELF,P000     DATACLAS=                                            MOVE  8
0160,P009                                                          PR  INT
  SKIP1                                                              GO
  EOJ
                                                               *****************
****  ******* Bottom of Data ****************************         {
\INMR06
