 /********************* $CPU     REXX/CLIST      *********************/
 /* $CPU                                                             */
 /*                                                                  */
 /*    This Rexx exec displays CPU utilization and keeps a rolling   */
 /*    tab on these displays on a screen (there are about 16 lines   */
 /*    of display).  The time of display is also shown.  The CPU     */
 /*    Utilization is shown in a graphical format.                   */
 /*                                                                  */
 /* SYNTAX: $CPU                                                     */
 /*                                                                  */
 /********************************************************************/
 
 
If Sysvar(SYSISPF) ^='ACTIVE' Then Do
   Parse Source . . EXEC_NAME .
   Say '***' EXEC_NAME 'can only run under ISPF...'
   Exit
   End
 
Numeric Digits 256
 
NUMBER_OF_OUTPUT_LINES = 15
 
YELLOW  = 'YELLOW'
WHITE   = 'WHITE'
RED     = 'RED'
GREEN   = 'GREEN'
TURQ    = 'TURQ'
PINK    = 'PINK'
FLENG   = 6
 
CVT     = Get_Stor('10'x)
CPUMODL = C2X(Get_Stor(CVT,-6,2))
RCE     = Get_Stor(CVT,'490'x)
RMCT    = Get_Stor(CVT,'25C'x)
RCT     = Get_Stor(RMCT,'E4'x)
CCT     = Get_Stor(RMCT,4)
MCT     = Get_Stor(RMCT,'C'x)
SU      = C2D(Get_Stor(RMCT,64))
SUSEC   = Strip(Format((16000000/SU),8,2))
CSD     = Get_Stor(CVT,'294'x)
SMCAADD = Get_Stor(CVT,'C4'x)
SMF     = Get_Stor(SMCAADD,'10'x)
PVTADD  = Get_Stor(CVT,'2FC'x)
 
NUMCP   = C2D(Get_Stor(CSD,'A'x,2))
MIPS    = Strip(Format(((SUSEC/48.5)*NUMCP),7,2))
 
LATENT_DEMAND = 7*NUMCP
TOO_MUCH_STRESS = LATENT_DEMAND + (7*2)
 
LAST_TIME = 0
 
SETUP:
 
 
AVGCPU  = Format(C2D(Get_Stor(RCT,'38'x,2))/16,3,0)
REALCPU = C2D(Get_Stor(CCT,102,2))
CPU     = REALCPU||'%'
OCPU    = Strip(AVGCPU)||'%'
UIC     = C2D(Get_Stor(RCT,'36'x,2))
PRTE    = C2D(Get_Stor(RCT,'40'x,2))
SWPRT   = C2D(Get_Stor(RCT,'42'x,2))
MIGR    = C2D(Get_Stor(MCT,'14C'x))
AFQA    = C2D(Get_Stor(RCT,'3C'x,2))
 
 
XDD     = Date('U')
XTIME   = Time()
 
 
TL = REALCPU%2
CPUBAR = Center(CPU,TL,'-')
If REALCPU < 91  Then Do
   CPUBAR = Left(CPUBAR,TL)||Copies('o',50-TL)
   CPUMASK = Copies('#',TL)||Copies('}',50-TL)
   End
Else If REALCPU < 100 Then Do
   CPUBAR = Left(CPUBAR,TL)||Copies('o',50-TL)
   CPUMASK = Copies('_',TL)||Copies('}',50-TL)
   End
Else Do
   TL = (REALCPU-100)%2
   CPUMASK = Copies('~',50)||Copies('{',TL)
   CPUBAR = Left(CPUBAR,50)||Copies('x',TL)
   End
 
 
If LAST_TIME > 0 Then Do
   I = Strip(LAST_TIME)
   TEMP  = "CPUB"||I||"=Overlay(' ',CPUB"||I||",9,1)"
   Interpret TEMP
   TEMP  = "CPUCL"||I||"=Overlay(' ',CPUCL"||I||",1,9)"
   Interpret TEMP
   End
 
If LAST_TIME = NUMBER_OF_OUTPUT_LINES Then LAST_TIME = 1
Else LAST_TIME = LAST_TIME + 1
 
I = Strip(LAST_TIME)
 
TEMP  =  "CPUB"||I||" = XTIME||'>'||CPUBAR"
Interpret TEMP
TEMP  =  "CPUCL"||I||" = Copies('}',8)||' '||CPUMASK"
Interpret TEMP
 
Address ISPEXEC 'ADDPOP COLUMN(2)'
Address ISPEXEC 'DISPLAY PANEL($CPUPNL)'
TRC = Rc
Address ISPEXEC 'REMPOP'
If TRC < 8 Then Signal SETUP
 
Exit
 
Get_Stor: PROCEDURE
 
/*------------------------------------------------------------------*/
/*                                                                  */
/*      This procedure will extract data using the MVS Storage      */
/*      function. Input arguments will be:                          */
/*                                                                  */
/*      1) Storage_Pointer or Literal, i.e. CVTPTR or '10'x, or     */
/*         16 (like '10'x)                                          */
/*      2) Offset in hex or dec (numnbe), i.e. 'FF'x or 256 or      */
/*         D2C(256)                                                 */
/*      3) Length of returned data in decimal, i.e. 256             */
/*                                                                  */
/*      NOTE - To make sure that this procedure will work all the   */
/*      times, just include 'NUMERIC DIGITS 256' at the beginning   */
/*      of the calling REXX exec.                                   */
/*                                                                  */
/*------------------------------------------------------------------*/
 
Parse Arg AREA,OFFSET,LENG
 
If Arg(2,'O') Then OFFSET=0
 
If Arg(3,'O') Then LENG=4
 
If DataType(AREA) = 'CHAR' Then Do
   AREA =  C2D(AREA)
   End
 
If DataType(OFFSET) = 'CHAR' Then Do
   OFFSET =  C2D(OFFSET)
   End
 
Return  Storage((D2X(AREA+OFFSET)),LENG)
 
